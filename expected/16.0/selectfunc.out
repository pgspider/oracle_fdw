--Testcase 1:
SET client_min_messages = WARNING;
--Testcase 2:
CREATE EXTENSION oracle_fdw;
--Testcase 3:
CREATE SERVER oracle_srv FOREIGN DATA WRAPPER oracle_fdw OPTIONS (dbserver '', isolation_level 'read_committed', nchar 'true');
--Testcase 4:
CREATE USER MAPPING FOR CURRENT_USER SERVER oracle_srv OPTIONS (user 'test', password 'test');
-- Init data for numeric function
--Testcase 5:
SELECT oracle_execute('oracle_srv', 'DROP TABLE test.numeric_tbl PURGE');
 oracle_execute 
----------------
 
(1 row)

--Testcase 6:
SELECT oracle_execute(
          'oracle_srv',
          E'CREATE TABLE NUMERIC_TBL (\n'
          '   id        NUMBER(5) PRIMARY KEY,\n'
          '   tag1      VARCHAR(10),\n'
          '   value1    float,\n'
          '   value2    NUMBER(5),\n'
          '   value3    float,\n'
          '   value4    NUMBER(5),\n'
          '   value5    float,\n'
          '   value6    float,\n'
          '   value7    float,\n'
          '   value8    NUMBER(5),\n'
          '   str1      VARCHAR(10),\n'
          '   str2      VARCHAR(10),\n'
          '   str3      VARCHAR(20),\n'
          '   str4      VARCHAR(20),\n'
          '   str5      VARCHAR(20)\n'
          ') SEGMENT CREATION IMMEDIATE'
       );
 oracle_execute 
----------------
 
(1 row)

--Testcase 7:
CREATE FOREIGN TABLE numeric_tbl (
  id int OPTIONS (key 'yes') NOT NULL ,
	tag1 text, 
  value1 float, 
  value2 int, 
  value3 float, 
  value4 int,
  value5 float,
  value6 float,
  value7 float,
  value8 int,
  str1 text, 
  str2 text,
  str3 text,
  str4 text,
  str5 text
) SERVER oracle_srv OPTIONS (table 'NUMERIC_TBL');
--Testcase 8:
INSERT INTO numeric_tbl VALUES (0, 'a', 0.1, 100, -0.1, -100, 0.1, 1.2, 5.0, 1 ,  '---XYZ---', '   abc   ', 'This is',           '2017-03-31 9:30:20', '12,345.6-');
--Testcase 9:
INSERT INTO numeric_tbl VALUES (1, 'a', 0.2, 100, -0.2, -100, 0.2, 2.3, 6.0, 2 ,  '---XYZ---', '   abc   ', 'the test string',   '2017-03-31 9:30:20', '12,345.6-');
--Testcase 10:
INSERT INTO numeric_tbl VALUES (2, 'a', 0.3, 100, -0.3, -100, 0.3, 3.4, 7.5, 3 ,  '---XYZ---', '   abc   ', 'containing space',  '2017-03-31 9:30:20', '12,345.6-');
--Testcase 11:
INSERT INTO numeric_tbl VALUES (3, 'b', 1.1, 200, -1.1, -200, 0.4, 4.5, 8.0, 1 ,  '---XYZ---', '   abc   ', 'between the words', '2017-03-31 9:30:20', '12,345.6-');
--Testcase 12:
INSERT INTO numeric_tbl VALUES (4, 'b', 2.2, 200, -2.2, -200, 0.5, 5.6, 9.0, 2 ,  '---XYZ---', '   abc   ', 'reserved string',   '2017-03-31 9:30:20', '12,345.6-');
--Testcase 13:
INSERT INTO numeric_tbl VALUES (5, 'b', 3.3, 200, -3.3, -200, 0.6, 6.7, 10.5, 3 , '---XYZ---', '   abc   ', 'reserved string2',  '2017-03-31 9:30:20', '12,345.6-');
--Testcase 14:
SELECT * FROM numeric_tbl;
 id | tag1 | value1 | value2 | value3 | value4 | value5 | value6 | value7 | value8 |   str1    |   str2    |       str3        |        str4        |   str5    
----+------+--------+--------+--------+--------+--------+--------+--------+--------+-----------+-----------+-------------------+--------------------+-----------
  0 | a    |    0.1 |    100 |   -0.1 |   -100 |    0.1 |    1.2 |      5 |      1 | ---XYZ--- |    abc    | This is           | 2017-03-31 9:30:20 | 12,345.6-
  1 | a    |    0.2 |    100 |   -0.2 |   -100 |    0.2 |    2.3 |      6 |      2 | ---XYZ--- |    abc    | the test string   | 2017-03-31 9:30:20 | 12,345.6-
  2 | a    |    0.3 |    100 |   -0.3 |   -100 |    0.3 |    3.4 |    7.5 |      3 | ---XYZ--- |    abc    | containing space  | 2017-03-31 9:30:20 | 12,345.6-
  3 | b    |    1.1 |    200 |   -1.1 |   -200 |    0.4 |    4.5 |      8 |      1 | ---XYZ--- |    abc    | between the words | 2017-03-31 9:30:20 | 12,345.6-
  4 | b    |    2.2 |    200 |   -2.2 |   -200 |    0.5 |    5.6 |      9 |      2 | ---XYZ--- |    abc    | reserved string   | 2017-03-31 9:30:20 | 12,345.6-
  5 | b    |    3.3 |    200 |   -3.3 |   -200 |    0.6 |    6.7 |   10.5 |      3 | ---XYZ--- |    abc    | reserved string2  | 2017-03-31 9:30:20 | 12,345.6-
(6 rows)

--
-- Init data for date/Time function
--
--Testcase 15:
SELECT oracle_execute('oracle_srv', 'DROP TABLE test.time_tbl PURGE');
 oracle_execute 
----------------
 
(1 row)

--Testcase 16:
SELECT oracle_execute(
          'oracle_srv',
          E'CREATE TABLE test.time_tbl (\n'
          '   id   NUMBER(5) PRIMARY KEY,\n'
          '   c1   TIMESTAMP WITH TIME ZONE,\n'
          '   c2   DATE,\n'
          '   c3   TIMESTAMP\n'
          ') SEGMENT CREATION IMMEDIATE'
       );
 oracle_execute 
----------------
 
(1 row)

--Testcase 17:
CREATE FOREIGN TABLE time_tbl(id int OPTIONS (key 'yes'), 
                              c1 timestamp with time zone, 
                              c2 date, 
                              c3 timestamp)
  SERVER oracle_srv OPTIONS(table 'TIME_TBL');
--Testcase 18:
SELECT oracle_execute(
          'oracle_srv',
          E'INSERT INTO test.time_tbl VALUES (0, \n'
          ' TIMESTAMP ''2021-01-02 12:10:30.123456 +02:00'', \n'
          ' DATE ''2021-01-02'', \n'
          ' TIMESTAMP ''2021-01-03 12:10:30.123456'')'
        );
 oracle_execute 
----------------
 
(1 row)

--Testcase 19:
SELECT oracle_execute(
          'oracle_srv',
          E'INSERT INTO time_tbl VALUES (1, \n'
          ' TIMESTAMP ''2021-01-01 23:12:12.654321 -03:00'', \n'
          ' DATE ''2021-01-01'', \n'
          ' TIMESTAMP ''2021-01-04 23:12:12.654321'')'
        );
 oracle_execute 
----------------
 
(1 row)

--Testcase 20:
SELECT oracle_execute(
          'oracle_srv',
          E'INSERT INTO time_tbl VALUES (2, \n'
          ' TIMESTAMP ''2021-01-10 11:12:12.112233 +04:00'', \n'
          ' DATE ''2021-01-10'', \n'
          ' TIMESTAMP ''2021-01-05 11:12:12.112233'')'
        );
 oracle_execute 
----------------
 
(1 row)

--Testcase 21:
SELECT oracle_execute(
          'oracle_srv',
          E'INSERT INTO time_tbl VALUES (3, \n'
          ' TIMESTAMP ''2021-01-15 05:59:59.654321 -05:00'', \n'
          ' DATE ''2021-01-15'', \n'
          ' TIMESTAMP ''2021-01-06 15:59:59.654321'')'
        );
 oracle_execute 
----------------
 
(1 row)

--Testcase 22:
SELECT oracle_execute(
          'oracle_srv',
          E'INSERT INTO time_tbl VALUES (4, \n'
          ' TIMESTAMP ''2021-01-29 00:59:59.000102 +06:00'', \n'
          ' DATE ''2021-01-29'', \n'
          ' TIMESTAMP ''2021-01-07 00:59:59.000102'')'
        );
 oracle_execute 
----------------
 
(1 row)

--Testcase 23:
SELECT * FROM time_tbl;
 id |                 c1                  |     c2     |               c3                
----+-------------------------------------+------------+---------------------------------
  0 | Sat Jan 02 02:10:30.123456 2021 PST | 01-02-2021 | Sun Jan 03 12:10:30.123456 2021
  1 | Fri Jan 01 18:12:12.654321 2021 PST | 01-01-2021 | Mon Jan 04 23:12:12.654321 2021
  2 | Sat Jan 09 23:12:12.112233 2021 PST | 01-10-2021 | Tue Jan 05 11:12:12.112233 2021
  3 | Fri Jan 15 02:59:59.654321 2021 PST | 01-15-2021 | Wed Jan 06 15:59:59.654321 2021
  4 | Thu Jan 28 10:59:59.000102 2021 PST | 01-29-2021 | Thu Jan 07 00:59:59.000102 2021
(5 rows)

--
-- End init data for date/time function
--
--
-- Init data for character function
--
-- drop the Oracle tables if they exist
--Testcase 24:
SELECT oracle_execute('oracle_srv', 'DROP TABLE test.character_tbl PURGE');
 oracle_execute 
----------------
 
(1 row)

--Testcase 25:
SELECT oracle_execute(
          'oracle_srv',
          E'CREATE TABLE test.character_tbl (\n'
          '   id  NUMBER(5) PRIMARY KEY,\n'
          '   c   CHAR(10 CHAR),\n'
          '   nc  NCHAR(10),\n'
          '   vc  VARCHAR2(10 CHAR),\n'
          '   nvc NVARCHAR2(10),\n'
          '   lc  CLOB,\n'
          '   n   NUMBER(5),\n'
          '   fl  BINARY_FLOAT,\n'
          '   db  BINARY_DOUBLE,\n'
          '   itv  INTERVAL YEAR TO MONTH,\n'
          '   timetz  TIMESTAMP WITH TIME ZONE,\n'
          '   dt  TIMESTAMP,\n'
          '   dt_text  CHAR(30 CHAR)\n'
          ') SEGMENT CREATION IMMEDIATE'
       );
 oracle_execute 
----------------
 
(1 row)

--Testcase 26:
CREATE FOREIGN TABLE character_tbl (
   id  integer OPTIONS (key 'yes') NOT NULL,
   c   character(10),
   nc  character(10),
   vc  character varying(10),
   nvc character varying(10),
   lc  text,
   n   int,
   fl  float,
   db  double precision,
   itv interval,
   timetz  timestamptz,
	 dt  timestamp,
   dt_text character(30)
) SERVER oracle_srv OPTIONS (table 'CHARACTER_TBL');
--Testcase 27:
INSERT INTO character_tbl VALUES (
    60,
   'fixed char',
   'nat''l char',
   '   varlena',
   'nat''l var  ',
   'character large object',
   100,
   3.14159,
   7.3,
   '2 YEARS',
   '1999-12-02 10:00:00 -8:00',
   '1999-12-01 10:00:00',
   '10-Sep-02 14:10:10'
);
--Testcase 28:
INSERT INTO character_tbl VALUES (
    79,
   's1mple',
   'perfecto',
   '  b1t  ',
   'Boombl4',
   'Natus Vincere',
   121,
   -3.14159,
   -2.63,
   '4 YEARS 5 MONTHS',
   '1999-11-03 11:11:11 -9:00',
   '1999-12-04 12:12:12',
   '12-Sep-02 15:10:10.123456'
);
--Testcase 29:
SELECT * FROM character_tbl;
 id |     c      |     nc     |     vc     |    nvc     |           lc           |  n  |     fl      |  db   |       itv        |            timetz            |            dt            |            dt_text             
----+------------+------------+------------+------------+------------------------+-----+-------------+-------+------------------+------------------------------+--------------------------+--------------------------------
 60 | fixed char | nat'l char |    varlena | nat'l var  | character large object | 100 |  3.14159012 |   7.3 | @ 2 years        | Thu Dec 02 10:00:00 1999 PST | Wed Dec 01 10:00:00 1999 | 10-Sep-02 14:10:10            
 79 | s1mple     | perfecto   |   b1t      | Boombl4    | Natus Vincere          | 121 | -3.14159012 | -2.63 | @ 4 years 5 mons | Wed Nov 03 12:11:11 1999 PST | Sat Dec 04 12:12:12 1999 | 12-Sep-02 15:10:10.123456     
(2 rows)

--
-- End init data for character function
--
-- Test for Numeric
-- ===============================================================================
-- test abs()
-- ===============================================================================
-- select abs (builtin function, EXPLAIN (COSTS OFF))
--Testcase 30:
EXPLAIN (COSTS OFF)
SELECT abs(value1), abs(value2), abs(value3), abs(value4) FROM numeric_tbl;
                                                       QUERY PLAN                                                       
------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on numeric_tbl
   Oracle query: SELECT /*3a3e9ce1642025dfd6451e15cf1fadd9*/ "VALUE1", "VALUE2", "VALUE3", "VALUE4" FROM  "NUMERIC_TBL"
(2 rows)

-- select abs (buitin function, result)
--Testcase 31:
SELECT abs(value1), abs(value2), abs(value3), abs(value4) FROM numeric_tbl;
 abs | abs | abs | abs 
-----+-----+-----+-----
 0.1 | 100 | 0.1 | 100
 0.2 | 100 | 0.2 | 100
 0.3 | 100 | 0.3 | 100
 1.1 | 200 | 1.1 | 200
 2.2 | 200 | 2.2 | 200
 3.3 | 200 | 3.3 | 200
(6 rows)

-- select abs (builtin function, not pushdown constraints, EXPLAIN (COSTS OFF))
--Testcase 32:
EXPLAIN (COSTS OFF)
SELECT abs(value1), abs(value2), abs(value3), abs(value4) FROM numeric_tbl WHERE to_hex(value2) != '64';
                                                       QUERY PLAN                                                       
------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on numeric_tbl
   Filter: (to_hex(value2) <> '64'::text)
   Oracle query: SELECT /*3a3e9ce1642025dfd6451e15cf1fadd9*/ "VALUE1", "VALUE2", "VALUE3", "VALUE4" FROM  "NUMERIC_TBL"
(3 rows)

-- select abs (builtin function, not pushdown constraints, result)
--Testcase 33:
SELECT abs(value1), abs(value2), abs(value3), abs(value4) FROM numeric_tbl WHERE to_hex(value2) != '64';
 abs | abs | abs | abs 
-----+-----+-----+-----
 1.1 | 200 | 1.1 | 200
 2.2 | 200 | 2.2 | 200
 3.3 | 200 | 3.3 | 200
(3 rows)

-- select abs (builtin function, pushdown constraints, EXPLAIN (COSTS OFF))
--Testcase 34:
EXPLAIN (COSTS OFF)
SELECT abs(value1), abs(value2), abs(value3), abs(value4) FROM numeric_tbl WHERE value2 != 200;
                                                                   QUERY PLAN                                                                   
------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on numeric_tbl
   Oracle query: SELECT /*ee255a287dc590cc2e754740ed3cd0e9*/ "VALUE1", "VALUE2", "VALUE3", "VALUE4" FROM  "NUMERIC_TBL" WHERE ("VALUE2" <> 200)
(2 rows)

-- select abs (builtin function, pushdown constraints, result)
--Testcase 35:
SELECT abs(value1), abs(value2), abs(value3), abs(value4) FROM numeric_tbl WHERE value2 != 200;
 abs | abs | abs | abs 
-----+-----+-----+-----
 0.1 | 100 | 0.1 | 100
 0.2 | 100 | 0.2 | 100
 0.3 | 100 | 0.3 | 100
(3 rows)

-- ===============================================================================
-- test acos()
-- ===============================================================================
-- select acos (builtin function, EXPLAIN (COSTS OFF))
--Testcase 36:
EXPLAIN (COSTS OFF)
SELECT value1, acos(value5), acos(0.5) FROM numeric_tbl;
                                             QUERY PLAN                                             
----------------------------------------------------------------------------------------------------
 Foreign Scan on numeric_tbl
   Oracle query: SELECT /*ef4c870940eb2323da34275306f5b4ba*/ "VALUE1", "VALUE5" FROM  "NUMERIC_TBL"
(2 rows)

-- select acos (builtin function, result)
--Testcase 37:
SELECT value1, acos(value5), acos(0.5) FROM numeric_tbl;
 value1 |        acos        |        acos        
--------+--------------------+--------------------
    0.1 | 1.4706289056333368 | 1.0471975511965979
    0.2 |  1.369438406004566 | 1.0471975511965979
    0.3 | 1.2661036727794992 | 1.0471975511965979
    1.1 | 1.1592794807274085 | 1.0471975511965979
    2.2 | 1.0471975511965979 | 1.0471975511965979
    3.3 | 0.9272952180016123 | 1.0471975511965979
(6 rows)

-- select acos (builtin function, not pushdown constraints, EXPLAIN (COSTS OFF))
--Testcase 38:
EXPLAIN (COSTS OFF)
SELECT value1, acos(value5), acos(0.5) FROM numeric_tbl WHERE to_hex(value2) = '64';
                                                  QUERY PLAN                                                  
--------------------------------------------------------------------------------------------------------------
 Foreign Scan on numeric_tbl
   Filter: (to_hex(value2) = '64'::text)
   Oracle query: SELECT /*8c7131ba7a34fcd5cb1f2d4aeec06c19*/ "VALUE1", "VALUE2", "VALUE5" FROM  "NUMERIC_TBL"
(3 rows)

-- select acos (builtin function, not pushdown constraints, result)
--Testcase 39:
SELECT value1, acos(value5), acos(0.5) FROM numeric_tbl WHERE to_hex(value2) = '64';
 value1 |        acos        |        acos        
--------+--------------------+--------------------
    0.1 | 1.4706289056333368 | 1.0471975511965979
    0.2 |  1.369438406004566 | 1.0471975511965979
    0.3 | 1.2661036727794992 | 1.0471975511965979
(3 rows)

-- select acos (builtin function, pushdown constraints, EXPLAIN (COSTS OFF))
--Testcase 40:
EXPLAIN (COSTS OFF)
SELECT value1, acos(value5), acos(0.5) FROM numeric_tbl WHERE value2 != 200;
                                                         QUERY PLAN                                                         
----------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on numeric_tbl
   Oracle query: SELECT /*ba2e9bf80eaa5268855bd0d5bf536da1*/ "VALUE1", "VALUE5" FROM  "NUMERIC_TBL" WHERE ("VALUE2" <> 200)
(2 rows)

-- select acos (builtin function, pushdown constraints, result)
--Testcase 41:
SELECT value1, acos(value5), acos(0.5) FROM numeric_tbl WHERE value2 != 200;
 value1 |        acos        |        acos        
--------+--------------------+--------------------
    0.1 | 1.4706289056333368 | 1.0471975511965979
    0.2 |  1.369438406004566 | 1.0471975511965979
    0.3 | 1.2661036727794992 | 1.0471975511965979
(3 rows)

-- select acos (builtin function, acos in constraints, EXPLAIN (COSTS OFF))
--Testcase 42:
EXPLAIN (COSTS OFF)
SELECT value1, acos(value5), acos(0.5) FROM numeric_tbl WHERE acos(value5) != 1;
                                                           QUERY PLAN                                                           
--------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on numeric_tbl
   Oracle query: SELECT /*23958f2cf46c5beba7fa6dbfea4b0480*/ "VALUE1", "VALUE5" FROM  "NUMERIC_TBL" WHERE (acos("VALUE5") <> 1)
(2 rows)

-- select acos (builtin function, acos in constraints, result)
--Testcase 43:
SELECT value1, acos(value5), acos(0.5) FROM numeric_tbl WHERE acos(value5) != 1;
 value1 |        acos        |        acos        
--------+--------------------+--------------------
    0.1 | 1.4706289056333368 | 1.0471975511965979
    0.2 |  1.369438406004566 | 1.0471975511965979
    0.3 | 1.2661036727794992 | 1.0471975511965979
    1.1 | 1.1592794807274085 | 1.0471975511965979
    2.2 | 1.0471975511965979 | 1.0471975511965979
    3.3 | 0.9272952180016123 | 1.0471975511965979
(6 rows)

-- select acos (builtin function, acos in constraints, EXPLAIN (COSTS OFF))
--Testcase 44:
EXPLAIN (COSTS OFF)
SELECT value1, acos(value5), acos(0.5) FROM numeric_tbl WHERE acos(0.5) > value1;
                                                                QUERY PLAN                                                                
------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on numeric_tbl
   Oracle query: SELECT /*2b3edc400af62695081210b722d73303*/ "VALUE1", "VALUE5" FROM  "NUMERIC_TBL" WHERE (1.0471975511965979 > "VALUE1")
(2 rows)

-- select acos (builtin function, acos in constraints, result)
--Testcase 45:
SELECT value1, acos(value5), acos(0.5) FROM numeric_tbl WHERE acos(0.5) > value1;
 value1 |        acos        |        acos        
--------+--------------------+--------------------
    0.1 | 1.4706289056333368 | 1.0471975511965979
    0.2 |  1.369438406004566 | 1.0471975511965979
    0.3 | 1.2661036727794992 | 1.0471975511965979
(3 rows)

-- select acos as nest function with agg (pushdown, EXPLAIN (COSTS OFF))
--Testcase 46:
EXPLAIN (COSTS OFF)
SELECT sum(value3),acos(sum(value1)) FROM numeric_tbl WHERE value2 != 200;
                                                                 QUERY PLAN                                                                 
--------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan
   Oracle query: SELECT /*9d22465901245390160d3cae89a2415d*/ sum("VALUE3"), acos(sum("VALUE1")) FROM  "NUMERIC_TBL" WHERE ("VALUE2" <> 200)
(2 rows)

-- select acos as nest function with agg (pushdown, result)
--Testcase 47:
SELECT sum(value3),acos(sum(value1)) FROM numeric_tbl WHERE value2 != 200;
 sum  |        acos        
------+--------------------
 -0.6 | 0.9272952180016122
(1 row)

-- select acos as nest with log2 (pushdown, EXPLAIN (COSTS OFF))
-- should return failure because input is out of range
--Testcase 48:
EXPLAIN (COSTS OFF)
SELECT value1, acos(log(2, value2)) FROM numeric_tbl;
                                             QUERY PLAN                                             
----------------------------------------------------------------------------------------------------
 Foreign Scan on numeric_tbl
   Oracle query: SELECT /*c35678a687054ae56f3a83ca5558704c*/ "VALUE1", "VALUE2" FROM  "NUMERIC_TBL"
(2 rows)

-- select acos as nest with log2 (pushdown, result)
--Testcase 49:
SELECT value1, acos(log(2, value2)) FROM numeric_tbl;
ERROR:  input is out of range
-- select acos with non pushdown func and explicit constant (EXPLAIN (COSTS OFF))
--Testcase 50:
EXPLAIN (COSTS OFF)
SELECT acos(value5), pi(), 4.1 FROM numeric_tbl;
                                        QUERY PLAN                                        
------------------------------------------------------------------------------------------
 Foreign Scan on numeric_tbl
   Oracle query: SELECT /*d6a1da4f460ffb90463d9bca7417f1e1*/ "VALUE5" FROM  "NUMERIC_TBL"
(2 rows)

-- select acos with non pushdown func and explicit constant (result)
--Testcase 51:
SELECT acos(value5), pi(), 4.1 FROM numeric_tbl;
        acos        |        pi         | ?column? 
--------------------+-------------------+----------
 1.4706289056333368 | 3.141592653589793 |      4.1
  1.369438406004566 | 3.141592653589793 |      4.1
 1.2661036727794992 | 3.141592653589793 |      4.1
 1.1592794807274085 | 3.141592653589793 |      4.1
 1.0471975511965979 | 3.141592653589793 |      4.1
 0.9272952180016123 | 3.141592653589793 |      4.1
(6 rows)

-- select acos with order by (EXPLAIN (COSTS OFF))
--Testcase 52:
EXPLAIN (COSTS OFF)
SELECT value1, acos(1-value5) FROM numeric_tbl ORDER BY acos(1-value5);
                                                                   QUERY PLAN                                                                    
-------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on numeric_tbl
   Oracle query: SELECT /*1b9a22761727da7b5fe8957372da5f71*/ "VALUE1", "VALUE5" FROM  "NUMERIC_TBL" ORDER BY acos((1 - "VALUE5")) ASC NULLS LAST
(2 rows)

-- select acos with order by (result)
--Testcase 53:
SELECT value1, acos(1-value5) FROM numeric_tbl ORDER BY acos(1-value5);
 value1 |        acos         
--------+---------------------
    0.1 | 0.45102681179626236
    0.2 |  0.6435011087932843
    0.3 |  0.7953988301841436
    1.1 |  0.9272952180016123
    2.2 |  1.0471975511965979
    3.3 |  1.1592794807274085
(6 rows)

-- select acos with order by index (result)
--Testcase 54:
SELECT value1, acos(1-value5) FROM numeric_tbl ORDER BY 2,1;
 value1 |        acos         
--------+---------------------
    0.1 | 0.45102681179626236
    0.2 |  0.6435011087932843
    0.3 |  0.7953988301841436
    1.1 |  0.9272952180016123
    2.2 |  1.0471975511965979
    3.3 |  1.1592794807274085
(6 rows)

-- select acos with order by index (result)
--Testcase 55:
SELECT value1, acos(1-value5) FROM numeric_tbl ORDER BY 1,2;
 value1 |        acos         
--------+---------------------
    0.1 | 0.45102681179626236
    0.2 |  0.6435011087932843
    0.3 |  0.7953988301841436
    1.1 |  0.9272952180016123
    2.2 |  1.0471975511965979
    3.3 |  1.1592794807274085
(6 rows)

-- select acos with group by (EXPLAIN (COSTS OFF))
--Testcase 56:
EXPLAIN (COSTS OFF)
SELECT count(value1), acos(1-value5) FROM numeric_tbl GROUP BY acos(1-value5);
                                                                      QUERY PLAN                                                                       
-------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan
   Oracle query: SELECT /*40be9697a43303f6217813351ae8eb22*/ count("VALUE1"), acos((1 - "VALUE5")) FROM  "NUMERIC_TBL" GROUP BY (acos((1 - "VALUE5")))
(2 rows)

-- select acos with group by (result)
--Testcase 57:
SELECT count(value1), acos(1-value5) FROM numeric_tbl GROUP BY acos(1-value5);
 count |        acos        
-------+--------------------
     1 | 0.4510268117962624
     1 | 0.6435011087932844
     1 | 0.7953988301841436
     1 | 0.9272952180016122
     1 | 1.0471975511965979
     1 | 1.1592794807274085
(6 rows)

-- select acos with group by index (result)
--Testcase 58:
SELECT value1, acos(1-value5) FROM numeric_tbl GROUP BY 2,1;
 value1 |        acos        
--------+--------------------
    0.1 | 0.4510268117962624
    0.2 | 0.6435011087932844
    0.3 | 0.7953988301841436
    1.1 | 0.9272952180016122
    2.2 | 1.0471975511965979
    3.3 | 1.1592794807274085
(6 rows)

-- select acos with group by index (result)
--Testcase 59:
SELECT value1, acos(1-value5) FROM numeric_tbl GROUP BY 1,2;
 value1 |        acos        
--------+--------------------
    0.1 | 0.4510268117962624
    0.2 | 0.6435011087932844
    0.3 | 0.7953988301841436
    1.1 | 0.9272952180016122
    2.2 | 1.0471975511965979
    3.3 | 1.1592794807274085
(6 rows)

-- select acos with group by having (EXPLAIN (COSTS OFF))
--Testcase 60:
EXPLAIN (COSTS OFF)
SELECT count(value1), acos(1-value5) FROM numeric_tbl GROUP BY acos(1-value5) HAVING avg(value1) > 0;
                                                                                    QUERY PLAN                                                                                    
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan
   Oracle query: SELECT /*46f2ebd63a4aa32a55095cb64f2255ac*/ count("VALUE1"), acos((1 - "VALUE5")) FROM  "NUMERIC_TBL" GROUP BY (acos((1 - "VALUE5"))) HAVING (avg("VALUE1") > 0)
(2 rows)

-- select acos with group by having (result)
--Testcase 61:
SELECT count(value1), acos(1-value5) FROM numeric_tbl GROUP BY acos(1-value5) HAVING avg(value1) > 0;
 count |        acos        
-------+--------------------
     1 | 0.4510268117962624
     1 | 0.6435011087932844
     1 | 0.7953988301841436
     1 | 0.9272952180016122
     1 | 1.0471975511965979
     1 | 1.1592794807274085
(6 rows)

-- select acos with group by index having (result)
--Testcase 62:
SELECT value1, acos(1-value5) FROM numeric_tbl GROUP BY 2,1 HAVING acos(1-value5) > 0;
 value1 |        acos        
--------+--------------------
    0.1 | 0.4510268117962624
    0.2 | 0.6435011087932844
    0.3 | 0.7953988301841436
    1.1 | 0.9272952180016122
    2.2 | 1.0471975511965979
    3.3 | 1.1592794807274085
(6 rows)

-- select acos with group by index having (result)
--Testcase 63:
SELECT value1, acos(1-value5) FROM numeric_tbl GROUP BY 1,2 HAVING value1 > 1;
 value1 |        acos        
--------+--------------------
    1.1 | 0.9272952180016122
    2.2 | 1.0471975511965979
    3.3 | 1.1592794807274085
(3 rows)

-- select acos and as
--Testcase 64:
SELECT acos(value5) as acos1 FROM numeric_tbl;
       acos1        
--------------------
 1.4706289056333368
  1.369438406004566
 1.2661036727794992
 1.1592794807274085
 1.0471975511965979
 0.9272952180016123
(6 rows)

-- ===============================================================================
-- test asin()
-- ===============================================================================
-- select asin (builtin function, EXPLAIN (COSTS OFF))
--Testcase 65:
EXPLAIN (COSTS OFF)
SELECT value1, asin(value5), asin(0.5) FROM numeric_tbl;
                                             QUERY PLAN                                             
----------------------------------------------------------------------------------------------------
 Foreign Scan on numeric_tbl
   Oracle query: SELECT /*ef4c870940eb2323da34275306f5b4ba*/ "VALUE1", "VALUE5" FROM  "NUMERIC_TBL"
(2 rows)

-- select asin (builtin function, result)
--Testcase 66:
SELECT value1, asin(value5), asin(0.5) FROM numeric_tbl;
 value1 |        asin         |        asin        
--------+---------------------+--------------------
    0.1 |  0.1001674211615598 | 0.5235987755982989
    0.2 |  0.2013579207903308 | 0.5235987755982989
    0.3 |  0.3046926540153975 | 0.5235987755982989
    1.1 | 0.41151684606748806 | 0.5235987755982989
    2.2 |  0.5235987755982989 | 0.5235987755982989
    3.3 |  0.6435011087932844 | 0.5235987755982989
(6 rows)

-- select asin (builtin function, not pushdown constraints, EXPLAIN (COSTS OFF))
--Testcase 67:
EXPLAIN (COSTS OFF)
SELECT value1, asin(value5), asin(0.5) FROM numeric_tbl WHERE to_hex(value2) = '64';
                                                  QUERY PLAN                                                  
--------------------------------------------------------------------------------------------------------------
 Foreign Scan on numeric_tbl
   Filter: (to_hex(value2) = '64'::text)
   Oracle query: SELECT /*8c7131ba7a34fcd5cb1f2d4aeec06c19*/ "VALUE1", "VALUE2", "VALUE5" FROM  "NUMERIC_TBL"
(3 rows)

-- select asin (builtin function, not pushdown constraints, result)
--Testcase 68:
SELECT value1, asin(value5), asin(0.5) FROM numeric_tbl WHERE to_hex(value2) = '64';
 value1 |        asin        |        asin        
--------+--------------------+--------------------
    0.1 | 0.1001674211615598 | 0.5235987755982989
    0.2 | 0.2013579207903308 | 0.5235987755982989
    0.3 | 0.3046926540153975 | 0.5235987755982989
(3 rows)

-- select asin (builtin function, pushdown constraints, EXPLAIN (COSTS OFF))
--Testcase 69:
EXPLAIN (COSTS OFF)
SELECT value1, asin(value5), asin(0.5) FROM numeric_tbl WHERE value2 != 200;
                                                         QUERY PLAN                                                         
----------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on numeric_tbl
   Oracle query: SELECT /*ba2e9bf80eaa5268855bd0d5bf536da1*/ "VALUE1", "VALUE5" FROM  "NUMERIC_TBL" WHERE ("VALUE2" <> 200)
(2 rows)

-- select asin (builtin function, pushdown constraints, result)
--Testcase 70:
SELECT value1, asin(value5), asin(0.5) FROM numeric_tbl WHERE value2 != 200;
 value1 |        asin        |        asin        
--------+--------------------+--------------------
    0.1 | 0.1001674211615598 | 0.5235987755982989
    0.2 | 0.2013579207903308 | 0.5235987755982989
    0.3 | 0.3046926540153975 | 0.5235987755982989
(3 rows)

-- select asin (builtin function, asin in constraints, EXPLAIN (COSTS OFF))
--Testcase 71:
EXPLAIN (COSTS OFF)
SELECT value1, asin(value5), asin(0.5) FROM numeric_tbl WHERE value1 != 1;
                                                        QUERY PLAN                                                        
--------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on numeric_tbl
   Oracle query: SELECT /*a236e97ee2ec8a40d3bbb0a44abf74a6*/ "VALUE1", "VALUE5" FROM  "NUMERIC_TBL" WHERE ("VALUE1" <> 1)
(2 rows)

-- select asin (builtin function, asin in constraints, result)
--Testcase 72:
SELECT value1, asin(value5), asin(0.5) FROM numeric_tbl WHERE value1 != 1;
 value1 |        asin         |        asin        
--------+---------------------+--------------------
    0.1 |  0.1001674211615598 | 0.5235987755982989
    0.2 |  0.2013579207903308 | 0.5235987755982989
    0.3 |  0.3046926540153975 | 0.5235987755982989
    1.1 | 0.41151684606748806 | 0.5235987755982989
    2.2 |  0.5235987755982989 | 0.5235987755982989
    3.3 |  0.6435011087932844 | 0.5235987755982989
(6 rows)

-- select asin (builtin function, asin in constraints, EXPLAIN (COSTS OFF))
--Testcase 73:
EXPLAIN (COSTS OFF)
SELECT value1, asin(value5), asin(0.5) FROM numeric_tbl WHERE asin(0.5) > value1;
                                                                QUERY PLAN                                                                
------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on numeric_tbl
   Oracle query: SELECT /*36e365caabbecf21cac02b8c98a2c1ac*/ "VALUE1", "VALUE5" FROM  "NUMERIC_TBL" WHERE (0.5235987755982989 > "VALUE1")
(2 rows)

-- select asin (builtin function, asin in constraints, result)
--Testcase 74:
SELECT value1, asin(value5), asin(0.5) FROM numeric_tbl WHERE asin(0.5) > value1;
 value1 |        asin        |        asin        
--------+--------------------+--------------------
    0.1 | 0.1001674211615598 | 0.5235987755982989
    0.2 | 0.2013579207903308 | 0.5235987755982989
    0.3 | 0.3046926540153975 | 0.5235987755982989
(3 rows)

-- select asin as nest function with agg (pushdown, EXPLAIN (COSTS OFF))
--Testcase 75:
EXPLAIN (COSTS OFF)
SELECT sum(value3),asin(sum(value1)) FROM numeric_tbl WHERE value2 != 200;
                                                                 QUERY PLAN                                                                 
--------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan
   Oracle query: SELECT /*937579a7b651b96f01d6f4077427a632*/ sum("VALUE3"), asin(sum("VALUE1")) FROM  "NUMERIC_TBL" WHERE ("VALUE2" <> 200)
(2 rows)

-- select asin as nest function with agg (pushdown, result)
--Testcase 76:
SELECT sum(value3),asin(sum(value1)) FROM numeric_tbl WHERE value2 != 200;
 sum  |        asin        
------+--------------------
 -0.6 | 0.6435011087932844
(1 row)

-- select asin as nest with log2 (pushdown, EXPLAIN (COSTS OFF))
--Testcase 77:
EXPLAIN (COSTS OFF)
SELECT value1, asin(log(2, value2)) FROM numeric_tbl;
                                             QUERY PLAN                                             
----------------------------------------------------------------------------------------------------
 Foreign Scan on numeric_tbl
   Oracle query: SELECT /*c35678a687054ae56f3a83ca5558704c*/ "VALUE1", "VALUE2" FROM  "NUMERIC_TBL"
(2 rows)

-- select asin as nest with log2 (pushdown, result)
--Testcase 78:
SELECT value1, asin(log(2, value2)) FROM numeric_tbl;
ERROR:  input is out of range
-- select asin with non pushdown func and explicit constant (EXPLAIN (COSTS OFF))
--Testcase 79:
EXPLAIN (COSTS OFF)
SELECT value1, asin(value5), pi(), 4.1 FROM numeric_tbl;
                                             QUERY PLAN                                             
----------------------------------------------------------------------------------------------------
 Foreign Scan on numeric_tbl
   Oracle query: SELECT /*ef4c870940eb2323da34275306f5b4ba*/ "VALUE1", "VALUE5" FROM  "NUMERIC_TBL"
(2 rows)

-- select asin with non pushdown func and explicit constant (result)
--Testcase 80:
SELECT value1, asin(value5), pi(), 4.1 FROM numeric_tbl;
 value1 |        asin         |        pi         | ?column? 
--------+---------------------+-------------------+----------
    0.1 |  0.1001674211615598 | 3.141592653589793 |      4.1
    0.2 |  0.2013579207903308 | 3.141592653589793 |      4.1
    0.3 |  0.3046926540153975 | 3.141592653589793 |      4.1
    1.1 | 0.41151684606748806 | 3.141592653589793 |      4.1
    2.2 |  0.5235987755982989 | 3.141592653589793 |      4.1
    3.3 |  0.6435011087932844 | 3.141592653589793 |      4.1
(6 rows)

-- select asin with order by (EXPLAIN (COSTS OFF))
--Testcase 81:
EXPLAIN (COSTS OFF)
SELECT value1, asin(1-value5) FROM numeric_tbl ORDER BY asin(1-value5);
                                                                   QUERY PLAN                                                                    
-------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on numeric_tbl
   Oracle query: SELECT /*3dfd1d8d4c775ca5686fdd47421d8adf*/ "VALUE1", "VALUE5" FROM  "NUMERIC_TBL" ORDER BY asin((1 - "VALUE5")) ASC NULLS LAST
(2 rows)

-- select asin with order by (result)
--Testcase 82:
SELECT value1, asin(1-value5) FROM numeric_tbl ORDER BY asin(1-value5);
 value1 |        asin         
--------+---------------------
    3.3 | 0.41151684606748806
    2.2 |  0.5235987755982989
    1.1 |  0.6435011087932844
    0.3 |   0.775397496610753
    0.2 |  0.9272952180016123
    0.1 |  1.1197695149986342
(6 rows)

-- select asin with order by index (result)
--Testcase 83:
SELECT value1, asin(1-value5) FROM numeric_tbl ORDER BY 2,1;
 value1 |        asin         
--------+---------------------
    3.3 | 0.41151684606748806
    2.2 |  0.5235987755982989
    1.1 |  0.6435011087932844
    0.3 |   0.775397496610753
    0.2 |  0.9272952180016123
    0.1 |  1.1197695149986342
(6 rows)

-- select asin with order by index (result)
--Testcase 84:
SELECT value1, asin(1-value5) FROM numeric_tbl ORDER BY 1,2;
 value1 |        asin         
--------+---------------------
    0.1 |  1.1197695149986342
    0.2 |  0.9272952180016123
    0.3 |   0.775397496610753
    1.1 |  0.6435011087932844
    2.2 |  0.5235987755982989
    3.3 | 0.41151684606748806
(6 rows)

-- select asin with group by (EXPLAIN (COSTS OFF))
--Testcase 85:
EXPLAIN (COSTS OFF)
SELECT value1, asin(1-value5) FROM numeric_tbl GROUP BY value1, asin(1-value5);
                                                                        QUERY PLAN                                                                        
----------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan
   Oracle query: SELECT /*9af2faffaa559e32f10ef690be49b2a4*/ "VALUE1", asin((1 - "VALUE5")) FROM  "NUMERIC_TBL" GROUP BY "VALUE1", (asin((1 - "VALUE5")))
(2 rows)

-- select asin with group by (result)
--Testcase 86:
SELECT value1, asin(1-value5) FROM numeric_tbl GROUP BY value1, asin(1-value5);
 value1 |        asin        
--------+--------------------
    0.1 | 1.1197695149986342
    0.2 | 0.9272952180016122
    0.3 | 0.7753974966107531
    1.1 | 0.6435011087932844
    2.2 | 0.5235987755982989
    3.3 |  0.411516846067488
(6 rows)

-- select asin with group by index (result)
--Testcase 87:
SELECT value1, asin(1-value5) FROM numeric_tbl GROUP BY 2,1;
 value1 |        asin        
--------+--------------------
    0.1 | 1.1197695149986342
    0.2 | 0.9272952180016122
    0.3 | 0.7753974966107531
    1.1 | 0.6435011087932844
    2.2 | 0.5235987755982989
    3.3 |  0.411516846067488
(6 rows)

-- select asin with group by index (result)
--Testcase 88:
SELECT value1, asin(1-value5) FROM numeric_tbl GROUP BY 1,2;
 value1 |        asin        
--------+--------------------
    0.1 | 1.1197695149986342
    0.2 | 0.9272952180016122
    0.3 | 0.7753974966107531
    1.1 | 0.6435011087932844
    2.2 | 0.5235987755982989
    3.3 |  0.411516846067488
(6 rows)

-- select asin with group by having (EXPLAIN (COSTS OFF))
--Testcase 89:
EXPLAIN (COSTS OFF)
SELECT value1, asin(1-value5) FROM numeric_tbl GROUP BY value1, asin(1-value5) HAVING avg(value1) > 0;
                                                                                     QUERY PLAN                                                                                      
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan
   Oracle query: SELECT /*fc32596d4d819e8c0b45201b420fd1a5*/ "VALUE1", asin((1 - "VALUE5")) FROM  "NUMERIC_TBL" GROUP BY "VALUE1", (asin((1 - "VALUE5"))) HAVING (avg("VALUE1") > 0)
(2 rows)

-- select asin with group by having (result)
--Testcase 90:
SELECT value1, asin(1-value5) FROM numeric_tbl GROUP BY value1, asin(1-value5) HAVING avg(value1) > 0;
 value1 |        asin        
--------+--------------------
    0.1 | 1.1197695149986342
    0.2 | 0.9272952180016122
    0.3 | 0.7753974966107531
    1.1 | 0.6435011087932844
    2.2 | 0.5235987755982989
    3.3 |  0.411516846067488
(6 rows)

-- select asin with group by index having (result)
--Testcase 91:
SELECT value1, asin(1-value5) FROM numeric_tbl GROUP BY 2,1 HAVING asin(1-value5) > 0;
 value1 |        asin        
--------+--------------------
    0.1 | 1.1197695149986342
    0.2 | 0.9272952180016122
    0.3 | 0.7753974966107531
    1.1 | 0.6435011087932844
    2.2 | 0.5235987755982989
    3.3 |  0.411516846067488
(6 rows)

-- select asin with group by index having (result)
--Testcase 92:
SELECT value1, asin(1-value5) FROM numeric_tbl GROUP BY 1,2 HAVING value1 > 1;
 value1 |        asin        
--------+--------------------
    1.1 | 0.6435011087932844
    2.2 | 0.5235987755982989
    3.3 |  0.411516846067488
(3 rows)

-- select asin and as
--Testcase 93:
SELECT value1, asin(value5) as asin1 FROM numeric_tbl;
 value1 |        asin1        
--------+---------------------
    0.1 |  0.1001674211615598
    0.2 |  0.2013579207903308
    0.3 |  0.3046926540153975
    1.1 | 0.41151684606748806
    2.2 |  0.5235987755982989
    3.3 |  0.6435011087932844
(6 rows)

-- ===============================================================================
-- test atan()
-- ===============================================================================
-- select atan (builtin function, EXPLAIN (COSTS OFF))
--Testcase 94:
EXPLAIN (COSTS OFF)
SELECT atan(value1), atan(value2), atan(value3), atan(value4), atan(0.5) FROM numeric_tbl;
                                                       QUERY PLAN                                                       
------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on numeric_tbl
   Oracle query: SELECT /*3a3e9ce1642025dfd6451e15cf1fadd9*/ "VALUE1", "VALUE2", "VALUE3", "VALUE4" FROM  "NUMERIC_TBL"
(2 rows)

-- select atan (builtin function, result)
--Testcase 95:
SELECT atan(value1), atan(value2), atan(value3), atan(value4), atan(0.5) FROM numeric_tbl;
        atan         |        atan        |         atan         |        atan         |        atan        
---------------------+--------------------+----------------------+---------------------+--------------------
 0.09966865249116204 | 1.5607966601082315 | -0.09966865249116204 | -1.5607966601082315 | 0.4636476090008061
 0.19739555984988078 | 1.5607966601082315 | -0.19739555984988078 | -1.5607966601082315 | 0.4636476090008061
  0.2914567944778671 | 1.5607966601082315 |  -0.2914567944778671 | -1.5607966601082315 | 0.4636476090008061
  0.8329812666744317 | 1.5657963684609384 |  -0.8329812666744317 | -1.5657963684609384 | 0.4636476090008061
  1.1441688336680205 | 1.5657963684609384 |  -1.1441688336680205 | -1.5657963684609384 | 0.4636476090008061
  1.2765617616837088 | 1.5657963684609384 |  -1.2765617616837088 | -1.5657963684609384 | 0.4636476090008061
(6 rows)

-- select atan (builtin function, not pushdown constraints, EXPLAIN (COSTS OFF))
--Testcase 96:
EXPLAIN (COSTS OFF)
SELECT atan(value1), atan(value2), atan(value3), atan(value4), atan(0.5) FROM numeric_tbl WHERE to_hex(value2) = '64';
                                                       QUERY PLAN                                                       
------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on numeric_tbl
   Filter: (to_hex(value2) = '64'::text)
   Oracle query: SELECT /*3a3e9ce1642025dfd6451e15cf1fadd9*/ "VALUE1", "VALUE2", "VALUE3", "VALUE4" FROM  "NUMERIC_TBL"
(3 rows)

-- select atan (builtin function, not pushdown constraints, result)
--Testcase 97:
SELECT atan(value1), atan(value2), atan(value3), atan(value4), atan(0.5) FROM numeric_tbl WHERE to_hex(value2) = '64';
        atan         |        atan        |         atan         |        atan         |        atan        
---------------------+--------------------+----------------------+---------------------+--------------------
 0.09966865249116204 | 1.5607966601082315 | -0.09966865249116204 | -1.5607966601082315 | 0.4636476090008061
 0.19739555984988078 | 1.5607966601082315 | -0.19739555984988078 | -1.5607966601082315 | 0.4636476090008061
  0.2914567944778671 | 1.5607966601082315 |  -0.2914567944778671 | -1.5607966601082315 | 0.4636476090008061
(3 rows)

-- select atan (builtin function, pushdown constraints, EXPLAIN (COSTS OFF))
--Testcase 98:
EXPLAIN (COSTS OFF)
SELECT atan(value1), atan(value2), atan(value3), atan(value4), atan(0.5) FROM numeric_tbl WHERE value2 != 200;
                                                                   QUERY PLAN                                                                   
------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on numeric_tbl
   Oracle query: SELECT /*ee255a287dc590cc2e754740ed3cd0e9*/ "VALUE1", "VALUE2", "VALUE3", "VALUE4" FROM  "NUMERIC_TBL" WHERE ("VALUE2" <> 200)
(2 rows)

-- select atan (builtin function, pushdown constraints, result)
--Testcase 99:
SELECT atan(value1), atan(value2), atan(value3), atan(value4), atan(0.5) FROM numeric_tbl WHERE value2 != 200;
        atan         |        atan        |         atan         |        atan         |        atan        
---------------------+--------------------+----------------------+---------------------+--------------------
 0.09966865249116204 | 1.5607966601082315 | -0.09966865249116204 | -1.5607966601082315 | 0.4636476090008061
 0.19739555984988078 | 1.5607966601082315 | -0.19739555984988078 | -1.5607966601082315 | 0.4636476090008061
  0.2914567944778671 | 1.5607966601082315 |  -0.2914567944778671 | -1.5607966601082315 | 0.4636476090008061
(3 rows)

-- select atan (builtin function, atan in constraints, EXPLAIN (COSTS OFF))
--Testcase 100:
EXPLAIN (COSTS OFF)
SELECT atan(value1), atan(value2), atan(value3), atan(value4), atan(0.5) FROM numeric_tbl WHERE atan(value1) != 1;
                                                                     QUERY PLAN                                                                     
----------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on numeric_tbl
   Oracle query: SELECT /*41b47bd508ec2828dd5d38b03e809b9a*/ "VALUE1", "VALUE2", "VALUE3", "VALUE4" FROM  "NUMERIC_TBL" WHERE (atan("VALUE1") <> 1)
(2 rows)

-- select atan (builtin function, atan in constraints, result)
--Testcase 101:
SELECT atan(value1), atan(value2), atan(value3), atan(value4), atan(0.5) FROM numeric_tbl WHERE atan(value1) != 1;
        atan         |        atan        |         atan         |        atan         |        atan        
---------------------+--------------------+----------------------+---------------------+--------------------
 0.09966865249116204 | 1.5607966601082315 | -0.09966865249116204 | -1.5607966601082315 | 0.4636476090008061
 0.19739555984988078 | 1.5607966601082315 | -0.19739555984988078 | -1.5607966601082315 | 0.4636476090008061
  0.2914567944778671 | 1.5607966601082315 |  -0.2914567944778671 | -1.5607966601082315 | 0.4636476090008061
  0.8329812666744317 | 1.5657963684609384 |  -0.8329812666744317 | -1.5657963684609384 | 0.4636476090008061
  1.1441688336680205 | 1.5657963684609384 |  -1.1441688336680205 | -1.5657963684609384 | 0.4636476090008061
  1.2765617616837088 | 1.5657963684609384 |  -1.2765617616837088 | -1.5657963684609384 | 0.4636476090008061
(6 rows)

-- select atan (builtin function, atan in constraints, EXPLAIN (COSTS OFF))
--Testcase 102:
EXPLAIN (COSTS OFF)
SELECT atan(value1), atan(value2), atan(value3), atan(value4), atan(0.5) FROM numeric_tbl WHERE atan(0.5) > value1;
                                                                          QUERY PLAN                                                                          
--------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on numeric_tbl
   Oracle query: SELECT /*de4285f83e8476bd0a862b6a140103c1*/ "VALUE1", "VALUE2", "VALUE3", "VALUE4" FROM  "NUMERIC_TBL" WHERE (0.4636476090008061 > "VALUE1")
(2 rows)

-- select atan (builtin function, atan in constraints, result)
--Testcase 103:
SELECT atan(value1), atan(value2), atan(value3), atan(value4), atan(0.5) FROM numeric_tbl WHERE atan(0.5) > value1;
        atan         |        atan        |         atan         |        atan         |        atan        
---------------------+--------------------+----------------------+---------------------+--------------------
 0.09966865249116204 | 1.5607966601082315 | -0.09966865249116204 | -1.5607966601082315 | 0.4636476090008061
 0.19739555984988078 | 1.5607966601082315 | -0.19739555984988078 | -1.5607966601082315 | 0.4636476090008061
  0.2914567944778671 | 1.5607966601082315 |  -0.2914567944778671 | -1.5607966601082315 | 0.4636476090008061
(3 rows)

-- select atan as nest function with agg (pushdown, EXPLAIN (COSTS OFF))
--Testcase 104:
EXPLAIN (COSTS OFF)
SELECT sum(value3),atan(sum(value3)) FROM numeric_tbl;
                                                     QUERY PLAN                                                     
--------------------------------------------------------------------------------------------------------------------
 Foreign Scan
   Oracle query: SELECT /*8b6610a1951e1ba085e15d3e045e5c2b*/ sum("VALUE3"), atan(sum("VALUE3")) FROM  "NUMERIC_TBL"
(2 rows)

-- select atan as nest function with agg (pushdown, result)
--Testcase 105:
SELECT sum(value3),atan(sum(value3)) FROM numeric_tbl;
 sum  |        atan         
------+---------------------
 -7.2 | -1.4327903031373772
(1 row)

-- select atan as nest with log2 (pushdown, EXPLAIN (COSTS OFF))
--Testcase 106:
EXPLAIN (COSTS OFF)
SELECT atan(log(2, value2)) FROM numeric_tbl;
                                        QUERY PLAN                                        
------------------------------------------------------------------------------------------
 Foreign Scan on numeric_tbl
   Oracle query: SELECT /*942bf85feb96f605a79f40dffa8f6645*/ "VALUE2" FROM  "NUMERIC_TBL"
(2 rows)

-- select atan as nest with log2 (pushdown, result)
--Testcase 107:
SELECT atan(log(2, value2)) FROM numeric_tbl;
        atan        
--------------------
 1.4214027519155643
 1.4214027519155643
 1.4214027519155643
 1.4407110821406528
 1.4407110821406528
 1.4407110821406528
(6 rows)

-- select atan with non pushdown func and explicit constant (EXPLAIN (COSTS OFF))
--Testcase 108:
EXPLAIN (COSTS OFF)
SELECT atan(value3), pi(), 4.1 FROM numeric_tbl;
                                        QUERY PLAN                                        
------------------------------------------------------------------------------------------
 Foreign Scan on numeric_tbl
   Oracle query: SELECT /*b3d9f3348edc9fa53b73cdc5d271b426*/ "VALUE3" FROM  "NUMERIC_TBL"
(2 rows)

-- select atan with non pushdown func and explicit constant (result)
--Testcase 109:
SELECT atan(value3), pi(), 4.1 FROM numeric_tbl;
         atan         |        pi         | ?column? 
----------------------+-------------------+----------
 -0.09966865249116204 | 3.141592653589793 |      4.1
 -0.19739555984988078 | 3.141592653589793 |      4.1
  -0.2914567944778671 | 3.141592653589793 |      4.1
  -0.8329812666744317 | 3.141592653589793 |      4.1
  -1.1441688336680205 | 3.141592653589793 |      4.1
  -1.2765617616837088 | 3.141592653589793 |      4.1
(6 rows)

-- select atan with order by (EXPLAIN (COSTS OFF))
--Testcase 110:
EXPLAIN (COSTS OFF)
SELECT value1, atan(1-value3) FROM numeric_tbl ORDER BY atan(1-value3);
                                                                   QUERY PLAN                                                                    
-------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on numeric_tbl
   Oracle query: SELECT /*72df3fd99af2ad111e20ddfcc7dd0390*/ "VALUE1", "VALUE3" FROM  "NUMERIC_TBL" ORDER BY atan((1 - "VALUE3")) ASC NULLS LAST
(2 rows)

-- select atan with order by (result)
--Testcase 111:
SELECT value1, atan(1-value3) FROM numeric_tbl ORDER BY atan(1-value3);
 value1 |        atan        
--------+--------------------
    0.1 | 0.8329812666744317
    0.2 | 0.8760580505981934
    0.3 | 0.9151007005533605
    1.1 | 1.1263771168937977
    2.2 | 1.2679114584199251
    3.3 | 1.3422996875030344
(6 rows)

-- select atan with order by index (result)
--Testcase 112:
SELECT value1, atan(1-value3) FROM numeric_tbl ORDER BY 2,1;
 value1 |        atan        
--------+--------------------
    0.1 | 0.8329812666744317
    0.2 | 0.8760580505981934
    0.3 | 0.9151007005533605
    1.1 | 1.1263771168937977
    2.2 | 1.2679114584199251
    3.3 | 1.3422996875030344
(6 rows)

-- select atan with order by index (result)
--Testcase 113:
SELECT value1, atan(1-value3) FROM numeric_tbl ORDER BY 1,2;
 value1 |        atan        
--------+--------------------
    0.1 | 0.8329812666744317
    0.2 | 0.8760580505981934
    0.3 | 0.9151007005533605
    1.1 | 1.1263771168937977
    2.2 | 1.2679114584199251
    3.3 | 1.3422996875030344
(6 rows)

-- select atan with group by (EXPLAIN (COSTS OFF))
--Testcase 114:
EXPLAIN (COSTS OFF)
SELECT count(value1), atan(1-value3) FROM numeric_tbl GROUP BY atan(1-value3);
                                                                      QUERY PLAN                                                                       
-------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan
   Oracle query: SELECT /*cc41a89ab7b3007e2fdbfbaefb673c2a*/ count("VALUE1"), atan((1 - "VALUE3")) FROM  "NUMERIC_TBL" GROUP BY (atan((1 - "VALUE3")))
(2 rows)

-- select atan with group by (result)
--Testcase 115:
SELECT count(value1), atan(1-value3) FROM numeric_tbl GROUP BY atan(1-value3);
 count |        atan        
-------+--------------------
     1 | 0.8329812666744317
     1 | 0.8760580505981934
     1 | 0.9151007005533605
     1 | 1.1263771168937977
     1 | 1.2679114584199251
     1 | 1.3422996875030344
(6 rows)

-- select atan with group by index (result)
--Testcase 116:
SELECT value1, atan(1-value3) FROM numeric_tbl GROUP BY 2,1;
 value1 |        atan        
--------+--------------------
    0.1 | 0.8329812666744317
    0.2 | 0.8760580505981934
    0.3 | 0.9151007005533605
    1.1 | 1.1263771168937977
    2.2 | 1.2679114584199251
    3.3 | 1.3422996875030344
(6 rows)

-- select atan with group by index (result)
--Testcase 117:
SELECT value1, atan(1-value3) FROM numeric_tbl GROUP BY 1,2;
 value1 |        atan        
--------+--------------------
    0.1 | 0.8329812666744317
    0.2 | 0.8760580505981934
    0.3 | 0.9151007005533605
    1.1 | 1.1263771168937977
    2.2 | 1.2679114584199251
    3.3 | 1.3422996875030344
(6 rows)

-- select atan with group by having (EXPLAIN (COSTS OFF))
--Testcase 118:
EXPLAIN (COSTS OFF)
SELECT count(value1), atan(1-value3) FROM numeric_tbl GROUP BY atan(1-value3) HAVING atan(avg(value1)) > 0;
                                                                                       QUERY PLAN                                                                                       
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan
   Oracle query: SELECT /*448ee6acc8048546fea2599bceacf68f*/ count("VALUE1"), atan((1 - "VALUE3")) FROM  "NUMERIC_TBL" GROUP BY (atan((1 - "VALUE3"))) HAVING (atan(avg("VALUE1")) > 0)
(2 rows)

-- select atan with group by having (result)
--Testcase 119:
SELECT count(value1), atan(1-value3) FROM numeric_tbl GROUP BY atan(1-value3) HAVING atan(avg(value1)) > 0;
 count |        atan        
-------+--------------------
     1 | 0.8329812666744317
     1 | 0.8760580505981934
     1 | 0.9151007005533605
     1 | 1.1263771168937977
     1 | 1.2679114584199251
     1 | 1.3422996875030344
(6 rows)

-- select atan with group by index having (result)
--Testcase 120:
SELECT value1, atan(1-value3) FROM numeric_tbl GROUP BY 2,1 HAVING atan(1-value3) > 0;
 value1 |        atan        
--------+--------------------
    0.1 | 0.8329812666744317
    0.2 | 0.8760580505981934
    0.3 | 0.9151007005533605
    1.1 | 1.1263771168937977
    2.2 | 1.2679114584199251
    3.3 | 1.3422996875030344
(6 rows)

-- select atan with group by index having (result)
--Testcase 121:
SELECT value1, atan(1-value3) FROM numeric_tbl GROUP BY 1,2 HAVING value1 > 1;
 value1 |        atan        
--------+--------------------
    1.1 | 1.1263771168937977
    2.2 | 1.2679114584199251
    3.3 | 1.3422996875030344
(3 rows)

-- select atan and as
--Testcase 122:
SELECT atan(value3) as atan1 FROM numeric_tbl;
        atan1         
----------------------
 -0.09966865249116204
 -0.19739555984988078
  -0.2914567944778671
  -0.8329812666744317
  -1.1441688336680205
  -1.2765617616837088
(6 rows)

-- ===============================================================================
-- test atan2()
-- ===============================================================================
-- select atan2 (builtin function, EXPLAIN (COSTS OFF))
--Testcase 123:
EXPLAIN (COSTS OFF)
SELECT atan2(value1, 2), atan2(value2, 2), atan2(value3, 2), atan2(value4, 2), atan2(5, 2) FROM numeric_tbl;
                                                       QUERY PLAN                                                       
------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on numeric_tbl
   Oracle query: SELECT /*3a3e9ce1642025dfd6451e15cf1fadd9*/ "VALUE1", "VALUE2", "VALUE3", "VALUE4" FROM  "NUMERIC_TBL"
(2 rows)

-- select atan2 (builtin function, result)
--Testcase 124:
SELECT atan2(value1, 2), atan2(value2, 2), atan2(value3, 2), atan2(value4, 2), atan2(5, 2) FROM numeric_tbl;
        atan2         |       atan2        |         atan2         |        atan2        |       atan2        
----------------------+--------------------+-----------------------+---------------------+--------------------
 0.049958395721942765 |  1.550798992821746 | -0.049958395721942765 |  -1.550798992821746 | 1.1902899496825317
  0.09966865249116204 |  1.550798992821746 |  -0.09966865249116204 |  -1.550798992821746 | 1.1902899496825317
  0.14888994760949725 |  1.550798992821746 |  -0.14888994760949725 |  -1.550798992821746 | 1.1902899496825317
   0.5028432109278609 | 1.5607966601082315 |   -0.5028432109278609 | -1.5607966601082315 | 1.1902899496825317
   0.8329812666744317 | 1.5607966601082315 |   -0.8329812666744317 | -1.5607966601082315 | 1.1902899496825317
    1.025932411343353 | 1.5607966601082315 |    -1.025932411343353 | -1.5607966601082315 | 1.1902899496825317
(6 rows)

-- select atan2 (builtin function, not pushdown constraints, EXPLAIN (COSTS OFF))
--Testcase 125:
EXPLAIN (COSTS OFF)
SELECT atan2(value1, 2), atan2(value2, 2), atan2(value3, 2), atan2(value4, 2), atan2(5, 2) FROM numeric_tbl WHERE to_hex(value2) = '64';
                                                       QUERY PLAN                                                       
------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on numeric_tbl
   Filter: (to_hex(value2) = '64'::text)
   Oracle query: SELECT /*3a3e9ce1642025dfd6451e15cf1fadd9*/ "VALUE1", "VALUE2", "VALUE3", "VALUE4" FROM  "NUMERIC_TBL"
(3 rows)

-- select atan2 (builtin function, not pushdown constraints, result)
--Testcase 126:
SELECT atan2(value1, 2), atan2(value2, 2), atan2(value3, 2), atan2(value4, 2), atan2(5, 2) FROM numeric_tbl WHERE to_hex(value2) = '64';
        atan2         |       atan2       |         atan2         |       atan2        |       atan2        
----------------------+-------------------+-----------------------+--------------------+--------------------
 0.049958395721942765 | 1.550798992821746 | -0.049958395721942765 | -1.550798992821746 | 1.1902899496825317
  0.09966865249116204 | 1.550798992821746 |  -0.09966865249116204 | -1.550798992821746 | 1.1902899496825317
  0.14888994760949725 | 1.550798992821746 |  -0.14888994760949725 | -1.550798992821746 | 1.1902899496825317
(3 rows)

-- select atan2 (builtin function, pushdown constraints, EXPLAIN (COSTS OFF))
--Testcase 127:
EXPLAIN (COSTS OFF)
SELECT atan2(value1, 2), atan2(value2, 2), atan2(value3, 2), atan2(value4, 2), atan2(5, 2) FROM numeric_tbl WHERE value2 != 200;
                                                                   QUERY PLAN                                                                   
------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on numeric_tbl
   Oracle query: SELECT /*ee255a287dc590cc2e754740ed3cd0e9*/ "VALUE1", "VALUE2", "VALUE3", "VALUE4" FROM  "NUMERIC_TBL" WHERE ("VALUE2" <> 200)
(2 rows)

-- select atan2 (builtin function, pushdown constraints, result)
--Testcase 128:
SELECT atan2(value1, 2), atan2(value2, 2), atan2(value3, 2), atan2(value4, 2), atan2(5, 2) FROM numeric_tbl WHERE value2 != 200;
        atan2         |       atan2       |         atan2         |       atan2        |       atan2        
----------------------+-------------------+-----------------------+--------------------+--------------------
 0.049958395721942765 | 1.550798992821746 | -0.049958395721942765 | -1.550798992821746 | 1.1902899496825317
  0.09966865249116204 | 1.550798992821746 |  -0.09966865249116204 | -1.550798992821746 | 1.1902899496825317
  0.14888994760949725 | 1.550798992821746 |  -0.14888994760949725 | -1.550798992821746 | 1.1902899496825317
(3 rows)

-- select atan2 (builtin function, atan2 in constraints, EXPLAIN (COSTS OFF))
--Testcase 129:
EXPLAIN (COSTS OFF)
SELECT atan2(value1, 2), atan2(value2, 2), atan2(value3, 2), atan2(value4, 2), atan2(5, 2) FROM numeric_tbl WHERE atan2(value1, 2) != 1;
                                                                       QUERY PLAN                                                                       
--------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on numeric_tbl
   Oracle query: SELECT /*9d9444e93fa0d0042d9a644072086338*/ "VALUE1", "VALUE2", "VALUE3", "VALUE4" FROM  "NUMERIC_TBL" WHERE (atan2("VALUE1", 2) <> 1)
(2 rows)

-- select atan2 (builtin function, atan2 in constraints, result)
--Testcase 130:
SELECT atan2(value1, 2), atan2(value2, 2), atan2(value3, 2), atan2(value4, 2), atan2(5, 2) FROM numeric_tbl WHERE atan2(value1, 2) != 1;
        atan2         |       atan2        |         atan2         |        atan2        |       atan2        
----------------------+--------------------+-----------------------+---------------------+--------------------
 0.049958395721942765 |  1.550798992821746 | -0.049958395721942765 |  -1.550798992821746 | 1.1902899496825317
  0.09966865249116204 |  1.550798992821746 |  -0.09966865249116204 |  -1.550798992821746 | 1.1902899496825317
  0.14888994760949725 |  1.550798992821746 |  -0.14888994760949725 |  -1.550798992821746 | 1.1902899496825317
   0.5028432109278609 | 1.5607966601082315 |   -0.5028432109278609 | -1.5607966601082315 | 1.1902899496825317
   0.8329812666744317 | 1.5607966601082315 |   -0.8329812666744317 | -1.5607966601082315 | 1.1902899496825317
    1.025932411343353 | 1.5607966601082315 |    -1.025932411343353 | -1.5607966601082315 | 1.1902899496825317
(6 rows)

-- select atan2 (builtin function, atan2 in constraints, EXPLAIN (COSTS OFF))
--Testcase 131:
EXPLAIN (COSTS OFF)
SELECT atan2(value1, 2), atan2(value2, 2), atan2(value3, 2), atan2(value4, 2), atan2(5, 2) FROM numeric_tbl WHERE atan2(5, 2) > value1;
                                                                          QUERY PLAN                                                                          
--------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on numeric_tbl
   Oracle query: SELECT /*551d109fd0ec57629e35b558e1b864d9*/ "VALUE1", "VALUE2", "VALUE3", "VALUE4" FROM  "NUMERIC_TBL" WHERE (1.1902899496825317 > "VALUE1")
(2 rows)

-- select atan2 (builtin function, atan2 in constraints, result)
--Testcase 132:
SELECT atan2(value1, 2), atan2(value2, 2), atan2(value3, 2), atan2(value4, 2), atan2(5, 2) FROM numeric_tbl WHERE atan2(5, 2) > value1;
        atan2         |       atan2        |         atan2         |        atan2        |       atan2        
----------------------+--------------------+-----------------------+---------------------+--------------------
 0.049958395721942765 |  1.550798992821746 | -0.049958395721942765 |  -1.550798992821746 | 1.1902899496825317
  0.09966865249116204 |  1.550798992821746 |  -0.09966865249116204 |  -1.550798992821746 | 1.1902899496825317
  0.14888994760949725 |  1.550798992821746 |  -0.14888994760949725 |  -1.550798992821746 | 1.1902899496825317
   0.5028432109278609 | 1.5607966601082315 |   -0.5028432109278609 | -1.5607966601082315 | 1.1902899496825317
(4 rows)

-- select atan2 as nest function with agg (pushdown, EXPLAIN (COSTS OFF))
--Testcase 133:
EXPLAIN (COSTS OFF)
SELECT sum(value3),atan2(sum(value3), 2) FROM numeric_tbl;
                                                       QUERY PLAN                                                       
------------------------------------------------------------------------------------------------------------------------
 Foreign Scan
   Oracle query: SELECT /*40a4a255ffcdefac907995d7beea7dc1*/ sum("VALUE3"), atan2(sum("VALUE3"), 2) FROM  "NUMERIC_TBL"
(2 rows)

-- select atan2 as nest function with agg (pushdown, result)
--Testcase 134:
SELECT sum(value3),atan2(sum(value3), 2) FROM numeric_tbl;
 sum  |       atan2        
------+--------------------
 -7.2 | -1.299849476456476
(1 row)

-- select atan2 as nest with log2 (pushdown, EXPLAIN (COSTS OFF))
--Testcase 135:
EXPLAIN (COSTS OFF)
SELECT atan2(log(2, value2), 2) FROM numeric_tbl;
                                        QUERY PLAN                                        
------------------------------------------------------------------------------------------
 Foreign Scan on numeric_tbl
   Oracle query: SELECT /*942bf85feb96f605a79f40dffa8f6645*/ "VALUE2" FROM  "NUMERIC_TBL"
(2 rows)

-- select atan2 as nest with log2 (pushdown, result)
--Testcase 136:
SELECT atan2(log(2, value2), 2) FROM numeric_tbl;
       atan2        
--------------------
  1.278394850250925
  1.278394850250925
  1.278394850250925
 1.3148852008029883
 1.3148852008029883
 1.3148852008029883
(6 rows)

-- select atan2 with non pushdown func and atan2licit constant (EXPLAIN (COSTS OFF))
--Testcase 137:
EXPLAIN (COSTS OFF)
SELECT atan2(value3, 2), pi(), 4.1 FROM numeric_tbl;
                                        QUERY PLAN                                        
------------------------------------------------------------------------------------------
 Foreign Scan on numeric_tbl
   Oracle query: SELECT /*b3d9f3348edc9fa53b73cdc5d271b426*/ "VALUE3" FROM  "NUMERIC_TBL"
(2 rows)

-- select atan2 with non pushdown func and atan2licit constant (result)
--Testcase 138:
SELECT atan2(value3, 2), pi(), 4.1 FROM numeric_tbl;
         atan2         |        pi         | ?column? 
-----------------------+-------------------+----------
 -0.049958395721942765 | 3.141592653589793 |      4.1
  -0.09966865249116204 | 3.141592653589793 |      4.1
  -0.14888994760949725 | 3.141592653589793 |      4.1
   -0.5028432109278609 | 3.141592653589793 |      4.1
   -0.8329812666744317 | 3.141592653589793 |      4.1
    -1.025932411343353 | 3.141592653589793 |      4.1
(6 rows)

-- select atan2 with order by (EXPLAIN (COSTS OFF))
--Testcase 139:
EXPLAIN (COSTS OFF)
SELECT value1, atan2(1-value3, 2) FROM numeric_tbl ORDER BY atan2(1-value3, 2);
                                                                     QUERY PLAN                                                                      
-----------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on numeric_tbl
   Oracle query: SELECT /*10091407fdc1e97898e6013e36ffda2c*/ "VALUE1", "VALUE3" FROM  "NUMERIC_TBL" ORDER BY atan2((1 - "VALUE3"), 2) ASC NULLS LAST
(2 rows)

-- select atan2 with order by (result)
--Testcase 140:
SELECT value1, atan2(1-value3, 2) FROM numeric_tbl ORDER BY atan2(1-value3, 2);
 value1 |       atan2        
--------+--------------------
    0.1 | 0.5028432109278609
    0.2 | 0.5404195002705842
    0.3 | 0.5763752205911837
    1.1 | 0.8097835725701669
    2.2 | 1.0121970114513341
    3.3 | 1.1354430516425942
(6 rows)

-- select atan2 with order by index (result)
--Testcase 141:
SELECT value1, atan2(1-value3, 2) FROM numeric_tbl ORDER BY 2,1;
 value1 |       atan2        
--------+--------------------
    0.1 | 0.5028432109278609
    0.2 | 0.5404195002705842
    0.3 | 0.5763752205911837
    1.1 | 0.8097835725701669
    2.2 | 1.0121970114513341
    3.3 | 1.1354430516425942
(6 rows)

-- select atan2 with order by index (result)
--Testcase 142:
SELECT value1, atan2(1-value3, 2) FROM numeric_tbl ORDER BY 1,2;
 value1 |       atan2        
--------+--------------------
    0.1 | 0.5028432109278609
    0.2 | 0.5404195002705842
    0.3 | 0.5763752205911837
    1.1 | 0.8097835725701669
    2.2 | 1.0121970114513341
    3.3 | 1.1354430516425942
(6 rows)

-- select atan2 with group by (EXPLAIN (COSTS OFF))
--Testcase 143:
EXPLAIN (COSTS OFF)
SELECT count(value1), atan2(1-value3, 2) FROM numeric_tbl GROUP BY atan2(1-value3, 2);
                                                                          QUERY PLAN                                                                           
---------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan
   Oracle query: SELECT /*ecafe52661ecc42dfab303306291cd30*/ count("VALUE1"), atan2((1 - "VALUE3"), 2) FROM  "NUMERIC_TBL" GROUP BY (atan2((1 - "VALUE3"), 2))
(2 rows)

-- select atan2 with group by (result)
--Testcase 144:
SELECT count(value1), atan2(1-value3, 2) FROM numeric_tbl GROUP BY atan2(1-value3, 2);
 count |       atan2        
-------+--------------------
     1 | 0.5028432109278608
     1 | 0.5404195002705842
     1 | 0.5763752205911837
     1 | 0.8097835725701669
     1 | 1.0121970114513341
     1 | 1.1354430516425942
(6 rows)

-- select atan2 with group by index (result)
--Testcase 145:
SELECT value1, atan2(1-value3, 2) FROM numeric_tbl GROUP BY 2,1;
 value1 |       atan2        
--------+--------------------
    0.1 | 0.5028432109278608
    0.2 | 0.5404195002705842
    0.3 | 0.5763752205911837
    1.1 | 0.8097835725701669
    2.2 | 1.0121970114513341
    3.3 | 1.1354430516425942
(6 rows)

-- select atan2 with group by index (result)
--Testcase 146:
SELECT value1, atan2(1-value3, 2) FROM numeric_tbl GROUP BY 1,2;
 value1 |       atan2        
--------+--------------------
    0.1 | 0.5028432109278608
    0.2 | 0.5404195002705842
    0.3 | 0.5763752205911837
    1.1 | 0.8097835725701669
    2.2 | 1.0121970114513341
    3.3 | 1.1354430516425942
(6 rows)

-- select atan2 with group by having (EXPLAIN (COSTS OFF))
--Testcase 147:
EXPLAIN (COSTS OFF)
SELECT count(value1), atan2(1-value3, 2) FROM numeric_tbl GROUP BY atan2(1-value3, 2) HAVING atan2(avg(value1), 2) > 0;
                                                                                             QUERY PLAN                                                                                             
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan
   Oracle query: SELECT /*5d1c4a2e477acb58ade7e09501e97bfd*/ count("VALUE1"), atan2((1 - "VALUE3"), 2) FROM  "NUMERIC_TBL" GROUP BY (atan2((1 - "VALUE3"), 2)) HAVING (atan2(avg("VALUE1"), 2) > 0)
(2 rows)

-- select atan2 with group by having (result)
--Testcase 148:
SELECT count(value1), atan2(1-value3, 2) FROM numeric_tbl GROUP BY atan2(1-value3, 2) HAVING atan2(avg(value1), 2) > 0;
 count |       atan2        
-------+--------------------
     1 | 0.5028432109278608
     1 | 0.5404195002705842
     1 | 0.5763752205911837
     1 | 0.8097835725701669
     1 | 1.0121970114513341
     1 | 1.1354430516425942
(6 rows)

-- select atan2 with group by index having (result)
--Testcase 149:
SELECT value1, atan2(1-value3, 2) FROM numeric_tbl GROUP BY 2,1 HAVING atan2(1-value3, 2) > 0;
 value1 |       atan2        
--------+--------------------
    0.1 | 0.5028432109278608
    0.2 | 0.5404195002705842
    0.3 | 0.5763752205911837
    1.1 | 0.8097835725701669
    2.2 | 1.0121970114513341
    3.3 | 1.1354430516425942
(6 rows)

-- select atan2 with group by index having (result)
--Testcase 150:
SELECT value1, atan2(1-value3, 2) FROM numeric_tbl GROUP BY 1,2 HAVING value1 > 1;
 value1 |       atan2        
--------+--------------------
    1.1 | 0.8097835725701669
    2.2 | 1.0121970114513341
    3.3 | 1.1354430516425942
(3 rows)

-- select atan2 and as
--Testcase 151:
SELECT atan2(value3, 2) as atan21 FROM numeric_tbl;
        atan21         
-----------------------
 -0.049958395721942765
  -0.09966865249116204
  -0.14888994760949725
   -0.5028432109278609
   -0.8329812666744317
    -1.025932411343353
(6 rows)

-- ===============================================================================
-- test ceil()
-- ===============================================================================
-- select ceil (builtin function, EXPLAIN (COSTS OFF))
--Testcase 152:
EXPLAIN (COSTS OFF)
SELECT ceil(value1), ceil(value2), ceil(value3), ceil(value4), ceil(0.5) FROM numeric_tbl;
                                                       QUERY PLAN                                                       
------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on numeric_tbl
   Oracle query: SELECT /*3a3e9ce1642025dfd6451e15cf1fadd9*/ "VALUE1", "VALUE2", "VALUE3", "VALUE4" FROM  "NUMERIC_TBL"
(2 rows)

-- select ceil (builtin function, result)
--Testcase 153:
SELECT ceil(value1), ceil(value2), ceil(value3), ceil(value4), ceil(0.5) FROM numeric_tbl;
 ceil | ceil | ceil | ceil | ceil 
------+------+------+------+------
    1 |  100 |   -0 | -100 |    1
    1 |  100 |   -0 | -100 |    1
    1 |  100 |   -0 | -100 |    1
    2 |  200 |   -1 | -200 |    1
    3 |  200 |   -2 | -200 |    1
    4 |  200 |   -3 | -200 |    1
(6 rows)

-- select ceil (builtin function, not pushdown constraints, EXPLAIN (COSTS OFF))
--Testcase 154:
EXPLAIN (COSTS OFF)
SELECT ceil(value1), ceil(value2), ceil(value3), ceil(value4), ceil(0.5) FROM numeric_tbl WHERE to_hex(value2) = '64';
                                                       QUERY PLAN                                                       
------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on numeric_tbl
   Filter: (to_hex(value2) = '64'::text)
   Oracle query: SELECT /*3a3e9ce1642025dfd6451e15cf1fadd9*/ "VALUE1", "VALUE2", "VALUE3", "VALUE4" FROM  "NUMERIC_TBL"
(3 rows)

-- select ceil (builtin function, not pushdown constraints, result)
--Testcase 155:
SELECT ceil(value1), ceil(value2), ceil(value3), ceil(value4), ceil(0.5) FROM numeric_tbl WHERE to_hex(value2) = '64';
 ceil | ceil | ceil | ceil | ceil 
------+------+------+------+------
    1 |  100 |   -0 | -100 |    1
    1 |  100 |   -0 | -100 |    1
    1 |  100 |   -0 | -100 |    1
(3 rows)

-- select ceil (builtin function, pushdown constraints, EXPLAIN (COSTS OFF))
--Testcase 156:
EXPLAIN (COSTS OFF)
SELECT ceil(value1), ceil(value2), ceil(value3), ceil(value4), ceil(0.5) FROM numeric_tbl WHERE value2 != 200;
                                                                   QUERY PLAN                                                                   
------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on numeric_tbl
   Oracle query: SELECT /*ee255a287dc590cc2e754740ed3cd0e9*/ "VALUE1", "VALUE2", "VALUE3", "VALUE4" FROM  "NUMERIC_TBL" WHERE ("VALUE2" <> 200)
(2 rows)

-- select ceil (builtin function, pushdown constraints, result)
--Testcase 157:
SELECT ceil(value1), ceil(value2), ceil(value3), ceil(value4), ceil(0.5) FROM numeric_tbl WHERE value2 != 200;
 ceil | ceil | ceil | ceil | ceil 
------+------+------+------+------
    1 |  100 |   -0 | -100 |    1
    1 |  100 |   -0 | -100 |    1
    1 |  100 |   -0 | -100 |    1
(3 rows)

-- select ceil (builtin function, ceil in constraints, EXPLAIN (COSTS OFF))
--Testcase 158:
EXPLAIN (COSTS OFF)
SELECT ceil(value1), ceil(value2), ceil(value3), ceil(value4), ceil(0.5) FROM numeric_tbl WHERE ceil(value1) != 1;
                                                                     QUERY PLAN                                                                     
----------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on numeric_tbl
   Oracle query: SELECT /*4fe9249a2c985ac3cd609bbb46f55930*/ "VALUE1", "VALUE2", "VALUE3", "VALUE4" FROM  "NUMERIC_TBL" WHERE (ceil("VALUE1") <> 1)
(2 rows)

-- select ceil (builtin function, ceil in constraints, result)
--Testcase 159:
SELECT ceil(value1), ceil(value2), ceil(value3), ceil(value4), ceil(0.5) FROM numeric_tbl WHERE ceil(value1) != 1;
 ceil | ceil | ceil | ceil | ceil 
------+------+------+------+------
    2 |  200 |   -1 | -200 |    1
    3 |  200 |   -2 | -200 |    1
    4 |  200 |   -3 | -200 |    1
(3 rows)

-- select ceil (builtin function, ceil in constraints, EXPLAIN (COSTS OFF))
--Testcase 160:
EXPLAIN (COSTS OFF)
SELECT ceil(value1), ceil(value2), ceil(value3), ceil(value4), ceil(0.5) FROM numeric_tbl WHERE ceil(0.5) > value1;
                                                                 QUERY PLAN                                                                  
---------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on numeric_tbl
   Oracle query: SELECT /*886c3fbac6910e2aa6cbd3ac40b5674c*/ "VALUE1", "VALUE2", "VALUE3", "VALUE4" FROM  "NUMERIC_TBL" WHERE (1 > "VALUE1")
(2 rows)

-- select ceil (builtin function, ceil in constraints, result)
--Testcase 161:
SELECT ceil(value1), ceil(value2), ceil(value3), ceil(value4), ceil(0.5) FROM numeric_tbl WHERE ceil(0.5) > value1;
 ceil | ceil | ceil | ceil | ceil 
------+------+------+------+------
    1 |  100 |   -0 | -100 |    1
    1 |  100 |   -0 | -100 |    1
    1 |  100 |   -0 | -100 |    1
(3 rows)

-- select ceil as nest function with agg (pushdown, EXPLAIN (COSTS OFF))
--Testcase 162:
EXPLAIN (COSTS OFF)
SELECT sum(value3),ceil(sum(value3)) FROM numeric_tbl;
                                                     QUERY PLAN                                                     
--------------------------------------------------------------------------------------------------------------------
 Foreign Scan
   Oracle query: SELECT /*ee3226f2b5aefc346ef1b85ea501c1ce*/ sum("VALUE3"), ceil(sum("VALUE3")) FROM  "NUMERIC_TBL"
(2 rows)

-- select ceil as nest function with agg (pushdown, result)
--Testcase 163:
SELECT sum(value3),ceil(sum(value3)) FROM numeric_tbl;
 sum  | ceil 
------+------
 -7.2 |   -7
(1 row)

-- select ceil as nest with log2 (pushdown, EXPLAIN (COSTS OFF))
--Testcase 164:
EXPLAIN (COSTS OFF)
SELECT ceil(log(2, value2)) FROM numeric_tbl;
                                        QUERY PLAN                                        
------------------------------------------------------------------------------------------
 Foreign Scan on numeric_tbl
   Oracle query: SELECT /*942bf85feb96f605a79f40dffa8f6645*/ "VALUE2" FROM  "NUMERIC_TBL"
(2 rows)

-- select ceil as nest with log2 (pushdown, result)
--Testcase 165:
SELECT ceil(log(2, value2)) FROM numeric_tbl;
 ceil 
------
    7
    7
    7
    8
    8
    8
(6 rows)

-- select ceil with non pushdown func and explicit constant (EXPLAIN (COSTS OFF))
--Testcase 166:
EXPLAIN (COSTS OFF)
SELECT ceil(value3), pi(), 4.1 FROM numeric_tbl;
                                        QUERY PLAN                                        
------------------------------------------------------------------------------------------
 Foreign Scan on numeric_tbl
   Oracle query: SELECT /*b3d9f3348edc9fa53b73cdc5d271b426*/ "VALUE3" FROM  "NUMERIC_TBL"
(2 rows)

-- select ceil with non pushdown func and explicit constant (result)
--Testcase 167:
SELECT ceil(value3), pi(), 4.1 FROM numeric_tbl;
 ceil |        pi         | ?column? 
------+-------------------+----------
   -0 | 3.141592653589793 |      4.1
   -0 | 3.141592653589793 |      4.1
   -0 | 3.141592653589793 |      4.1
   -1 | 3.141592653589793 |      4.1
   -2 | 3.141592653589793 |      4.1
   -3 | 3.141592653589793 |      4.1
(6 rows)

-- select ceil with order by (EXPLAIN (COSTS OFF))
--Testcase 168:
EXPLAIN (COSTS OFF)
SELECT value1, ceil(1-value3) FROM numeric_tbl ORDER BY ceil(1-value3);
                                                                   QUERY PLAN                                                                    
-------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on numeric_tbl
   Oracle query: SELECT /*e3f6e47f8a1e3eb0f58c4a27c068f197*/ "VALUE1", "VALUE3" FROM  "NUMERIC_TBL" ORDER BY ceil((1 - "VALUE3")) ASC NULLS LAST
(2 rows)

-- select ceil with order by (result)
--Testcase 169:
SELECT value1, ceil(1-value3) FROM numeric_tbl ORDER BY ceil(1-value3);
 value1 | ceil 
--------+------
    0.1 |    2
    0.2 |    2
    0.3 |    2
    1.1 |    3
    2.2 |    4
    3.3 |    5
(6 rows)

-- select ceil with order by index (result)
--Testcase 170:
SELECT value1, ceil(1-value3) FROM numeric_tbl ORDER BY 2,1;
 value1 | ceil 
--------+------
    0.1 |    2
    0.2 |    2
    0.3 |    2
    1.1 |    3
    2.2 |    4
    3.3 |    5
(6 rows)

-- select ceil with order by index (result)
--Testcase 171:
SELECT value1, ceil(1-value3) FROM numeric_tbl ORDER BY 1,2;
 value1 | ceil 
--------+------
    0.1 |    2
    0.2 |    2
    0.3 |    2
    1.1 |    3
    2.2 |    4
    3.3 |    5
(6 rows)

-- select ceil with group by (EXPLAIN (COSTS OFF))
--Testcase 172:
EXPLAIN (COSTS OFF)
SELECT value1, ceil(1-value3) FROM numeric_tbl GROUP BY value1, ceil(1-value3);
                                                                        QUERY PLAN                                                                        
----------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan
   Oracle query: SELECT /*eb5b73636263b3509d8271cecdde5a45*/ "VALUE1", ceil((1 - "VALUE3")) FROM  "NUMERIC_TBL" GROUP BY "VALUE1", (ceil((1 - "VALUE3")))
(2 rows)

-- select ceil with group by (result)
--Testcase 173:
SELECT value1, ceil(1-value3) FROM numeric_tbl GROUP BY value1, ceil(1-value3);
 value1 | ceil 
--------+------
    0.1 |    2
    0.2 |    2
    0.3 |    2
    1.1 |    3
    2.2 |    4
    3.3 |    5
(6 rows)

-- select ceil with group by index (result)
--Testcase 174:
SELECT value1, ceil(1-value3) FROM numeric_tbl GROUP BY 2,1;
 value1 | ceil 
--------+------
    0.1 |    2
    0.2 |    2
    0.3 |    2
    1.1 |    3
    2.2 |    4
    3.3 |    5
(6 rows)

-- select ceil with group by index (result)
--Testcase 175:
SELECT value1, ceil(1-value3) FROM numeric_tbl GROUP BY 1,2;
 value1 | ceil 
--------+------
    0.1 |    2
    0.2 |    2
    0.3 |    2
    1.1 |    3
    2.2 |    4
    3.3 |    5
(6 rows)

-- select ceil with group by having (EXPLAIN (COSTS OFF))
--Testcase 176:
EXPLAIN (COSTS OFF)
SELECT value1, ceil(1-value3) FROM numeric_tbl GROUP BY value1, ceil(1-value3) HAVING ceil(avg(value1)) > 0;
                                                                                        QUERY PLAN                                                                                         
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan
   Oracle query: SELECT /*06402e470e273a15539c1a7c2e7d3ed4*/ "VALUE1", ceil((1 - "VALUE3")) FROM  "NUMERIC_TBL" GROUP BY "VALUE1", (ceil((1 - "VALUE3"))) HAVING (ceil(avg("VALUE1")) > 0)
(2 rows)

-- select ceil with group by having (result)
--Testcase 177:
SELECT value1, ceil(1-value3) FROM numeric_tbl GROUP BY value1, ceil(1-value3) HAVING ceil(avg(value1)) > 0;
 value1 | ceil 
--------+------
    0.1 |    2
    0.2 |    2
    0.3 |    2
    1.1 |    3
    2.2 |    4
    3.3 |    5
(6 rows)

-- select ceil with group by index having (result)
--Testcase 178:
SELECT value1, ceil(1-value3) FROM numeric_tbl GROUP BY 2,1 HAVING ceil(1-value3) > 0;
 value1 | ceil 
--------+------
    0.1 |    2
    0.2 |    2
    0.3 |    2
    1.1 |    3
    2.2 |    4
    3.3 |    5
(6 rows)

-- select ceil with group by index having (result)
--Testcase 179:
SELECT value1, ceil(1-value3) FROM numeric_tbl GROUP BY 1,2 HAVING value1 > 1;
 value1 | ceil 
--------+------
    1.1 |    3
    2.2 |    4
    3.3 |    5
(3 rows)

-- select ceil and as
--Testcase 180:
SELECT ceil(value3) as ceil1 FROM numeric_tbl;
 ceil1 
-------
    -0
    -0
    -0
    -1
    -2
    -3
(6 rows)

-- ===============================================================================
-- test ceiling()
-- ===============================================================================
-- select ceiling (builtin function, EXPLAIN (COSTS OFF))
--Testcase 181:
EXPLAIN (COSTS OFF)
SELECT ceiling(value1), ceiling(value2), ceiling(value3), ceiling(value4), ceiling(0.5) FROM numeric_tbl;
                                                       QUERY PLAN                                                       
------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on numeric_tbl
   Oracle query: SELECT /*3a3e9ce1642025dfd6451e15cf1fadd9*/ "VALUE1", "VALUE2", "VALUE3", "VALUE4" FROM  "NUMERIC_TBL"
(2 rows)

-- select ceiling (builtin function, result)
--Testcase 182:
SELECT ceiling(value1), ceiling(value2), ceiling(value3), ceiling(value4), ceiling(0.5) FROM numeric_tbl;
 ceiling | ceiling | ceiling | ceiling | ceiling 
---------+---------+---------+---------+---------
       1 |     100 |      -0 |    -100 |       1
       1 |     100 |      -0 |    -100 |       1
       1 |     100 |      -0 |    -100 |       1
       2 |     200 |      -1 |    -200 |       1
       3 |     200 |      -2 |    -200 |       1
       4 |     200 |      -3 |    -200 |       1
(6 rows)

-- select ceiling (builtin function, not pushdown constraints, EXPLAIN (COSTS OFF))
--Testcase 183:
EXPLAIN (COSTS OFF)
SELECT ceiling(value1), ceiling(value2), ceiling(value3), ceiling(value4), ceiling(0.5) FROM numeric_tbl WHERE to_hex(value2) = '64';
                                                       QUERY PLAN                                                       
------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on numeric_tbl
   Filter: (to_hex(value2) = '64'::text)
   Oracle query: SELECT /*3a3e9ce1642025dfd6451e15cf1fadd9*/ "VALUE1", "VALUE2", "VALUE3", "VALUE4" FROM  "NUMERIC_TBL"
(3 rows)

-- select ceiling (builtin function, not pushdown constraints, result)
--Testcase 184:
SELECT ceiling(value1), ceiling(value2), ceiling(value3), ceiling(value4), ceiling(0.5) FROM numeric_tbl WHERE to_hex(value2) = '64';
 ceiling | ceiling | ceiling | ceiling | ceiling 
---------+---------+---------+---------+---------
       1 |     100 |      -0 |    -100 |       1
       1 |     100 |      -0 |    -100 |       1
       1 |     100 |      -0 |    -100 |       1
(3 rows)

-- select ceiling (builtin function, pushdown constraints, EXPLAIN (COSTS OFF))
--Testcase 185:
EXPLAIN (COSTS OFF)
SELECT ceiling(value1), ceiling(value2), ceiling(value3), ceiling(value4), ceiling(0.5) FROM numeric_tbl WHERE value2 != 200;
                                                                   QUERY PLAN                                                                   
------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on numeric_tbl
   Oracle query: SELECT /*ee255a287dc590cc2e754740ed3cd0e9*/ "VALUE1", "VALUE2", "VALUE3", "VALUE4" FROM  "NUMERIC_TBL" WHERE ("VALUE2" <> 200)
(2 rows)

-- select ceiling (builtin function, pushdown constraints, result)
--Testcase 186:
SELECT ceiling(value1), ceiling(value2), ceiling(value3), ceiling(value4), ceiling(0.5) FROM numeric_tbl WHERE value2 != 200;
 ceiling | ceiling | ceiling | ceiling | ceiling 
---------+---------+---------+---------+---------
       1 |     100 |      -0 |    -100 |       1
       1 |     100 |      -0 |    -100 |       1
       1 |     100 |      -0 |    -100 |       1
(3 rows)

-- select ceiling (builtin function, ceiling in constraints, EXPLAIN (COSTS OFF))
--Testcase 187:
EXPLAIN (COSTS OFF)
SELECT ceiling(value1), ceiling(value2), ceiling(value3), ceiling(value4), ceiling(0.5) FROM numeric_tbl WHERE ceiling(value1) != 1;
                                                                     QUERY PLAN                                                                     
----------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on numeric_tbl
   Oracle query: SELECT /*4fe9249a2c985ac3cd609bbb46f55930*/ "VALUE1", "VALUE2", "VALUE3", "VALUE4" FROM  "NUMERIC_TBL" WHERE (ceil("VALUE1") <> 1)
(2 rows)

-- select ceiling (builtin function, ceiling in constraints, result)
--Testcase 188:
SELECT ceiling(value1), ceiling(value2), ceiling(value3), ceiling(value4), ceiling(0.5) FROM numeric_tbl WHERE ceiling(value1) != 1;
 ceiling | ceiling | ceiling | ceiling | ceiling 
---------+---------+---------+---------+---------
       2 |     200 |      -1 |    -200 |       1
       3 |     200 |      -2 |    -200 |       1
       4 |     200 |      -3 |    -200 |       1
(3 rows)

-- select ceiling (builtin function, ceiling in constraints, EXPLAIN (COSTS OFF))
--Testcase 189:
EXPLAIN (COSTS OFF)
SELECT ceiling(value1), ceiling(value2), ceiling(value3), ceiling(value4), ceiling(0.5) FROM numeric_tbl WHERE ceiling(0.5) > value1;
                                                                 QUERY PLAN                                                                  
---------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on numeric_tbl
   Oracle query: SELECT /*886c3fbac6910e2aa6cbd3ac40b5674c*/ "VALUE1", "VALUE2", "VALUE3", "VALUE4" FROM  "NUMERIC_TBL" WHERE (1 > "VALUE1")
(2 rows)

-- select ceiling (builtin function, ceiling in constraints, result)
--Testcase 190:
SELECT ceiling(value1), ceiling(value2), ceiling(value3), ceiling(value4), ceiling(0.5) FROM numeric_tbl WHERE ceiling(0.5) > value1;
 ceiling | ceiling | ceiling | ceiling | ceiling 
---------+---------+---------+---------+---------
       1 |     100 |      -0 |    -100 |       1
       1 |     100 |      -0 |    -100 |       1
       1 |     100 |      -0 |    -100 |       1
(3 rows)

-- select ceiling as nest function with agg (pushdown, EXPLAIN (COSTS OFF))
--Testcase 191:
EXPLAIN (COSTS OFF)
SELECT sum(value3),ceiling(sum(value3)) FROM numeric_tbl;
                                                     QUERY PLAN                                                     
--------------------------------------------------------------------------------------------------------------------
 Foreign Scan
   Oracle query: SELECT /*ee3226f2b5aefc346ef1b85ea501c1ce*/ sum("VALUE3"), ceil(sum("VALUE3")) FROM  "NUMERIC_TBL"
(2 rows)

-- select ceiling as nest function with agg (pushdown, result)
--Testcase 192:
SELECT sum(value3),ceiling(sum(value3)) FROM numeric_tbl;
 sum  | ceiling 
------+---------
 -7.2 |      -7
(1 row)

-- select ceiling as nest with log2 (pushdown, EXPLAIN (COSTS OFF))
--Testcase 193:
EXPLAIN (COSTS OFF)
SELECT ceiling(log(2, value2)) FROM numeric_tbl;
                                        QUERY PLAN                                        
------------------------------------------------------------------------------------------
 Foreign Scan on numeric_tbl
   Oracle query: SELECT /*942bf85feb96f605a79f40dffa8f6645*/ "VALUE2" FROM  "NUMERIC_TBL"
(2 rows)

-- select ceiling as nest with log2 (pushdown, result)
--Testcase 194:
SELECT ceiling(log(2, value2)) FROM numeric_tbl;
 ceiling 
---------
       7
       7
       7
       8
       8
       8
(6 rows)

-- select ceiling with non pushdown func and explicit constant (EXPLAIN (COSTS OFF))
--Testcase 195:
EXPLAIN (COSTS OFF)
SELECT ceiling(value3), pi(), 4.1 FROM numeric_tbl;
                                        QUERY PLAN                                        
------------------------------------------------------------------------------------------
 Foreign Scan on numeric_tbl
   Oracle query: SELECT /*b3d9f3348edc9fa53b73cdc5d271b426*/ "VALUE3" FROM  "NUMERIC_TBL"
(2 rows)

-- select ceiling with non pushdown func and explicit constant (result)
--Testcase 196:
SELECT ceiling(value3), pi(), 4.1 FROM numeric_tbl;
 ceiling |        pi         | ?column? 
---------+-------------------+----------
      -0 | 3.141592653589793 |      4.1
      -0 | 3.141592653589793 |      4.1
      -0 | 3.141592653589793 |      4.1
      -1 | 3.141592653589793 |      4.1
      -2 | 3.141592653589793 |      4.1
      -3 | 3.141592653589793 |      4.1
(6 rows)

-- select ceiling with order by (EXPLAIN (COSTS OFF))
--Testcase 197:
EXPLAIN (COSTS OFF)
SELECT value1, ceiling(1-value3) FROM numeric_tbl ORDER BY ceiling(1-value3);
                                                                   QUERY PLAN                                                                    
-------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on numeric_tbl
   Oracle query: SELECT /*e3f6e47f8a1e3eb0f58c4a27c068f197*/ "VALUE1", "VALUE3" FROM  "NUMERIC_TBL" ORDER BY ceil((1 - "VALUE3")) ASC NULLS LAST
(2 rows)

-- select ceiling with order by (result)
--Testcase 198:
SELECT value1, ceiling(1-value3) FROM numeric_tbl ORDER BY ceiling(1-value3);
 value1 | ceiling 
--------+---------
    0.1 |       2
    0.2 |       2
    0.3 |       2
    1.1 |       3
    2.2 |       4
    3.3 |       5
(6 rows)

-- select ceiling with order by index (result)
--Testcase 199:
SELECT value1, ceiling(1-value3) FROM numeric_tbl ORDER BY 2,1;
 value1 | ceiling 
--------+---------
    0.1 |       2
    0.2 |       2
    0.3 |       2
    1.1 |       3
    2.2 |       4
    3.3 |       5
(6 rows)

-- select ceiling with order by index (result)
--Testcase 200:
SELECT value1, ceiling(1-value3) FROM numeric_tbl ORDER BY 1,2;
 value1 | ceiling 
--------+---------
    0.1 |       2
    0.2 |       2
    0.3 |       2
    1.1 |       3
    2.2 |       4
    3.3 |       5
(6 rows)

-- select ceiling with group by (EXPLAIN (COSTS OFF))
--Testcase 201:
EXPLAIN (COSTS OFF)
SELECT count(value1), ceiling(1-value3) FROM numeric_tbl GROUP BY ceiling(1-value3);
                                                                      QUERY PLAN                                                                       
-------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan
   Oracle query: SELECT /*b27ae8f44830832288e0aa21da58bc7e*/ count("VALUE1"), ceil((1 - "VALUE3")) FROM  "NUMERIC_TBL" GROUP BY (ceil((1 - "VALUE3")))
(2 rows)

-- select ceiling with group by (result)
--Testcase 202:
SELECT count(value1), ceiling(1-value3) FROM numeric_tbl GROUP BY ceiling(1-value3);
 count | ceiling 
-------+---------
     3 |       2
     1 |       3
     1 |       4
     1 |       5
(4 rows)

-- select ceiling with group by index (result)
--Testcase 203:
SELECT value1, ceiling(1-value3) FROM numeric_tbl GROUP BY 2,1;
 value1 | ceiling 
--------+---------
    0.1 |       2
    0.2 |       2
    0.3 |       2
    1.1 |       3
    2.2 |       4
    3.3 |       5
(6 rows)

-- select ceiling with group by index (result)
--Testcase 204:
SELECT value1, ceiling(1-value3) FROM numeric_tbl GROUP BY 1,2;
 value1 | ceiling 
--------+---------
    0.1 |       2
    0.2 |       2
    0.3 |       2
    1.1 |       3
    2.2 |       4
    3.3 |       5
(6 rows)

-- select ceiling with group by having (EXPLAIN (COSTS OFF))
--Testcase 205:
EXPLAIN (COSTS OFF)
SELECT count(value1), ceiling(1-value3) FROM numeric_tbl GROUP BY ceiling(1-value3) HAVING ceiling(avg(value1)) > 0;
                                                                                       QUERY PLAN                                                                                       
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan
   Oracle query: SELECT /*c137694b95c7a53dab0f32a3136c17d6*/ count("VALUE1"), ceil((1 - "VALUE3")) FROM  "NUMERIC_TBL" GROUP BY (ceil((1 - "VALUE3"))) HAVING (ceil(avg("VALUE1")) > 0)
(2 rows)

-- select ceiling with group by having (result)
--Testcase 206:
SELECT count(value1), ceiling(1-value3) FROM numeric_tbl GROUP BY ceiling(1-value3) HAVING ceiling(avg(value1)) > 0;
 count | ceiling 
-------+---------
     3 |       2
     1 |       3
     1 |       4
     1 |       5
(4 rows)

-- select ceiling with group by index having (result)
--Testcase 207:
SELECT value1, ceiling(1-value3) FROM numeric_tbl GROUP BY 2,1 HAVING ceiling(1-value3) > 0;
 value1 | ceiling 
--------+---------
    0.1 |       2
    0.2 |       2
    0.3 |       2
    1.1 |       3
    2.2 |       4
    3.3 |       5
(6 rows)

-- select ceiling with group by index having (result)
--Testcase 208:
SELECT value1, ceiling(1-value3) FROM numeric_tbl GROUP BY 1,2 HAVING value1 > 1;
 value1 | ceiling 
--------+---------
    1.1 |       3
    2.2 |       4
    3.3 |       5
(3 rows)

-- select ceiling and as
--Testcase 209:
SELECT ceiling(value3) as ceiling1 FROM numeric_tbl;
 ceiling1 
----------
       -0
       -0
       -0
       -1
       -2
       -3
(6 rows)

-- ===============================================================================
-- test char_length()
-- ===============================================================================
-- select char_length (stub function, EXPLAIN (COSTS OFF))
--Testcase 210:
EXPLAIN (COSTS OFF)
SELECT char_length(str4), char_length(str1), char_length(str2) FROM numeric_tbl;
                                               QUERY PLAN                                               
--------------------------------------------------------------------------------------------------------
 Foreign Scan on numeric_tbl
   Oracle query: SELECT /*c22cee056f6b8af58ab6e0a9aed2498c*/ "STR1", "STR2", "STR4" FROM  "NUMERIC_TBL"
(2 rows)

-- select char_length (stub function, result)
--Testcase 211:
SELECT char_length(str4), char_length(str1), char_length(str2) FROM numeric_tbl;
 char_length | char_length | char_length 
-------------+-------------+-------------
          18 |           9 |           9
          18 |           9 |           9
          18 |           9 |           9
          18 |           9 |           9
          18 |           9 |           9
          18 |           9 |           9
(6 rows)

-- select char_length (stub function, not pushdown constraints, EXPLAIN (COSTS OFF))
--Testcase 212:
EXPLAIN (COSTS OFF)
SELECT id, char_length(str4) FROM numeric_tbl WHERE to_hex(value2) = '64';
                                               QUERY PLAN                                               
--------------------------------------------------------------------------------------------------------
 Foreign Scan on numeric_tbl
   Filter: (to_hex(value2) = '64'::text)
   Oracle query: SELECT /*e9ffda4ca5da7d4599010efc578e9dc2*/ "ID", "VALUE2", "STR4" FROM  "NUMERIC_TBL"
(3 rows)

-- select char_length (stub function, not pushdown constraints, EXPLAIN (COSTS OFF))
--Testcase 213:
SELECT id, char_length(str4) FROM numeric_tbl WHERE to_hex(value2) = '64';
 id | char_length 
----+-------------
  0 |          18
  1 |          18
  2 |          18
(3 rows)

-- select char_length (stub function, char_length in constraints, EXPLAIN (COSTS OFF))
--Testcase 214:
EXPLAIN (COSTS OFF)
SELECT id, char_length(str4) FROM numeric_tbl WHERE char_length(str4) > 0;
                                                       QUERY PLAN                                                        
-------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on numeric_tbl
   Oracle query: SELECT /*865bd362fe652c063ed70ef9df2b9c74*/ "ID", "STR4" FROM  "NUMERIC_TBL" WHERE (length("STR4") > 0)
(2 rows)

-- select char_length (stub function, char_length in constraints, result)
--Testcase 215:
SELECT id, char_length(str4) FROM numeric_tbl WHERE char_length(str4) > 0;
 id | char_length 
----+-------------
  0 |          18
  1 |          18
  2 |          18
  3 |          18
  4 |          18
  5 |          18
(6 rows)

-- select char_length with non pushdown func and explicit constant (EXPLAIN (COSTS OFF))
--Testcase 216:
EXPLAIN (COSTS OFF)
SELECT char_length(str4), pi(), 4.1 FROM numeric_tbl;
                                       QUERY PLAN                                       
----------------------------------------------------------------------------------------
 Foreign Scan on numeric_tbl
   Oracle query: SELECT /*44b3add5e16b253bbdfd4d00db679b7c*/ "STR4" FROM  "NUMERIC_TBL"
(2 rows)

-- select char_length with non pushdown func and explicit constant (result)
--Testcase 217:
SELECT char_length(str4), pi(), 4.1 FROM numeric_tbl;
 char_length |        pi         | ?column? 
-------------+-------------------+----------
          18 | 3.141592653589793 |      4.1
          18 | 3.141592653589793 |      4.1
          18 | 3.141592653589793 |      4.1
          18 | 3.141592653589793 |      4.1
          18 | 3.141592653589793 |      4.1
          18 | 3.141592653589793 |      4.1
(6 rows)

-- select char_length with order by (EXPLAIN (COSTS OFF))
--Testcase 218:
EXPLAIN (COSTS OFF)
SELECT value1, char_length(str4) FROM numeric_tbl ORDER BY char_length(str4), 1 DESC;
                                                                             QUERY PLAN                                                                             
--------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on numeric_tbl
   Oracle query: SELECT /*8b0149a3a732c3890a3d89d29dd1f96b*/ "VALUE1", "STR4" FROM  "NUMERIC_TBL" ORDER BY length("STR4") ASC NULLS LAST, "VALUE1" DESC NULLS FIRST
(2 rows)

-- select char_length with order by (result)
--Testcase 219:
SELECT value1, char_length(str4) FROM numeric_tbl ORDER BY char_length(str4), 1 DESC;
 value1 | char_length 
--------+-------------
    3.3 |          18
    2.2 |          18
    1.1 |          18
    0.3 |          18
    0.2 |          18
    0.1 |          18
(6 rows)

-- select char_length with group by (EXPLAIN (COSTS OFF))
--Testcase 220:
EXPLAIN (COSTS OFF)
SELECT count(value1), char_length(str4) FROM numeric_tbl GROUP BY char_length(str4);
                                                                QUERY PLAN                                                                 
-------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan
   Oracle query: SELECT /*cf2b3b6dacd57214ce29ac054d406a03*/ count("VALUE1"), length("STR4") FROM  "NUMERIC_TBL" GROUP BY (length("STR4"))
(2 rows)

-- select char_length with group by (result)
--Testcase 221:
SELECT count(value1), char_length(str4) FROM numeric_tbl GROUP BY char_length(str4);
 count | char_length 
-------+-------------
     6 |          18
(1 row)

-- select char_length with group by index (result)
--Testcase 222:
SELECT value1, char_length(str4) FROM numeric_tbl GROUP BY 2,1;
 value1 | char_length 
--------+-------------
    0.1 |          18
    0.2 |          18
    0.3 |          18
    1.1 |          18
    2.2 |          18
    3.3 |          18
(6 rows)

-- select char_length with group by having (EXPLAIN (COSTS OFF))
--Testcase 223:
EXPLAIN (COSTS OFF)
SELECT count(value1), char_length(str4) FROM numeric_tbl GROUP BY char_length(str4), str1 HAVING char_length(str4) > 0;
                                                                                      QUERY PLAN                                                                                      
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan
   Oracle query: SELECT /*04a0fc224bc28db8634ac641a073122b*/ count("VALUE1"), length("STR4"), "STR1" FROM  "NUMERIC_TBL" WHERE (length("STR4") > 0) GROUP BY (length("STR4")), "STR1"
(2 rows)

-- select char_length with group by having (result)
--Testcase 224:
SELECT count(value1), char_length(str4) FROM numeric_tbl GROUP BY char_length(str4), str1 HAVING char_length(str4) > 0;
 count | char_length 
-------+-------------
     6 |          18
(1 row)

-- select char_length with group by index having (result)
--Testcase 225:
SELECT value1, char_length(str4) FROM numeric_tbl GROUP BY 1,2 HAVING value1 > 1;
 value1 | char_length 
--------+-------------
    1.1 |          18
    2.2 |          18
    3.3 |          18
(3 rows)

-- ===============================================================================
-- test character_length()
-- ===============================================================================
-- select character_length (stub function, EXPLAIN (COSTS OFF))
--Testcase 226:
EXPLAIN (COSTS OFF)
SELECT character_length(tag1), character_length(str1), character_length(str2) FROM numeric_tbl;
                                               QUERY PLAN                                               
--------------------------------------------------------------------------------------------------------
 Foreign Scan on numeric_tbl
   Oracle query: SELECT /*cfe4b846415e390289494b4d6e555317*/ "TAG1", "STR1", "STR2" FROM  "NUMERIC_TBL"
(2 rows)

-- select character_length (stub function, result)
--Testcase 227:
SELECT character_length(tag1), character_length(str1), character_length(str2) FROM numeric_tbl;
 character_length | character_length | character_length 
------------------+------------------+------------------
                1 |                9 |                9
                1 |                9 |                9
                1 |                9 |                9
                1 |                9 |                9
                1 |                9 |                9
                1 |                9 |                9
(6 rows)

-- select character_length (stub function, not pushdown constraints, EXPLAIN (COSTS OFF))
--Testcase 228:
EXPLAIN (COSTS OFF)
SELECT id, character_length(str1) FROM numeric_tbl WHERE to_hex(value2) = '64';
                                               QUERY PLAN                                               
--------------------------------------------------------------------------------------------------------
 Foreign Scan on numeric_tbl
   Filter: (to_hex(value2) = '64'::text)
   Oracle query: SELECT /*72db7d1937cafd0f97e3117c2fe29b4d*/ "ID", "VALUE2", "STR1" FROM  "NUMERIC_TBL"
(3 rows)

-- select character_length (stub function, not pushdown constraints, EXPLAIN (COSTS OFF))
--Testcase 229:
SELECT id, character_length(str1) FROM numeric_tbl WHERE to_hex(value2) = '64';
 id | character_length 
----+------------------
  0 |                9
  1 |                9
  2 |                9
(3 rows)

-- select character_length (stub function, character_length in constraints, EXPLAIN (COSTS OFF))
--Testcase 230:
EXPLAIN (COSTS OFF)
SELECT id, character_length(str1) FROM numeric_tbl WHERE character_length(str1) > 0;
                                                       QUERY PLAN                                                        
-------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on numeric_tbl
   Oracle query: SELECT /*a73aeea61b3a87d7ea58a140226765c0*/ "ID", "STR1" FROM  "NUMERIC_TBL" WHERE (length("STR1") > 0)
(2 rows)

-- select character_length (stub function, character_length in constraints, result)
--Testcase 231:
SELECT id, character_length(str1) FROM numeric_tbl WHERE character_length(str1) > 0;
 id | character_length 
----+------------------
  0 |                9
  1 |                9
  2 |                9
  3 |                9
  4 |                9
  5 |                9
(6 rows)

-- select character_length with non pushdown func and explicit constant (EXPLAIN (COSTS OFF))
--Testcase 232:
EXPLAIN (COSTS OFF)
SELECT character_length(str1), pi(), 4.1 FROM numeric_tbl;
                                       QUERY PLAN                                       
----------------------------------------------------------------------------------------
 Foreign Scan on numeric_tbl
   Oracle query: SELECT /*b0f206a14da49f63f52c0cf84e67a466*/ "STR1" FROM  "NUMERIC_TBL"
(2 rows)

-- select character_length with non pushdown func and explicit constant (result)
--Testcase 233:
SELECT character_length(str1), pi(), 4.1 FROM numeric_tbl;
 character_length |        pi         | ?column? 
------------------+-------------------+----------
                9 | 3.141592653589793 |      4.1
                9 | 3.141592653589793 |      4.1
                9 | 3.141592653589793 |      4.1
                9 | 3.141592653589793 |      4.1
                9 | 3.141592653589793 |      4.1
                9 | 3.141592653589793 |      4.1
(6 rows)

-- select character_length with order by (EXPLAIN (COSTS OFF))
--Testcase 234:
EXPLAIN (COSTS OFF)
SELECT value1, character_length(str1) FROM numeric_tbl ORDER BY character_length(str1), 1 DESC;
                                                                             QUERY PLAN                                                                             
--------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on numeric_tbl
   Oracle query: SELECT /*2bd49a66c2a956eedd349427d437a49c*/ "VALUE1", "STR1" FROM  "NUMERIC_TBL" ORDER BY length("STR1") ASC NULLS LAST, "VALUE1" DESC NULLS FIRST
(2 rows)

-- select character_length with order by (result)
--Testcase 235:
SELECT value1, character_length(str1) FROM numeric_tbl ORDER BY character_length(str1), 1 DESC;
 value1 | character_length 
--------+------------------
    3.3 |                9
    2.2 |                9
    1.1 |                9
    0.3 |                9
    0.2 |                9
    0.1 |                9
(6 rows)

-- select character_length with group by (EXPLAIN (COSTS OFF))
--Testcase 236:
EXPLAIN (COSTS OFF)
SELECT count(value1), character_length(str1) FROM numeric_tbl GROUP BY character_length(str1);
                                                                QUERY PLAN                                                                 
-------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan
   Oracle query: SELECT /*c0460b23a6f9fd3ef84de6117887e4b1*/ count("VALUE1"), length("STR1") FROM  "NUMERIC_TBL" GROUP BY (length("STR1"))
(2 rows)

-- select character_length with group by (result)
--Testcase 237:
SELECT count(value1), character_length(str1) FROM numeric_tbl GROUP BY character_length(str1);
 count | character_length 
-------+------------------
     6 |                9
(1 row)

-- select character_length with group by index (result)
--Testcase 238:
SELECT value1, character_length(str1) FROM numeric_tbl GROUP BY 2,1;
 value1 | character_length 
--------+------------------
    0.1 |                9
    0.2 |                9
    0.3 |                9
    1.1 |                9
    2.2 |                9
    3.3 |                9
(6 rows)

-- select character_length with group by having (EXPLAIN (COSTS OFF))
--Testcase 239:
EXPLAIN (COSTS OFF)
SELECT count(value1), character_length(str1) FROM numeric_tbl GROUP BY character_length(str1), str1 HAVING character_length(str1) > 0;
                                                                                      QUERY PLAN                                                                                      
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan
   Oracle query: SELECT /*449821bffe16c92aeb55e69470277a20*/ count("VALUE1"), length("STR1"), "STR1" FROM  "NUMERIC_TBL" WHERE (length("STR1") > 0) GROUP BY (length("STR1")), "STR1"
(2 rows)

-- select character_length with group by having (result)
--Testcase 240:
SELECT count(value1), character_length(str1) FROM numeric_tbl GROUP BY character_length(str1), str1 HAVING character_length(str1) > 0;
 count | character_length 
-------+------------------
     6 |                9
(1 row)

-- select character_length with group by index having (result)
--Testcase 241:
SELECT value1, character_length(str1) FROM numeric_tbl GROUP BY 1,2 HAVING value1 > 1;
 value1 | character_length 
--------+------------------
    1.1 |                9
    2.2 |                9
    3.3 |                9
(3 rows)

-- ===============================================================================
-- test concat()
-- ===============================================================================
-- select concat (stub function, EXPLAIN (COSTS OFF))
--Testcase 242:
EXPLAIN (COSTS OFF)
SELECT concat(id), concat(tag1), concat(value1), concat(value2), concat(str1) FROM numeric_tbl;
                                                        QUERY PLAN                                                        
--------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on numeric_tbl
   Oracle query: SELECT /*f3a68dc1ffcbb5578cee23b0b54c070e*/ "ID", "TAG1", "VALUE1", "VALUE2", "STR1" FROM  "NUMERIC_TBL"
(2 rows)

-- select concat (stub function, result)
--Testcase 243:
SELECT concat(id), concat(tag1), concat(value1), concat(value2), concat(str1) FROM numeric_tbl;
 concat | concat | concat | concat |  concat   
--------+--------+--------+--------+-----------
 0      | a      | 0.1    | 100    | ---XYZ---
 1      | a      | 0.2    | 100    | ---XYZ---
 2      | a      | 0.3    | 100    | ---XYZ---
 3      | b      | 1.1    | 200    | ---XYZ---
 4      | b      | 2.2    | 200    | ---XYZ---
 5      | b      | 3.3    | 200    | ---XYZ---
(6 rows)

-- select concat (stub function, pushdown constraints, EXPLAIN (COSTS OFF))
--Testcase 244:
EXPLAIN (COSTS OFF)
SELECT id, concat(str1, str2) FROM numeric_tbl WHERE value2 != 100;
                                                          QUERY PLAN                                                          
------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on numeric_tbl
   Oracle query: SELECT /*7bb0cf0363658e6180274eedd7d8399f*/ "ID", "STR1", "STR2" FROM  "NUMERIC_TBL" WHERE ("VALUE2" <> 100)
(2 rows)

-- select concat (stub function, pushdown constraints, result)
--Testcase 245:
SELECT id, concat(str1, str2) FROM numeric_tbl WHERE value2 != 100;
 id |       concat       
----+--------------------
  3 | ---XYZ---   abc   
  4 | ---XYZ---   abc   
  5 | ---XYZ---   abc   
(3 rows)

-- select concat (stub function, concat in constraints, EXPLAIN (COSTS OFF))
--Testcase 246:
EXPLAIN (COSTS OFF)
SELECT id, concat(str1, str2) FROM numeric_tbl WHERE concat(str1, str2) != 'XYZ';
                                                                  QUERY PLAN                                                                  
----------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on numeric_tbl
   Oracle query: SELECT /*4efcf3e78eff799b8260c15556d6f495*/ "ID", "STR1", "STR2" FROM  "NUMERIC_TBL" WHERE (concat("STR1", "STR2") <> 'XYZ')
(2 rows)

-- select concat (stub function, concat in constraints, EXPLAIN (COSTS OFF))
--Testcase 247:
SELECT id, concat(str1, str2) FROM numeric_tbl WHERE concat(str1, str2) != 'XYZ';
 id |       concat       
----+--------------------
  0 | ---XYZ---   abc   
  1 | ---XYZ---   abc   
  2 | ---XYZ---   abc   
  3 | ---XYZ---   abc   
  4 | ---XYZ---   abc   
  5 | ---XYZ---   abc   
(6 rows)

-- select concat as nest function with agg (pushdown, EXPLAIN (COSTS OFF))
--Testcase 248:
EXPLAIN (COSTS OFF)
SELECT id, concat(sum(value1), str1) FROM numeric_tbl GROUP BY id, str1;
                                                                    QUERY PLAN                                                                     
---------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan
   Oracle query: SELECT /*937b03fb7842c8a35a29a174224a1585*/ "ID", concat(sum("VALUE1"), "STR1"), "STR1" FROM  "NUMERIC_TBL" GROUP BY "ID", "STR1"
(2 rows)

-- select concat as nest function with agg (pushdown, result)
--Testcase 249:
SELECT id, concat(sum(value1), str1) FROM numeric_tbl GROUP BY id, str1;
 id |    concat    
----+--------------
  0 | .1---XYZ---
  1 | .2---XYZ---
  2 | .3---XYZ---
  3 | 1.1---XYZ---
  4 | 2.2---XYZ---
  5 | 3.3---XYZ---
(6 rows)

-- select concat with non pushdown func and explicit constant (EXPLAIN (COSTS OFF))
--Testcase 250:
EXPLAIN (COSTS OFF)
SELECT concat(str1, str2), pi(), 4.1 FROM numeric_tbl;
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Foreign Scan on numeric_tbl
   Oracle query: SELECT /*b5e3ceef645293200ae015baf22fc9f6*/ "STR1", "STR2" FROM  "NUMERIC_TBL"
(2 rows)

-- select concat with non pushdown func and explicit constant (result)
--Testcase 251:
SELECT concat(str1, str2), pi(), 4.1 FROM numeric_tbl;
       concat       |        pi         | ?column? 
--------------------+-------------------+----------
 ---XYZ---   abc    | 3.141592653589793 |      4.1
 ---XYZ---   abc    | 3.141592653589793 |      4.1
 ---XYZ---   abc    | 3.141592653589793 |      4.1
 ---XYZ---   abc    | 3.141592653589793 |      4.1
 ---XYZ---   abc    | 3.141592653589793 |      4.1
 ---XYZ---   abc    | 3.141592653589793 |      4.1
(6 rows)

-- select concat with order by (EXPLAIN (COSTS OFF))
--Testcase 252:
EXPLAIN (COSTS OFF)
SELECT value1, concat(value2, str2) FROM numeric_tbl ORDER BY concat(value2, str2);
                                                    QUERY PLAN                                                    
------------------------------------------------------------------------------------------------------------------
 Sort
   Sort Key: (concat(value2, str2))
   ->  Foreign Scan on numeric_tbl
         Oracle query: SELECT /*20947e03cae6add1c69490f9e87174d3*/ "VALUE1", "VALUE2", "STR2" FROM  "NUMERIC_TBL"
(4 rows)

-- select concat with order by (result)
--Testcase 253:
SELECT value1, concat(value2, str2) FROM numeric_tbl ORDER BY concat(value2, str2);
 value1 |    concat    
--------+--------------
    0.1 | 100   abc   
    0.2 | 100   abc   
    0.3 | 100   abc   
    1.1 | 200   abc   
    2.2 | 200   abc   
    3.3 | 200   abc   
(6 rows)

-- select concat with order by index (result)
--Testcase 254:
SELECT value1, concat(value2, str2) FROM numeric_tbl ORDER BY 2,1;
 value1 |    concat    
--------+--------------
    0.1 | 100   abc   
    0.2 | 100   abc   
    0.3 | 100   abc   
    1.1 | 200   abc   
    2.2 | 200   abc   
    3.3 | 200   abc   
(6 rows)

-- select concat with group by (EXPLAIN (COSTS OFF))
--Testcase 255:
EXPLAIN (COSTS OFF)
SELECT count(value1), concat(str1, str2) FROM numeric_tbl GROUP BY concat(str1, str2);
                                                                        QUERY PLAN                                                                         
-----------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan
   Oracle query: SELECT /*975f121e4f3570bd2ee5ef6521cb95f7*/ count("VALUE1"), concat("STR1", "STR2") FROM  "NUMERIC_TBL" GROUP BY (concat("STR1", "STR2"))
(2 rows)

-- select concat with group by (result)
--Testcase 256:
SELECT count(value1), concat(str1, str2) FROM numeric_tbl GROUP BY concat(str1, str2);
 count |       concat       
-------+--------------------
     6 | ---XYZ---   abc   
(1 row)

-- select concat with group by index (explain)
--Testcase 257:
EXPLAIN (COSTS OFF)
SELECT value1, concat(str1, str2) FROM numeric_tbl GROUP BY 2,1;
                                                                          QUERY PLAN                                                                          
--------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan
   Oracle query: SELECT /*9d93285e961a9fd6fe21e770bae62aa8*/ "VALUE1", concat("STR1", "STR2") FROM  "NUMERIC_TBL" GROUP BY (concat("STR1", "STR2")), "VALUE1"
(2 rows)

-- select concat with group by index (result)
--Testcase 258:
SELECT value1, concat(str1, str2) FROM numeric_tbl GROUP BY 2,1;
 value1 |       concat       
--------+--------------------
    0.1 | ---XYZ---   abc   
    0.2 | ---XYZ---   abc   
    0.3 | ---XYZ---   abc   
    1.1 | ---XYZ---   abc   
    2.2 | ---XYZ---   abc   
    3.3 | ---XYZ---   abc   
(6 rows)

-- select concat with group by having (EXPLAIN (COSTS OFF))
--Testcase 259:
EXPLAIN (COSTS OFF)
SELECT count(value1), concat(str1, str2) FROM numeric_tbl GROUP BY concat(str1, str2) HAVING concat(str1, str2) IS NOT NULL;
                                                                                              QUERY PLAN                                                                                              
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan
   Oracle query: SELECT /*61be49046c16ea7b420c639407de5e11*/ count("VALUE1"), concat("STR1", "STR2") FROM  "NUMERIC_TBL" WHERE (concat("STR1", "STR2") IS NOT NULL) GROUP BY (concat("STR1", "STR2"))
(2 rows)

-- select concat with group by having (EXPLAIN (COSTS OFF))
--Testcase 260:
SELECT count(value1), concat(str1, str2) FROM numeric_tbl GROUP BY concat(str1, str2) HAVING concat(str1, str2) IS NOT NULL;
 count |       concat       
-------+--------------------
     6 | ---XYZ---   abc   
(1 row)

-- select concat with group by index having (explain)
--Testcase 261:
EXPLAIN (COSTS OFF)
SELECT value1, concat(str1, str2, value1, value2) FROM numeric_tbl GROUP BY 1,2 HAVING value1 > 1;
                                                                                                                        QUERY PLAN                                                                                                                         
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan
   Oracle query: SELECT /*9c39a772b79be59d68bd1fcbf6d170df*/ "VALUE1", concat("STR1", concat("STR2", concat("VALUE1", "VALUE2"))) FROM  "NUMERIC_TBL" WHERE ("VALUE1" > 1) GROUP BY "VALUE1", (concat("STR1", concat("STR2", concat("VALUE1", "VALUE2"))))
(2 rows)

-- select concat with group by index having (result)
--Testcase 262:
SELECT value1, concat(str1, str2, value1, value2) FROM numeric_tbl GROUP BY 1,2 HAVING value1 > 1;
 value1 |          concat          
--------+--------------------------
    1.1 | ---XYZ---   abc   1.1200
    2.2 | ---XYZ---   abc   2.2200
    3.3 | ---XYZ---   abc   3.3200
(3 rows)

-- ===============================================================================
-- test cos()
-- ===============================================================================
-- select cos (builtin function, EXPLAIN (COSTS OFF))
--Testcase 263:
EXPLAIN (COSTS OFF)
SELECT value1, cos(value2), cos(value3), cos(value4), cos(0.5) FROM numeric_tbl;
                                                       QUERY PLAN                                                       
------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on numeric_tbl
   Oracle query: SELECT /*3a3e9ce1642025dfd6451e15cf1fadd9*/ "VALUE1", "VALUE2", "VALUE3", "VALUE4" FROM  "NUMERIC_TBL"
(2 rows)

-- select cos (builtin function, result)
--Testcase 264:
SELECT value1, cos(value2), cos(value3), cos(value4), cos(0.5) FROM numeric_tbl;
 value1 |         cos         |         cos         |         cos         |        cos         
--------+---------------------+---------------------+---------------------+--------------------
    0.1 |  0.8623188722876839 |  0.9950041652780258 |  0.8623188722876839 | 0.8775825618903728
    0.2 |  0.8623188722876839 |  0.9800665778412416 |  0.8623188722876839 | 0.8775825618903728
    0.3 |  0.8623188722876839 |   0.955336489125606 |  0.8623188722876839 | 0.8775825618903728
    1.1 | 0.48718767500700594 |  0.4535961214255773 | 0.48718767500700594 | 0.8775825618903728
    2.2 | 0.48718767500700594 | -0.5885011172553458 | 0.48718767500700594 | 0.8775825618903728
    3.3 | 0.48718767500700594 | -0.9874797699088649 | 0.48718767500700594 | 0.8775825618903728
(6 rows)

-- select cos (builtin function, not pushdown constraints, EXPLAIN (COSTS OFF))
--Testcase 265:
EXPLAIN (COSTS OFF)
SELECT cos(value1), cos(value2), cos(value3), cos(value4), cos(0.5) FROM numeric_tbl WHERE to_hex(value2) = '64';
                                                       QUERY PLAN                                                       
------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on numeric_tbl
   Filter: (to_hex(value2) = '64'::text)
   Oracle query: SELECT /*3a3e9ce1642025dfd6451e15cf1fadd9*/ "VALUE1", "VALUE2", "VALUE3", "VALUE4" FROM  "NUMERIC_TBL"
(3 rows)

-- select cos (builtin function, not pushdown constraints, result)
--Testcase 266:
SELECT cos(value1), cos(value2), cos(value3), cos(value4), cos(0.5) FROM numeric_tbl WHERE to_hex(value2) = '64';
        cos         |        cos         |        cos         |        cos         |        cos         
--------------------+--------------------+--------------------+--------------------+--------------------
 0.9950041652780258 | 0.8623188722876839 | 0.9950041652780258 | 0.8623188722876839 | 0.8775825618903728
 0.9800665778412416 | 0.8623188722876839 | 0.9800665778412416 | 0.8623188722876839 | 0.8775825618903728
  0.955336489125606 | 0.8623188722876839 |  0.955336489125606 | 0.8623188722876839 | 0.8775825618903728
(3 rows)

-- select cos (builtin function, pushdown constraints, EXPLAIN (COSTS OFF))
--Testcase 267:
EXPLAIN (COSTS OFF)
SELECT cos(value1), cos(value2), cos(value3), cos(value4), cos(0.5) FROM numeric_tbl WHERE value2 != 200;
                                                                   QUERY PLAN                                                                   
------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on numeric_tbl
   Oracle query: SELECT /*ee255a287dc590cc2e754740ed3cd0e9*/ "VALUE1", "VALUE2", "VALUE3", "VALUE4" FROM  "NUMERIC_TBL" WHERE ("VALUE2" <> 200)
(2 rows)

-- select cos (builtin function, pushdown constraints, result)
--Testcase 268:
SELECT cos(value1), cos(value2), cos(value3), cos(value4), cos(0.5) FROM numeric_tbl WHERE value2 != 200;
        cos         |        cos         |        cos         |        cos         |        cos         
--------------------+--------------------+--------------------+--------------------+--------------------
 0.9950041652780258 | 0.8623188722876839 | 0.9950041652780258 | 0.8623188722876839 | 0.8775825618903728
 0.9800665778412416 | 0.8623188722876839 | 0.9800665778412416 | 0.8623188722876839 | 0.8775825618903728
  0.955336489125606 | 0.8623188722876839 |  0.955336489125606 | 0.8623188722876839 | 0.8775825618903728
(3 rows)

-- select cos (builtin function, cos in constraints, EXPLAIN (COSTS OFF))
--Testcase 269:
EXPLAIN (COSTS OFF)
SELECT value1, cos(value2), cos(value3), cos(value4), cos(0.5) FROM numeric_tbl WHERE cos(value1) != 1;
                                                                    QUERY PLAN                                                                     
---------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on numeric_tbl
   Oracle query: SELECT /*f936bd8d7277269d62bfc47406e7cd50*/ "VALUE1", "VALUE2", "VALUE3", "VALUE4" FROM  "NUMERIC_TBL" WHERE (cos("VALUE1") <> 1)
(2 rows)

-- select cos (builtin function, cos in constraints, result)
--Testcase 270:
SELECT value1, cos(value2), cos(value3), cos(value4), cos(0.5) FROM numeric_tbl WHERE cos(value1) != 1;
 value1 |         cos         |         cos         |         cos         |        cos         
--------+---------------------+---------------------+---------------------+--------------------
    0.1 |  0.8623188722876839 |  0.9950041652780258 |  0.8623188722876839 | 0.8775825618903728
    0.2 |  0.8623188722876839 |  0.9800665778412416 |  0.8623188722876839 | 0.8775825618903728
    0.3 |  0.8623188722876839 |   0.955336489125606 |  0.8623188722876839 | 0.8775825618903728
    1.1 | 0.48718767500700594 |  0.4535961214255773 | 0.48718767500700594 | 0.8775825618903728
    2.2 | 0.48718767500700594 | -0.5885011172553458 | 0.48718767500700594 | 0.8775825618903728
    3.3 | 0.48718767500700594 | -0.9874797699088649 | 0.48718767500700594 | 0.8775825618903728
(6 rows)

-- select cos (builtin function, cos in constraints, EXPLAIN (COSTS OFF))
--Testcase 271:
EXPLAIN (COSTS OFF)
SELECT cos(value1), cos(value2), cos(value3), cos(value4), cos(0.5) FROM numeric_tbl WHERE cos(0.5) > value1;
                                                                          QUERY PLAN                                                                          
--------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on numeric_tbl
   Oracle query: SELECT /*ebc4ecc2913bfd9d510a15657944ef6f*/ "VALUE1", "VALUE2", "VALUE3", "VALUE4" FROM  "NUMERIC_TBL" WHERE (0.8775825618903728 > "VALUE1")
(2 rows)

-- select cos (builtin function, cos in constraints, result)
--Testcase 272:
SELECT cos(value1), cos(value2), cos(value3), cos(value4), cos(0.5) FROM numeric_tbl WHERE cos(0.5) > value1;
        cos         |        cos         |        cos         |        cos         |        cos         
--------------------+--------------------+--------------------+--------------------+--------------------
 0.9950041652780258 | 0.8623188722876839 | 0.9950041652780258 | 0.8623188722876839 | 0.8775825618903728
 0.9800665778412416 | 0.8623188722876839 | 0.9800665778412416 | 0.8623188722876839 | 0.8775825618903728
  0.955336489125606 | 0.8623188722876839 |  0.955336489125606 | 0.8623188722876839 | 0.8775825618903728
(3 rows)

-- select cos as nest function with agg (pushdown, EXPLAIN (COSTS OFF))
--Testcase 273:
EXPLAIN (COSTS OFF)
SELECT sum(value3),cos(sum(value3)) FROM numeric_tbl;
                                                    QUERY PLAN                                                     
-------------------------------------------------------------------------------------------------------------------
 Foreign Scan
   Oracle query: SELECT /*3c0182f1d0a5307f45abe50eecd893e9*/ sum("VALUE3"), cos(sum("VALUE3")) FROM  "NUMERIC_TBL"
(2 rows)

-- select cos as nest function with agg (pushdown, result)
--Testcase 274:
SELECT sum(value3),cos(sum(value3)) FROM numeric_tbl;
 sum  |        cos         
------+--------------------
 -7.2 | 0.6083513145322547
(1 row)

-- select cos as nest with log2 (pushdown, EXPLAIN (COSTS OFF))
--Testcase 275:
EXPLAIN (COSTS OFF)
SELECT value1, cos(log(2, value2)) FROM numeric_tbl;
                                             QUERY PLAN                                             
----------------------------------------------------------------------------------------------------
 Foreign Scan on numeric_tbl
   Oracle query: SELECT /*c35678a687054ae56f3a83ca5558704c*/ "VALUE1", "VALUE2" FROM  "NUMERIC_TBL"
(2 rows)

-- select cos as nest with log2 (pushdown, result)
--Testcase 276:
SELECT value1, cos(log(2, value2)) FROM numeric_tbl;
 value1 |        cos         
--------+--------------------
    0.1 | 0.9356602784280127
    0.2 | 0.9356602784280127
    0.3 | 0.9356602784280127
    1.1 | 0.2085825865110264
    2.2 | 0.2085825865110264
    3.3 | 0.2085825865110264
(6 rows)

-- select cos with non pushdown func and explicit constant (EXPLAIN (COSTS OFF))
--Testcase 277:
EXPLAIN (COSTS OFF)
SELECT cos(value3), pi(), 4.1 FROM numeric_tbl;
                                        QUERY PLAN                                        
------------------------------------------------------------------------------------------
 Foreign Scan on numeric_tbl
   Oracle query: SELECT /*b3d9f3348edc9fa53b73cdc5d271b426*/ "VALUE3" FROM  "NUMERIC_TBL"
(2 rows)

-- select cos with non pushdown func and explicit constant (result)
--Testcase 278:
SELECT cos(value3), pi(), 4.1 FROM numeric_tbl;
         cos         |        pi         | ?column? 
---------------------+-------------------+----------
  0.9950041652780258 | 3.141592653589793 |      4.1
  0.9800665778412416 | 3.141592653589793 |      4.1
   0.955336489125606 | 3.141592653589793 |      4.1
  0.4535961214255773 | 3.141592653589793 |      4.1
 -0.5885011172553458 | 3.141592653589793 |      4.1
 -0.9874797699088649 | 3.141592653589793 |      4.1
(6 rows)

-- select cos with order by (EXPLAIN (COSTS OFF))
--Testcase 279:
EXPLAIN (COSTS OFF)
SELECT value1, cos(1-value3) FROM numeric_tbl ORDER BY cos(1-value3);
                                                                   QUERY PLAN                                                                   
------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on numeric_tbl
   Oracle query: SELECT /*e146934a0873809637ef4e92fbeead33*/ "VALUE1", "VALUE3" FROM  "NUMERIC_TBL" ORDER BY cos((1 - "VALUE3")) ASC NULLS LAST
(2 rows)

-- select cos with order by (result)
--Testcase 280:
SELECT value1, cos(1-value3) FROM numeric_tbl ORDER BY cos(1-value3);
 value1 |         cos          
--------+----------------------
    2.2 |  -0.9982947757947531
    1.1 |  -0.5048461045998576
    3.3 | -0.40079917207997545
    0.3 |  0.26749882862458735
    0.2 |   0.3623577544766736
    0.1 |   0.4535961214255773
(6 rows)

-- select cos with order by index (result)
--Testcase 281:
SELECT value1, cos(1-value3) FROM numeric_tbl ORDER BY 2,1;
 value1 |         cos          
--------+----------------------
    2.2 |  -0.9982947757947531
    1.1 |  -0.5048461045998576
    3.3 | -0.40079917207997545
    0.3 |  0.26749882862458735
    0.2 |   0.3623577544766736
    0.1 |   0.4535961214255773
(6 rows)

-- select cos with order by index (result)
--Testcase 282:
SELECT value1, cos(1-value3) FROM numeric_tbl ORDER BY 1,2;
 value1 |         cos          
--------+----------------------
    0.1 |   0.4535961214255773
    0.2 |   0.3623577544766736
    0.3 |  0.26749882862458735
    1.1 |  -0.5048461045998576
    2.2 |  -0.9982947757947531
    3.3 | -0.40079917207997545
(6 rows)

-- select cos with group by (EXPLAIN (COSTS OFF))
--Testcase 283:
EXPLAIN (COSTS OFF)
SELECT value1, cos(1-value3) FROM numeric_tbl GROUP BY value1, cos(1-value3);
                                                                       QUERY PLAN                                                                       
--------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan
   Oracle query: SELECT /*9c85a7052fdf6b9855f2beb9bfcb02f0*/ "VALUE1", cos((1 - "VALUE3")) FROM  "NUMERIC_TBL" GROUP BY "VALUE1", (cos((1 - "VALUE3")))
(2 rows)

-- select cos with group by (result)
--Testcase 284:
SELECT value1, cos(1-value3) FROM numeric_tbl GROUP BY value1, cos(1-value3);
 value1 |         cos         
--------+---------------------
    0.1 | 0.45359612142557737
    0.2 | 0.36235775447667357
    0.3 |  0.2674988286245874
    1.1 | -0.5048461045998575
    2.2 | -0.9982947757947531
    3.3 | -0.4007991720799753
(6 rows)

-- select cos with group by index (result)
--Testcase 285:
SELECT value1, cos(1-value3) FROM numeric_tbl GROUP BY 2,1;
 value1 |         cos         
--------+---------------------
    0.1 | 0.45359612142557737
    0.2 | 0.36235775447667357
    0.3 |  0.2674988286245874
    1.1 | -0.5048461045998575
    2.2 | -0.9982947757947531
    3.3 | -0.4007991720799753
(6 rows)

-- select cos with group by index (result)
--Testcase 286:
SELECT value1, cos(1-value3) FROM numeric_tbl GROUP BY 1,2;
 value1 |         cos         
--------+---------------------
    0.1 | 0.45359612142557737
    0.2 | 0.36235775447667357
    0.3 |  0.2674988286245874
    1.1 | -0.5048461045998575
    2.2 | -0.9982947757947531
    3.3 | -0.4007991720799753
(6 rows)

-- select cos with group by having (EXPLAIN (COSTS OFF))
--Testcase 287:
EXPLAIN (COSTS OFF)
SELECT value1, cos(1-value3) FROM numeric_tbl GROUP BY value1, cos(1-value3) HAVING cos(avg(value1)) > 0;
                                                                                       QUERY PLAN                                                                                       
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan
   Oracle query: SELECT /*236ed54ae2271d5847e76152fbbc9b57*/ "VALUE1", cos((1 - "VALUE3")) FROM  "NUMERIC_TBL" GROUP BY "VALUE1", (cos((1 - "VALUE3"))) HAVING (cos(avg("VALUE1")) > 0)
(2 rows)

-- select cos with group by having (result)
--Testcase 288:
SELECT value1, cos(1-value3) FROM numeric_tbl GROUP BY value1, cos(1-value3) HAVING cos(avg(value1)) > 0;
 value1 |         cos         
--------+---------------------
    0.1 | 0.45359612142557737
    0.2 | 0.36235775447667357
    0.3 |  0.2674988286245874
    1.1 | -0.5048461045998575
(4 rows)

-- select cos with group by index having (result)
--Testcase 289:
SELECT value1, cos(1-value3) FROM numeric_tbl GROUP BY 2,1 HAVING cos(1-value3) > 0;
 value1 |         cos         
--------+---------------------
    0.1 | 0.45359612142557737
    0.2 | 0.36235775447667357
    0.3 |  0.2674988286245874
(3 rows)

-- select cos with group by index having (result)
--Testcase 290:
SELECT value1, cos(1-value3) FROM numeric_tbl GROUP BY 1,2 HAVING value1 > 1;
 value1 |         cos         
--------+---------------------
    1.1 | -0.5048461045998575
    2.2 | -0.9982947757947531
    3.3 | -0.4007991720799753
(3 rows)

-- select cos and as
--Testcase 291:
SELECT cos(value3) as cos1 FROM numeric_tbl;
        cos1         
---------------------
  0.9950041652780258
  0.9800665778412416
   0.955336489125606
  0.4535961214255773
 -0.5885011172553458
 -0.9874797699088649
(6 rows)

-- ===============================================================================
-- test exp()
-- ===============================================================================
-- select exp (builtin function, EXPLAIN (COSTS OFF))
--Testcase 292:
EXPLAIN (COSTS OFF)
SELECT exp(value1), exp(value2), exp(value3), exp(value4), exp(0.5) FROM numeric_tbl;
                                                       QUERY PLAN                                                       
------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on numeric_tbl
   Oracle query: SELECT /*3a3e9ce1642025dfd6451e15cf1fadd9*/ "VALUE1", "VALUE2", "VALUE3", "VALUE4" FROM  "NUMERIC_TBL"
(2 rows)

-- select exp (builtin function, result)
--Testcase 293:
SELECT exp(value1), exp(value2), exp(value3), exp(value4), exp(0.5) FROM numeric_tbl;
        exp         |          exp           |         exp          |          exp           |        exp         
--------------------+------------------------+----------------------+------------------------+--------------------
 1.1051709180756477 | 2.6881171418161356e+43 |   0.9048374180359595 |  3.720075976020836e-44 | 1.6487212707001281
 1.2214027581601699 | 2.6881171418161356e+43 |   0.8187307530779818 |  3.720075976020836e-44 | 1.6487212707001281
 1.3498588075760032 | 2.6881171418161356e+43 |   0.7408182206817179 |  3.720075976020836e-44 | 1.6487212707001281
 3.0041660239464334 |  7.225973768125749e+86 |  0.33287108369807955 | 1.3838965267367376e-87 | 1.6487212707001281
  9.025013499434122 |  7.225973768125749e+86 |  0.11080315836233387 | 1.3838965267367376e-87 | 1.6487212707001281
 27.112638920657883 |  7.225973768125749e+86 | 0.036883167401240015 | 1.3838965267367376e-87 | 1.6487212707001281
(6 rows)

-- select exp (builtin function, not pushdown constraints, EXPLAIN (COSTS OFF))
--Testcase 294:
EXPLAIN (COSTS OFF)
SELECT exp(value1), exp(value2), exp(value3), exp(value4), exp(0.5) FROM numeric_tbl WHERE to_hex(value2) = '64';
                                                       QUERY PLAN                                                       
------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on numeric_tbl
   Filter: (to_hex(value2) = '64'::text)
   Oracle query: SELECT /*3a3e9ce1642025dfd6451e15cf1fadd9*/ "VALUE1", "VALUE2", "VALUE3", "VALUE4" FROM  "NUMERIC_TBL"
(3 rows)

-- select exp (builtin function, not pushdown constraints, result)
--Testcase 295:
SELECT exp(value1), exp(value2), exp(value3), exp(value4), exp(0.5) FROM numeric_tbl WHERE to_hex(value2) = '64';
        exp         |          exp           |        exp         |          exp          |        exp         
--------------------+------------------------+--------------------+-----------------------+--------------------
 1.1051709180756477 | 2.6881171418161356e+43 | 0.9048374180359595 | 3.720075976020836e-44 | 1.6487212707001281
 1.2214027581601699 | 2.6881171418161356e+43 | 0.8187307530779818 | 3.720075976020836e-44 | 1.6487212707001281
 1.3498588075760032 | 2.6881171418161356e+43 | 0.7408182206817179 | 3.720075976020836e-44 | 1.6487212707001281
(3 rows)

-- select exp (builtin function, pushdown constraints, EXPLAIN (COSTS OFF))
--Testcase 296:
EXPLAIN (COSTS OFF)
SELECT exp(value1), exp(value2), exp(value3), exp(value4), exp(0.5) FROM numeric_tbl WHERE value2 != 200;
                                                                   QUERY PLAN                                                                   
------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on numeric_tbl
   Oracle query: SELECT /*ee255a287dc590cc2e754740ed3cd0e9*/ "VALUE1", "VALUE2", "VALUE3", "VALUE4" FROM  "NUMERIC_TBL" WHERE ("VALUE2" <> 200)
(2 rows)

-- select exp (builtin function, pushdown constraints, result)
--Testcase 297:
SELECT exp(value1), exp(value2), exp(value3), exp(value4), exp(0.5) FROM numeric_tbl WHERE value2 != 200;
        exp         |          exp           |        exp         |          exp          |        exp         
--------------------+------------------------+--------------------+-----------------------+--------------------
 1.1051709180756477 | 2.6881171418161356e+43 | 0.9048374180359595 | 3.720075976020836e-44 | 1.6487212707001281
 1.2214027581601699 | 2.6881171418161356e+43 | 0.8187307530779818 | 3.720075976020836e-44 | 1.6487212707001281
 1.3498588075760032 | 2.6881171418161356e+43 | 0.7408182206817179 | 3.720075976020836e-44 | 1.6487212707001281
(3 rows)

-- select exp (builtin function, exp in constraints, EXPLAIN (COSTS OFF))
--Testcase 298:
EXPLAIN (COSTS OFF)
SELECT exp(value1), exp(value2), exp(value3), exp(value4), exp(0.5) FROM numeric_tbl WHERE exp(value1) != 1;
                                                                    QUERY PLAN                                                                     
---------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on numeric_tbl
   Oracle query: SELECT /*48ca2cdbdf4e46dc24bf14efe0656e26*/ "VALUE1", "VALUE2", "VALUE3", "VALUE4" FROM  "NUMERIC_TBL" WHERE (exp("VALUE1") <> 1)
(2 rows)

-- select exp (builtin function, exp in constraints, result)
--Testcase 299:
SELECT exp(value1), exp(value2), exp(value3), exp(value4), exp(0.5) FROM numeric_tbl WHERE exp(value1) != 1;
        exp         |          exp           |         exp          |          exp           |        exp         
--------------------+------------------------+----------------------+------------------------+--------------------
 1.1051709180756477 | 2.6881171418161356e+43 |   0.9048374180359595 |  3.720075976020836e-44 | 1.6487212707001281
 1.2214027581601699 | 2.6881171418161356e+43 |   0.8187307530779818 |  3.720075976020836e-44 | 1.6487212707001281
 1.3498588075760032 | 2.6881171418161356e+43 |   0.7408182206817179 |  3.720075976020836e-44 | 1.6487212707001281
 3.0041660239464334 |  7.225973768125749e+86 |  0.33287108369807955 | 1.3838965267367376e-87 | 1.6487212707001281
  9.025013499434122 |  7.225973768125749e+86 |  0.11080315836233387 | 1.3838965267367376e-87 | 1.6487212707001281
 27.112638920657883 |  7.225973768125749e+86 | 0.036883167401240015 | 1.3838965267367376e-87 | 1.6487212707001281
(6 rows)

-- select exp (builtin function, exp in constraints, EXPLAIN (COSTS OFF))
--Testcase 300:
EXPLAIN (COSTS OFF)
SELECT exp(value1), exp(value2), exp(value3), exp(value4), exp(0.5) FROM numeric_tbl WHERE exp(0.5) > value1;
                                                                          QUERY PLAN                                                                          
--------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on numeric_tbl
   Oracle query: SELECT /*9e2e7992e9858a621a7de40a57a74fc6*/ "VALUE1", "VALUE2", "VALUE3", "VALUE4" FROM  "NUMERIC_TBL" WHERE (1.6487212707001282 > "VALUE1")
(2 rows)

-- select exp (builtin function, exp in constraints, result)
--Testcase 301:
SELECT exp(value1), exp(value2), exp(value3), exp(value4), exp(0.5) FROM numeric_tbl WHERE exp(0.5) > value1;
        exp         |          exp           |         exp         |          exp           |        exp         
--------------------+------------------------+---------------------+------------------------+--------------------
 1.1051709180756477 | 2.6881171418161356e+43 |  0.9048374180359595 |  3.720075976020836e-44 | 1.6487212707001281
 1.2214027581601699 | 2.6881171418161356e+43 |  0.8187307530779818 |  3.720075976020836e-44 | 1.6487212707001281
 1.3498588075760032 | 2.6881171418161356e+43 |  0.7408182206817179 |  3.720075976020836e-44 | 1.6487212707001281
 3.0041660239464334 |  7.225973768125749e+86 | 0.33287108369807955 | 1.3838965267367376e-87 | 1.6487212707001281
(4 rows)

-- select exp as nest function with agg (pushdown, EXPLAIN (COSTS OFF))
--Testcase 302:
EXPLAIN (COSTS OFF)
SELECT sum(value3),exp(sum(value3)) FROM numeric_tbl;
                                                    QUERY PLAN                                                     
-------------------------------------------------------------------------------------------------------------------
 Foreign Scan
   Oracle query: SELECT /*3b8c245c53cba0d2042644d17f50d835*/ sum("VALUE3"), exp(sum("VALUE3")) FROM  "NUMERIC_TBL"
(2 rows)

-- select exp as nest function with agg (pushdown, result)
--Testcase 303:
SELECT sum(value3),exp(sum(value3)) FROM numeric_tbl;
 sum  |          exp          
------+-----------------------
 -7.2 | 0.0007465858083766794
(1 row)

-- select exp as nest with log2 (pushdown, EXPLAIN (COSTS OFF))
--Testcase 304:
EXPLAIN (COSTS OFF)
SELECT exp(log(2, value2)) FROM numeric_tbl;
                                        QUERY PLAN                                        
------------------------------------------------------------------------------------------
 Foreign Scan on numeric_tbl
   Oracle query: SELECT /*942bf85feb96f605a79f40dffa8f6645*/ "VALUE2" FROM  "NUMERIC_TBL"
(2 rows)

-- select exp as nest with log2 (pushdown, result)
--Testcase 305:
SELECT exp(log(2, value2)) FROM numeric_tbl;
          exp          
-----------------------
  768.0510403855434940
  768.0510403855434940
  768.0510403855434940
 2087.7791864090871642
 2087.7791864090871642
 2087.7791864090871642
(6 rows)

-- select exp with non pushdown func and explicit constant (EXPLAIN (COSTS OFF))
--Testcase 306:
EXPLAIN (COSTS OFF)
SELECT exp(value3), pi(), 4.1 FROM numeric_tbl;
                                        QUERY PLAN                                        
------------------------------------------------------------------------------------------
 Foreign Scan on numeric_tbl
   Oracle query: SELECT /*b3d9f3348edc9fa53b73cdc5d271b426*/ "VALUE3" FROM  "NUMERIC_TBL"
(2 rows)

-- select exp with non pushdown func and explicit constant (result)
--Testcase 307:
SELECT exp(value3), pi(), 4.1 FROM numeric_tbl;
         exp          |        pi         | ?column? 
----------------------+-------------------+----------
   0.9048374180359595 | 3.141592653589793 |      4.1
   0.8187307530779818 | 3.141592653589793 |      4.1
   0.7408182206817179 | 3.141592653589793 |      4.1
  0.33287108369807955 | 3.141592653589793 |      4.1
  0.11080315836233387 | 3.141592653589793 |      4.1
 0.036883167401240015 | 3.141592653589793 |      4.1
(6 rows)

-- select exp with order by (EXPLAIN (COSTS OFF))
--Testcase 308:
EXPLAIN (COSTS OFF)
SELECT value1, exp(1-value3) FROM numeric_tbl ORDER BY exp(1-value3);
                                                                   QUERY PLAN                                                                   
------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on numeric_tbl
   Oracle query: SELECT /*489afbb3836b4738f2b306660d7053bb*/ "VALUE1", "VALUE3" FROM  "NUMERIC_TBL" ORDER BY exp((1 - "VALUE3")) ASC NULLS LAST
(2 rows)

-- select exp with order by (result)
--Testcase 309:
SELECT value1, exp(1-value3) FROM numeric_tbl ORDER BY exp(1-value3);
 value1 |        exp         
--------+--------------------
    0.1 | 3.0041660239464334
    0.2 | 3.3201169227365472
    0.3 | 3.6692966676192444
    1.1 |  8.166169912567652
    2.2 | 24.532530197109352
    3.3 |  73.69979369959579
(6 rows)

-- select exp with order by index (result)
--Testcase 310:
SELECT value1, exp(1-value3) FROM numeric_tbl ORDER BY 2,1;
 value1 |        exp         
--------+--------------------
    0.1 | 3.0041660239464334
    0.2 | 3.3201169227365472
    0.3 | 3.6692966676192444
    1.1 |  8.166169912567652
    2.2 | 24.532530197109352
    3.3 |  73.69979369959579
(6 rows)

-- select exp with order by index (result)
--Testcase 311:
SELECT value1, exp(1-value3) FROM numeric_tbl ORDER BY 1,2;
 value1 |        exp         
--------+--------------------
    0.1 | 3.0041660239464334
    0.2 | 3.3201169227365472
    0.3 | 3.6692966676192444
    1.1 |  8.166169912567652
    2.2 | 24.532530197109352
    3.3 |  73.69979369959579
(6 rows)

-- select exp with group by (EXPLAIN (COSTS OFF))
--Testcase 312:
EXPLAIN (COSTS OFF)
SELECT count(value1), exp(1-value3) FROM numeric_tbl GROUP BY exp(1-value3);
                                                                     QUERY PLAN                                                                      
-----------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan
   Oracle query: SELECT /*81f90009ee0a61f6b0a8e3391472651f*/ count("VALUE1"), exp((1 - "VALUE3")) FROM  "NUMERIC_TBL" GROUP BY (exp((1 - "VALUE3")))
(2 rows)

-- select exp with group by (result)
--Testcase 313:
SELECT count(value1), exp(1-value3) FROM numeric_tbl GROUP BY exp(1-value3);
 count |        exp         
-------+--------------------
     1 |  3.004166023946433
     1 | 3.3201169227365477
     1 |  3.669296667619244
     1 |   8.16616991256765
     1 |  24.53253019710935
     1 |   73.6997936995958
(6 rows)

-- select exp with group by index (result)
--Testcase 314:
SELECT value1, exp(1-value3) FROM numeric_tbl GROUP BY 2,1;
 value1 |        exp         
--------+--------------------
    0.1 |  3.004166023946433
    0.2 | 3.3201169227365477
    0.3 |  3.669296667619244
    1.1 |   8.16616991256765
    2.2 |  24.53253019710935
    3.3 |   73.6997936995958
(6 rows)

-- select exp with group by index (result)
--Testcase 315:
SELECT value1, exp(1-value3) FROM numeric_tbl GROUP BY 1,2;
 value1 |        exp         
--------+--------------------
    0.1 |  3.004166023946433
    0.2 | 3.3201169227365477
    0.3 |  3.669296667619244
    1.1 |   8.16616991256765
    2.2 |  24.53253019710935
    3.3 |   73.6997936995958
(6 rows)

-- select exp with group by having (EXPLAIN (COSTS OFF))
--Testcase 316:
EXPLAIN (COSTS OFF)
SELECT count(value1), exp(1-value3) FROM numeric_tbl GROUP BY exp(1-value3) HAVING exp(avg(value1)) > 0;
                                                                                     QUERY PLAN                                                                                      
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan
   Oracle query: SELECT /*322ccfe9f2dcc5abff58f8e67c34049d*/ count("VALUE1"), exp((1 - "VALUE3")) FROM  "NUMERIC_TBL" GROUP BY (exp((1 - "VALUE3"))) HAVING (exp(avg("VALUE1")) > 0)
(2 rows)

-- select exp with group by having (result)
--Testcase 317:
SELECT count(value1), exp(1-value3) FROM numeric_tbl GROUP BY exp(1-value3) HAVING exp(avg(value1)) > 0;
 count |        exp         
-------+--------------------
     1 |  3.004166023946433
     1 | 3.3201169227365477
     1 |  3.669296667619244
     1 |   8.16616991256765
     1 |  24.53253019710935
     1 |   73.6997936995958
(6 rows)

-- select exp with group by index having (result)
--Testcase 318:
SELECT value1, exp(1-value3) FROM numeric_tbl GROUP BY 2,1 HAVING exp(1-value3) > 0;
 value1 |        exp         
--------+--------------------
    0.1 |  3.004166023946433
    0.2 | 3.3201169227365477
    0.3 |  3.669296667619244
    1.1 |   8.16616991256765
    2.2 |  24.53253019710935
    3.3 |   73.6997936995958
(6 rows)

-- select exp with group by index having (result)
--Testcase 319:
SELECT value1, exp(1-value3) FROM numeric_tbl GROUP BY 1,2 HAVING value1 > 1;
 value1 |        exp        
--------+-------------------
    1.1 |  8.16616991256765
    2.2 | 24.53253019710935
    3.3 |  73.6997936995958
(3 rows)

-- select exp and as
--Testcase 320:
SELECT exp(value3) as exp1 FROM numeric_tbl;
         exp1         
----------------------
   0.9048374180359595
   0.8187307530779818
   0.7408182206817179
  0.33287108369807955
  0.11080315836233387
 0.036883167401240015
(6 rows)

-- ===============================================================================
-- test length()
-- ===============================================================================
-- select length (stub function, EXPLAIN (COSTS OFF))
--Testcase 321:
EXPLAIN (COSTS OFF)
SELECT length(str1), length(str2) FROM numeric_tbl;
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Foreign Scan on numeric_tbl
   Oracle query: SELECT /*b5e3ceef645293200ae015baf22fc9f6*/ "STR1", "STR2" FROM  "NUMERIC_TBL"
(2 rows)

-- select length (stub function, result)
--Testcase 322:
SELECT length(str1), length(str2) FROM numeric_tbl;
 length | length 
--------+--------
      9 |      9
      9 |      9
      9 |      9
      9 |      9
      9 |      9
      9 |      9
(6 rows)

-- select length (stub function, not pushdown constraints, EXPLAIN (COSTS OFF))
--Testcase 323:
EXPLAIN (COSTS OFF)
SELECT value1, length(str1) FROM numeric_tbl WHERE to_hex(value2) = '64';
                                                 QUERY PLAN                                                 
------------------------------------------------------------------------------------------------------------
 Foreign Scan on numeric_tbl
   Filter: (to_hex(value2) = '64'::text)
   Oracle query: SELECT /*635e8508e85d53b1d7588d2faf1d9dce*/ "VALUE1", "VALUE2", "STR1" FROM  "NUMERIC_TBL"
(3 rows)

-- select length (stub function, not pushdown constraints, result)
--Testcase 324:
SELECT value1, length(str1) FROM numeric_tbl WHERE to_hex(value2) = '64';
 value1 | length 
--------+--------
    0.1 |      9
    0.2 |      9
    0.3 |      9
(3 rows)

-- select length (stub function, pushdown constraints, EXPLAIN (COSTS OFF))
--Testcase 325:
EXPLAIN (COSTS OFF)
SELECT value1, length(str1) FROM numeric_tbl WHERE value2 != 200;
                                                        QUERY PLAN                                                        
--------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on numeric_tbl
   Oracle query: SELECT /*7f396d83a07a7d806e4ce7625f7371d9*/ "VALUE1", "STR1" FROM  "NUMERIC_TBL" WHERE ("VALUE2" <> 200)
(2 rows)

-- select length (stub function, pushdown constraints, result)
--Testcase 326:
SELECT value1, length(str1) FROM numeric_tbl WHERE value2 != 200;
 value1 | length 
--------+--------
    0.1 |      9
    0.2 |      9
    0.3 |      9
(3 rows)

-- select length with non pushdown func and explicit constant (EXPLAIN (COSTS OFF))
--Testcase 327:
EXPLAIN (COSTS OFF)
SELECT length(str1), pi(), 4.1 FROM numeric_tbl;
                                       QUERY PLAN                                       
----------------------------------------------------------------------------------------
 Foreign Scan on numeric_tbl
   Oracle query: SELECT /*b0f206a14da49f63f52c0cf84e67a466*/ "STR1" FROM  "NUMERIC_TBL"
(2 rows)

-- select length with non pushdown func and explicit constant (result)
--Testcase 328:
SELECT length(str1), pi(), 4.1 FROM numeric_tbl;
 length |        pi         | ?column? 
--------+-------------------+----------
      9 | 3.141592653589793 |      4.1
      9 | 3.141592653589793 |      4.1
      9 | 3.141592653589793 |      4.1
      9 | 3.141592653589793 |      4.1
      9 | 3.141592653589793 |      4.1
      9 | 3.141592653589793 |      4.1
(6 rows)

-- select length with order by (EXPLAIN (COSTS OFF))
--Testcase 329:
EXPLAIN (COSTS OFF)
SELECT value1, length(str1) FROM numeric_tbl ORDER BY length(str1);
                                                               QUERY PLAN                                                                
-----------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on numeric_tbl
   Oracle query: SELECT /*f53d3094ec8a34e8cfb5742e1b85c53a*/ "VALUE1", "STR1" FROM  "NUMERIC_TBL" ORDER BY length("STR1") ASC NULLS LAST
(2 rows)

-- select length with order by (result)
--Testcase 330:
SELECT value1, length(str1) FROM numeric_tbl ORDER BY length(str1);
 value1 | length 
--------+--------
    0.1 |      9
    0.2 |      9
    3.3 |      9
    1.1 |      9
    2.2 |      9
    0.3 |      9
(6 rows)

-- select length with order by index (result)
--Testcase 331:
SELECT value1, length(str1) FROM numeric_tbl ORDER BY 2,1;
 value1 | length 
--------+--------
    0.1 |      9
    0.2 |      9
    0.3 |      9
    1.1 |      9
    2.2 |      9
    3.3 |      9
(6 rows)

-- select length with order by index (result)
--Testcase 332:
SELECT value1, length(str1) FROM numeric_tbl ORDER BY 1,2;
 value1 | length 
--------+--------
    0.1 |      9
    0.2 |      9
    0.3 |      9
    1.1 |      9
    2.2 |      9
    3.3 |      9
(6 rows)

-- select length with group by (EXPLAIN (COSTS OFF))
--Testcase 333:
EXPLAIN (COSTS OFF)
SELECT count(value1), length(str1) FROM numeric_tbl GROUP BY length(str1);
                                                                QUERY PLAN                                                                 
-------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan
   Oracle query: SELECT /*c0460b23a6f9fd3ef84de6117887e4b1*/ count("VALUE1"), length("STR1") FROM  "NUMERIC_TBL" GROUP BY (length("STR1"))
(2 rows)

-- select length with group by (result)
--Testcase 334:
SELECT count(value1), length(str1) FROM numeric_tbl GROUP BY length(str1);
 count | length 
-------+--------
     6 |      9
(1 row)

-- select length with group by index (result)
--Testcase 335:
SELECT value1, length(str1) FROM numeric_tbl GROUP BY 2,1;
 value1 | length 
--------+--------
    0.1 |      9
    0.2 |      9
    0.3 |      9
    1.1 |      9
    2.2 |      9
    3.3 |      9
(6 rows)

-- select length with group by having (EXPLAIN (COSTS OFF))
--Testcase 336:
EXPLAIN (COSTS OFF)
SELECT count(value1), length(str1) FROM numeric_tbl GROUP BY length(str1), str1 HAVING length(str1) IS NOT NULL;
                                                                                          QUERY PLAN                                                                                          
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan
   Oracle query: SELECT /*f7b00065931326ad0cd86cca3c1b58e7*/ count("VALUE1"), length("STR1"), "STR1" FROM  "NUMERIC_TBL" WHERE (length("STR1") IS NOT NULL) GROUP BY (length("STR1")), "STR1"
(2 rows)

-- select length with group by having (result)
--Testcase 337:
SELECT count(value1), length(str1) FROM numeric_tbl GROUP BY length(str1), str1 HAVING length(str1) IS NOT NULL;
 count | length 
-------+--------
     6 |      9
(1 row)

-- select length with group by index having (result)
--Testcase 338:
SELECT value1, length(str1) FROM numeric_tbl GROUP BY 1,2 HAVING value1 > 1;
 value1 | length 
--------+--------
    1.1 |      9
    2.2 |      9
    3.3 |      9
(3 rows)

-- ===============================================================================
-- test lower()
-- ===============================================================================
-- select lower (stub function, EXPLAIN (COSTS OFF))
--Testcase 339:
EXPLAIN (COSTS OFF)
SELECT lower(str1), lower(str2) FROM numeric_tbl;
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Foreign Scan on numeric_tbl
   Oracle query: SELECT /*b5e3ceef645293200ae015baf22fc9f6*/ "STR1", "STR2" FROM  "NUMERIC_TBL"
(2 rows)

-- select lower (stub function, result)
--Testcase 340:
SELECT lower(str1), lower(str2) FROM numeric_tbl;
   lower   |   lower   
-----------+-----------
 ---xyz--- |    abc   
 ---xyz--- |    abc   
 ---xyz--- |    abc   
 ---xyz--- |    abc   
 ---xyz--- |    abc   
 ---xyz--- |    abc   
(6 rows)

-- select lower (stub function, not pushdown constraints, EXPLAIN (COSTS OFF))
--Testcase 341:
EXPLAIN (COSTS OFF)
SELECT value1, lower(str1) FROM numeric_tbl WHERE to_hex(value2) = '64';
                                                 QUERY PLAN                                                 
------------------------------------------------------------------------------------------------------------
 Foreign Scan on numeric_tbl
   Filter: (to_hex(value2) = '64'::text)
   Oracle query: SELECT /*635e8508e85d53b1d7588d2faf1d9dce*/ "VALUE1", "VALUE2", "STR1" FROM  "NUMERIC_TBL"
(3 rows)

-- select lower (stub function, not pushdown constraints, result)
--Testcase 342:
SELECT value1, lower(str1) FROM numeric_tbl WHERE to_hex(value2) = '64';
 value1 |   lower   
--------+-----------
    0.1 | ---xyz---
    0.2 | ---xyz---
    0.3 | ---xyz---
(3 rows)

-- select lower (stub function, pushdown constraints, EXPLAIN (COSTS OFF))
--Testcase 343:
EXPLAIN (COSTS OFF)
SELECT value1, lower(str1) FROM numeric_tbl WHERE value2 != 200;
                                                        QUERY PLAN                                                        
--------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on numeric_tbl
   Oracle query: SELECT /*7f396d83a07a7d806e4ce7625f7371d9*/ "VALUE1", "STR1" FROM  "NUMERIC_TBL" WHERE ("VALUE2" <> 200)
(2 rows)

-- select lower (stub function, pushdown constraints, result)
--Testcase 344:
SELECT value1, lower(str1) FROM numeric_tbl WHERE value2 != 200;
 value1 |   lower   
--------+-----------
    0.1 | ---xyz---
    0.2 | ---xyz---
    0.3 | ---xyz---
(3 rows)

-- select lower with non pushdown func and explicit constant (EXPLAIN (COSTS OFF))
--Testcase 345:
EXPLAIN (COSTS OFF)
SELECT lower(str1), pi(), 4.1 FROM numeric_tbl;
                                       QUERY PLAN                                       
----------------------------------------------------------------------------------------
 Foreign Scan on numeric_tbl
   Oracle query: SELECT /*b0f206a14da49f63f52c0cf84e67a466*/ "STR1" FROM  "NUMERIC_TBL"
(2 rows)

-- select lower with non pushdown func and explicit constant (result)
--Testcase 346:
SELECT lower(str1), pi(), 4.1 FROM numeric_tbl;
   lower   |        pi         | ?column? 
-----------+-------------------+----------
 ---xyz--- | 3.141592653589793 |      4.1
 ---xyz--- | 3.141592653589793 |      4.1
 ---xyz--- | 3.141592653589793 |      4.1
 ---xyz--- | 3.141592653589793 |      4.1
 ---xyz--- | 3.141592653589793 |      4.1
 ---xyz--- | 3.141592653589793 |      4.1
(6 rows)

-- select lower with order by (EXPLAIN (COSTS OFF))
--Testcase 347:
EXPLAIN (COSTS OFF)
SELECT value1, lower(str1) FROM numeric_tbl ORDER BY lower(str1);
                                               QUERY PLAN                                               
--------------------------------------------------------------------------------------------------------
 Sort
   Sort Key: (lower(str1))
   ->  Foreign Scan on numeric_tbl
         Oracle query: SELECT /*adc4aceb6c6364fd12224d4c1ad89a55*/ "VALUE1", "STR1" FROM  "NUMERIC_TBL"
(4 rows)

-- select lower with order by (result)
--Testcase 348:
SELECT value1, lower(str1) FROM numeric_tbl ORDER BY lower(str1);
 value1 |   lower   
--------+-----------
    0.1 | ---xyz---
    0.2 | ---xyz---
    0.3 | ---xyz---
    1.1 | ---xyz---
    2.2 | ---xyz---
    3.3 | ---xyz---
(6 rows)

-- select lower with order by index (result)
--Testcase 349:
SELECT value1, lower(str1) FROM numeric_tbl ORDER BY 2,1;
 value1 |   lower   
--------+-----------
    0.1 | ---xyz---
    0.2 | ---xyz---
    0.3 | ---xyz---
    1.1 | ---xyz---
    2.2 | ---xyz---
    3.3 | ---xyz---
(6 rows)

-- select lower with order by index (result)
--Testcase 350:
SELECT value1, lower(str1) FROM numeric_tbl ORDER BY 1,2;
 value1 |   lower   
--------+-----------
    0.1 | ---xyz---
    0.2 | ---xyz---
    0.3 | ---xyz---
    1.1 | ---xyz---
    2.2 | ---xyz---
    3.3 | ---xyz---
(6 rows)

-- select lower with group by (EXPLAIN (COSTS OFF))
--Testcase 351:
EXPLAIN (COSTS OFF)
SELECT count(value1), lower(str1) FROM numeric_tbl GROUP BY lower(str1);
                                                               QUERY PLAN                                                                
-----------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan
   Oracle query: SELECT /*577b6c8404fdcdfde44d1c8c74956b65*/ count("VALUE1"), lower("STR1") FROM  "NUMERIC_TBL" GROUP BY (lower("STR1"))
(2 rows)

-- select lower with group by (result)
--Testcase 352:
SELECT count(value1), lower(str1) FROM numeric_tbl GROUP BY lower(str1);
 count |   lower   
-------+-----------
     6 | ---xyz---
(1 row)

-- select lower with group by index (result)
--Testcase 353:
SELECT value1, lower(str1) FROM numeric_tbl GROUP BY 2,1;
 value1 |   lower   
--------+-----------
    0.1 | ---xyz---
    0.2 | ---xyz---
    0.3 | ---xyz---
    1.1 | ---xyz---
    2.2 | ---xyz---
    3.3 | ---xyz---
(6 rows)

-- select lower with group by having (EXPLAIN (COSTS OFF))
--Testcase 354:
EXPLAIN (COSTS OFF)
SELECT count(value1), lower(str1) FROM numeric_tbl GROUP BY lower(str1), str1 HAVING lower(str1) IS NOT NULL;
                                                                                        QUERY PLAN                                                                                         
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan
   Oracle query: SELECT /*f7673a2f43a55a43154f2ff689734298*/ count("VALUE1"), lower("STR1"), "STR1" FROM  "NUMERIC_TBL" WHERE (lower("STR1") IS NOT NULL) GROUP BY (lower("STR1")), "STR1"
(2 rows)

-- select lower with group by having (result)
--Testcase 355:
SELECT count(value1), lower(str1) FROM numeric_tbl GROUP BY lower(str1), str1 HAVING lower(str1) IS NOT NULL;
 count |   lower   
-------+-----------
     6 | ---xyz---
(1 row)

-- select lower with group by index having (result)
--Testcase 356:
SELECT value1, lower(str1) FROM numeric_tbl GROUP BY 1,2 HAVING value1 > 1;
 value1 |   lower   
--------+-----------
    1.1 | ---xyz---
    2.2 | ---xyz---
    3.3 | ---xyz---
(3 rows)

-- ===============================================================================
-- test lpad()
-- ===============================================================================
-- select lpad (stub function, EXPLAIN (COSTS OFF))
--Testcase 357:
EXPLAIN (COSTS OFF)
SELECT lpad(str1, 4, 'ABCD'), lpad(str2, 4, 'ABCD') FROM numeric_tbl;
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Foreign Scan on numeric_tbl
   Oracle query: SELECT /*b5e3ceef645293200ae015baf22fc9f6*/ "STR1", "STR2" FROM  "NUMERIC_TBL"
(2 rows)

-- select lpad (stub function, result)
--Testcase 358:
SELECT lpad(str1, 4, 'ABCD'), lpad(str2, 4, 'ABCD') FROM numeric_tbl;
 lpad | lpad 
------+------
 ---X |    a
 ---X |    a
 ---X |    a
 ---X |    a
 ---X |    a
 ---X |    a
(6 rows)

-- select lpad (stub function, not pushdown constraints, EXPLAIN (COSTS OFF))
--Testcase 359:
EXPLAIN (COSTS OFF)
SELECT value1, lpad(str1, 4, 'ABCD') FROM numeric_tbl WHERE to_hex(value2) = '64';
                                                 QUERY PLAN                                                 
------------------------------------------------------------------------------------------------------------
 Foreign Scan on numeric_tbl
   Filter: (to_hex(value2) = '64'::text)
   Oracle query: SELECT /*635e8508e85d53b1d7588d2faf1d9dce*/ "VALUE1", "VALUE2", "STR1" FROM  "NUMERIC_TBL"
(3 rows)

-- select lpad (stub function, not pushdown constraints, result)
--Testcase 360:
SELECT value1, lpad(str1, 4, 'ABCD') FROM numeric_tbl WHERE to_hex(value2) = '64';
 value1 | lpad 
--------+------
    0.1 | ---X
    0.2 | ---X
    0.3 | ---X
(3 rows)

-- select lpad (stub function, pushdown constraints, EXPLAIN (COSTS OFF))
--Testcase 361:
EXPLAIN (COSTS OFF)
SELECT value1, lpad(str1, 4, 'ABCD') FROM numeric_tbl WHERE value2 != 200;
                                                        QUERY PLAN                                                        
--------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on numeric_tbl
   Oracle query: SELECT /*7f396d83a07a7d806e4ce7625f7371d9*/ "VALUE1", "STR1" FROM  "NUMERIC_TBL" WHERE ("VALUE2" <> 200)
(2 rows)

-- select lpad (stub function, pushdown constraints, result)
--Testcase 362:
SELECT value1, lpad(str1, 4, 'ABCD') FROM numeric_tbl WHERE value2 != 200;
 value1 | lpad 
--------+------
    0.1 | ---X
    0.2 | ---X
    0.3 | ---X
(3 rows)

-- select lpad with non pushdown func and explicit constant (EXPLAIN (COSTS OFF))
--Testcase 363:
EXPLAIN (COSTS OFF)
SELECT lpad(str1, 4, 'ABCD'), pi(), 4.1 FROM numeric_tbl;
                                       QUERY PLAN                                       
----------------------------------------------------------------------------------------
 Foreign Scan on numeric_tbl
   Oracle query: SELECT /*b0f206a14da49f63f52c0cf84e67a466*/ "STR1" FROM  "NUMERIC_TBL"
(2 rows)

-- select lpad with non pushdown func and explicit constant (result)
--Testcase 364:
SELECT lpad(str1, 4, 'ABCD'), pi(), 4.1 FROM numeric_tbl;
 lpad |        pi         | ?column? 
------+-------------------+----------
 ---X | 3.141592653589793 |      4.1
 ---X | 3.141592653589793 |      4.1
 ---X | 3.141592653589793 |      4.1
 ---X | 3.141592653589793 |      4.1
 ---X | 3.141592653589793 |      4.1
 ---X | 3.141592653589793 |      4.1
(6 rows)

-- select lpad with order by (EXPLAIN (COSTS OFF))
--Testcase 365:
EXPLAIN (COSTS OFF)
SELECT value1, lpad(str1, 4, 'ABCD') FROM numeric_tbl ORDER BY lpad(str1, 4, 'ABCD');
                                               QUERY PLAN                                               
--------------------------------------------------------------------------------------------------------
 Sort
   Sort Key: (lpad(str1, 4, 'ABCD'::text))
   ->  Foreign Scan on numeric_tbl
         Oracle query: SELECT /*adc4aceb6c6364fd12224d4c1ad89a55*/ "VALUE1", "STR1" FROM  "NUMERIC_TBL"
(4 rows)

-- select lpad with order by (result)
--Testcase 366:
SELECT value1, lpad(str1, 4, 'ABCD') FROM numeric_tbl ORDER BY lpad(str1, 4, 'ABCD');
 value1 | lpad 
--------+------
    0.1 | ---X
    0.2 | ---X
    0.3 | ---X
    1.1 | ---X
    2.2 | ---X
    3.3 | ---X
(6 rows)

-- select lpad with order by index (result)
--Testcase 367:
SELECT value1, lpad(str1, 4, 'ABCD') FROM numeric_tbl ORDER BY 2,1;
 value1 | lpad 
--------+------
    0.1 | ---X
    0.2 | ---X
    0.3 | ---X
    1.1 | ---X
    2.2 | ---X
    3.3 | ---X
(6 rows)

-- select lpad with order by index (result)
--Testcase 368:
SELECT value1, lpad(str1, 4, 'ABCD') FROM numeric_tbl ORDER BY 1,2;
 value1 | lpad 
--------+------
    0.1 | ---X
    0.2 | ---X
    0.3 | ---X
    1.1 | ---X
    2.2 | ---X
    3.3 | ---X
(6 rows)

-- select lpad with group by (EXPLAIN (COSTS OFF))
--Testcase 369:
EXPLAIN (COSTS OFF)
SELECT count(value1), lpad(str1, 4, 'ABCD') FROM numeric_tbl GROUP BY lpad(str1, 4, 'ABCD');
                                                                         QUERY PLAN                                                                          
-------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan
   Oracle query: SELECT /*19e7b76f838de2445bfb45c4838af030*/ count("VALUE1"), lpad("STR1", 4, 'ABCD') FROM  "NUMERIC_TBL" GROUP BY (lpad("STR1", 4, 'ABCD'))
(2 rows)

-- select lpad with group by (result)
--Testcase 370:
SELECT count(value1), lpad(str1, 4, 'ABCD') FROM numeric_tbl GROUP BY lpad(str1, 4, 'ABCD');
 count | lpad 
-------+------
     6 | ---X
(1 row)

-- select lpad with group by index (result)
--Testcase 371:
SELECT value1, lpad(str1, 4, 'ABCD') FROM numeric_tbl GROUP BY 2,1;
 value1 | lpad 
--------+------
    0.1 | ---X
    0.2 | ---X
    0.3 | ---X
    1.1 | ---X
    2.2 | ---X
    3.3 | ---X
(6 rows)

-- select lpad with group by having (EXPLAIN (COSTS OFF))
--Testcase 372:
EXPLAIN (COSTS OFF)
SELECT count(value1), lpad(str1, 4, 'ABCD') FROM numeric_tbl GROUP BY lpad(str1, 4, 'ABCD'), str1 HAVING lpad(str1, 4, 'ABCD') IS NOT NULL;
                                                                                                       QUERY PLAN                                                                                                        
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan
   Oracle query: SELECT /*882a2aad764ea5bc9955e3eafc6fd48f*/ count("VALUE1"), lpad("STR1", 4, 'ABCD'), "STR1" FROM  "NUMERIC_TBL" WHERE (lpad("STR1", 4, 'ABCD') IS NOT NULL) GROUP BY (lpad("STR1", 4, 'ABCD')), "STR1"
(2 rows)

-- select lpad with group by having (result)
--Testcase 373:
SELECT count(value1), lpad(str1, 4, 'ABCD') FROM numeric_tbl GROUP BY lpad(str1, 4, 'ABCD'), str1 HAVING lpad(str1, 4, 'ABCD') IS NOT NULL;
 count | lpad 
-------+------
     6 | ---X
(1 row)

-- select lpad with group by index having (result)
--Testcase 374:
SELECT value1, lpad(str1, 4, 'ABCD') FROM numeric_tbl GROUP BY 1,2 HAVING value1 > 1;
 value1 | lpad 
--------+------
    1.1 | ---X
    2.2 | ---X
    3.3 | ---X
(3 rows)

-- ===============================================================================
-- test ltrim()
-- ===============================================================================
-- select ltrim (stub function, EXPLAIN (COSTS OFF))
--Testcase 375:
EXPLAIN (COSTS OFF)
SELECT ltrim(str1), ltrim(str2, ' ') FROM numeric_tbl;
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Foreign Scan on numeric_tbl
   Oracle query: SELECT /*b5e3ceef645293200ae015baf22fc9f6*/ "STR1", "STR2" FROM  "NUMERIC_TBL"
(2 rows)

-- select ltrim (stub function, result)
--Testcase 376:
SELECT ltrim(str1), ltrim(str2, ' ') FROM numeric_tbl;
   ltrim   | ltrim  
-----------+--------
 ---XYZ--- | abc   
 ---XYZ--- | abc   
 ---XYZ--- | abc   
 ---XYZ--- | abc   
 ---XYZ--- | abc   
 ---XYZ--- | abc   
(6 rows)

-- select ltrim (stub function, not pushdown constraints, EXPLAIN (COSTS OFF))
--Testcase 377:
EXPLAIN (COSTS OFF)
SELECT value1, ltrim(str1, '-') FROM numeric_tbl WHERE to_hex(value2) = '64';
                                                 QUERY PLAN                                                 
------------------------------------------------------------------------------------------------------------
 Foreign Scan on numeric_tbl
   Filter: (to_hex(value2) = '64'::text)
   Oracle query: SELECT /*635e8508e85d53b1d7588d2faf1d9dce*/ "VALUE1", "VALUE2", "STR1" FROM  "NUMERIC_TBL"
(3 rows)

-- select ltrim (stub function, not pushdown constraints, result)
--Testcase 378:
SELECT value1, ltrim(str1, '-') FROM numeric_tbl WHERE to_hex(value2) = '64';
 value1 | ltrim  
--------+--------
    0.1 | XYZ---
    0.2 | XYZ---
    0.3 | XYZ---
(3 rows)

-- select ltrim (stub function, pushdown constraints, EXPLAIN (COSTS OFF))
--Testcase 379:
EXPLAIN (COSTS OFF)
SELECT value1, ltrim(str1, '-') FROM numeric_tbl WHERE value2 != 200;
                                                        QUERY PLAN                                                        
--------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on numeric_tbl
   Oracle query: SELECT /*7f396d83a07a7d806e4ce7625f7371d9*/ "VALUE1", "STR1" FROM  "NUMERIC_TBL" WHERE ("VALUE2" <> 200)
(2 rows)

-- select ltrim (stub function, pushdown constraints, result)
--Testcase 380:
SELECT value1, ltrim(str1, '-') FROM numeric_tbl WHERE value2 != 200;
 value1 | ltrim  
--------+--------
    0.1 | XYZ---
    0.2 | XYZ---
    0.3 | XYZ---
(3 rows)

-- select ltrim with non pushdown func and explicit constant (EXPLAIN (COSTS OFF))
--Testcase 381:
EXPLAIN (COSTS OFF)
SELECT ltrim(str1, '-'), pi(), 4.1 FROM numeric_tbl;
                                       QUERY PLAN                                       
----------------------------------------------------------------------------------------
 Foreign Scan on numeric_tbl
   Oracle query: SELECT /*b0f206a14da49f63f52c0cf84e67a466*/ "STR1" FROM  "NUMERIC_TBL"
(2 rows)

-- select ltrim with non pushdown func and explicit constant (result)
--Testcase 382:
SELECT ltrim(str1, '-'), pi(), 4.1 FROM numeric_tbl;
 ltrim  |        pi         | ?column? 
--------+-------------------+----------
 XYZ--- | 3.141592653589793 |      4.1
 XYZ--- | 3.141592653589793 |      4.1
 XYZ--- | 3.141592653589793 |      4.1
 XYZ--- | 3.141592653589793 |      4.1
 XYZ--- | 3.141592653589793 |      4.1
 XYZ--- | 3.141592653589793 |      4.1
(6 rows)

-- select ltrim with order by (EXPLAIN (COSTS OFF))
--Testcase 383:
EXPLAIN (COSTS OFF)
SELECT value1, ltrim(str1, '-') FROM numeric_tbl ORDER BY ltrim(str1, '-');
                                               QUERY PLAN                                               
--------------------------------------------------------------------------------------------------------
 Sort
   Sort Key: (ltrim(str1, '-'::text))
   ->  Foreign Scan on numeric_tbl
         Oracle query: SELECT /*adc4aceb6c6364fd12224d4c1ad89a55*/ "VALUE1", "STR1" FROM  "NUMERIC_TBL"
(4 rows)

-- select ltrim with order by (result)
--Testcase 384:
SELECT value1, ltrim(str1, '-') FROM numeric_tbl ORDER BY ltrim(str1, '-');
 value1 | ltrim  
--------+--------
    0.1 | XYZ---
    0.2 | XYZ---
    0.3 | XYZ---
    1.1 | XYZ---
    2.2 | XYZ---
    3.3 | XYZ---
(6 rows)

-- select ltrim with order by index (result)
--Testcase 385:
SELECT value1, ltrim(str1, '-') FROM numeric_tbl ORDER BY 2,1;
 value1 | ltrim  
--------+--------
    0.1 | XYZ---
    0.2 | XYZ---
    0.3 | XYZ---
    1.1 | XYZ---
    2.2 | XYZ---
    3.3 | XYZ---
(6 rows)

-- select ltrim with order by index (result)
--Testcase 386:
SELECT value1, ltrim(str1, '-') FROM numeric_tbl ORDER BY 1,2;
 value1 | ltrim  
--------+--------
    0.1 | XYZ---
    0.2 | XYZ---
    0.3 | XYZ---
    1.1 | XYZ---
    2.2 | XYZ---
    3.3 | XYZ---
(6 rows)

-- select ltrim with group by (EXPLAIN (COSTS OFF))
--Testcase 387:
EXPLAIN (COSTS OFF)
SELECT count(value1), ltrim(str1, '-') FROM numeric_tbl GROUP BY ltrim(str1, '-');
                                                                    QUERY PLAN                                                                     
---------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan
   Oracle query: SELECT /*60ddd0636f5bca4319ffff793b4ac345*/ count("VALUE1"), ltrim("STR1", '-') FROM  "NUMERIC_TBL" GROUP BY (ltrim("STR1", '-'))
(2 rows)

-- select ltrim with group by (result)
--Testcase 388:
SELECT count(value1), ltrim(str1, '-') FROM numeric_tbl GROUP BY ltrim(str1, '-');
 count | ltrim  
-------+--------
     6 | XYZ---
(1 row)

-- select ltrim with group by index (result)
--Testcase 389:
SELECT value1, ltrim(str1, '-') FROM numeric_tbl GROUP BY 2,1;
 value1 | ltrim  
--------+--------
    0.1 | XYZ---
    0.2 | XYZ---
    0.3 | XYZ---
    1.1 | XYZ---
    2.2 | XYZ---
    3.3 | XYZ---
(6 rows)

-- select ltrim with group by having (EXPLAIN (COSTS OFF))
--Testcase 390:
EXPLAIN (COSTS OFF)
SELECT count(value1), ltrim(str1, '-') FROM numeric_tbl GROUP BY ltrim(str1, '-'), str2 HAVING ltrim(str1, '-') IS NOT NULL;
                                                                                                QUERY PLAN                                                                                                
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan
   Oracle query: SELECT /*f4980bd2623e45507aece885908058a6*/ count("VALUE1"), ltrim("STR1", '-'), "STR2" FROM  "NUMERIC_TBL" WHERE (ltrim("STR1", '-') IS NOT NULL) GROUP BY (ltrim("STR1", '-')), "STR2"
(2 rows)

-- select ltrim with group by having (result)
--Testcase 391:
SELECT count(value1), ltrim(str1, '-') FROM numeric_tbl GROUP BY ltrim(str1, '-'), str2 HAVING ltrim(str1, '-') IS NOT NULL;
 count | ltrim  
-------+--------
     6 | XYZ---
(1 row)

-- select ltrim with group by index having (result)
--Testcase 392:
SELECT value1, ltrim(str2) FROM numeric_tbl GROUP BY 1,2 HAVING value1 > 1;
 value1 | ltrim  
--------+--------
    1.1 | abc   
    2.2 | abc   
    3.3 | abc   
(3 rows)

-- ===============================================================================
-- test mod()
-- ===============================================================================
-- select mod (builtin function, EXPLAIN (COSTS OFF))
--Testcase 393:
EXPLAIN (COSTS OFF)
SELECT value1, mod(value1::numeric, 2), mod(value2::numeric, 2), mod(value3::numeric, 2), mod(value4::numeric, 2), mod(5, 2) FROM numeric_tbl;
                                                       QUERY PLAN                                                       
------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on numeric_tbl
   Oracle query: SELECT /*3a3e9ce1642025dfd6451e15cf1fadd9*/ "VALUE1", "VALUE2", "VALUE3", "VALUE4" FROM  "NUMERIC_TBL"
(2 rows)

-- select mod (builtin function, result)
--Testcase 394:
SELECT value1, mod(value1::numeric, 2), mod(value2::numeric, 2), mod(value3::numeric, 2), mod(value4::numeric, 2), mod(5, 2) FROM numeric_tbl;
 value1 | mod | mod | mod  | mod | mod 
--------+-----+-----+------+-----+-----
    0.1 | 0.1 |   0 | -0.1 |   0 |   1
    0.2 | 0.2 |   0 | -0.2 |   0 |   1
    0.3 | 0.3 |   0 | -0.3 |   0 |   1
    1.1 | 1.1 |   0 | -1.1 |   0 |   1
    2.2 | 0.2 |   0 | -0.2 |   0 |   1
    3.3 | 1.3 |   0 | -1.3 |   0 |   1
(6 rows)

-- select mod (builtin function, not pushdown constraints, EXPLAIN (COSTS OFF))
--Testcase 395:
EXPLAIN (COSTS OFF)
SELECT mod(value1::numeric, 2), mod(value2::numeric, 2), mod(value3::numeric, 2), mod(value4::numeric, 2), mod(5, 2) FROM numeric_tbl WHERE to_hex(value2) = '64';
                                                       QUERY PLAN                                                       
------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on numeric_tbl
   Filter: (to_hex(value2) = '64'::text)
   Oracle query: SELECT /*3a3e9ce1642025dfd6451e15cf1fadd9*/ "VALUE1", "VALUE2", "VALUE3", "VALUE4" FROM  "NUMERIC_TBL"
(3 rows)

-- select mod (builtin function, not pushdown constraints, result)
--Testcase 396:
SELECT mod(value1::numeric, 2), mod(value2::numeric, 2), mod(value3::numeric, 2), mod(value4::numeric, 2), mod(5, 2) FROM numeric_tbl WHERE to_hex(value2) = '64';
 mod | mod | mod  | mod | mod 
-----+-----+------+-----+-----
 0.1 |   0 | -0.1 |   0 |   1
 0.2 |   0 | -0.2 |   0 |   1
 0.3 |   0 | -0.3 |   0 |   1
(3 rows)

-- select mod (builtin function, pushdown constraints, EXPLAIN (COSTS OFF))
--Testcase 397:
EXPLAIN (COSTS OFF)
SELECT mod(value1::numeric, 2), mod(value2::numeric, 2), mod(value3::numeric, 2), mod(value4::numeric, 2), mod(5, 2) FROM numeric_tbl WHERE value2 != 200;
                                                                   QUERY PLAN                                                                   
------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on numeric_tbl
   Oracle query: SELECT /*ee255a287dc590cc2e754740ed3cd0e9*/ "VALUE1", "VALUE2", "VALUE3", "VALUE4" FROM  "NUMERIC_TBL" WHERE ("VALUE2" <> 200)
(2 rows)

-- select mod (builtin function, pushdown constraints, result)
--Testcase 398:
SELECT mod(value1::numeric, 2), mod(value2::numeric, 2), mod(value3::numeric, 2), mod(value4::numeric, 2), mod(5, 2) FROM numeric_tbl WHERE value2 != 200;
 mod | mod | mod  | mod | mod 
-----+-----+------+-----+-----
 0.1 |   0 | -0.1 |   0 |   1
 0.2 |   0 | -0.2 |   0 |   1
 0.3 |   0 | -0.3 |   0 |   1
(3 rows)

-- select mod (builtin function, mod in constraints, EXPLAIN (COSTS OFF))
--Testcase 399:
EXPLAIN (COSTS OFF)
SELECT value1, mod(value1::numeric, 2), mod(value2::numeric, 2), mod(value3::numeric, 2), mod(value4::numeric, 2), mod(5, 2) FROM numeric_tbl WHERE mod(value1::numeric, 2) != 1;
                                                       QUERY PLAN                                                       
------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on numeric_tbl
   Filter: (mod((value1)::numeric, '2'::numeric) <> '1'::numeric)
   Oracle query: SELECT /*3a3e9ce1642025dfd6451e15cf1fadd9*/ "VALUE1", "VALUE2", "VALUE3", "VALUE4" FROM  "NUMERIC_TBL"
(3 rows)

-- select mod (builtin function, mod in constraints, result)
--Testcase 400:
SELECT value1, mod(value1::numeric, 2), mod(value2::numeric, 2), mod(value3::numeric, 2), mod(value4::numeric, 2), mod(5, 2) FROM numeric_tbl WHERE mod(value1::numeric, 2) != 1;
 value1 | mod | mod | mod  | mod | mod 
--------+-----+-----+------+-----+-----
    0.1 | 0.1 |   0 | -0.1 |   0 |   1
    0.2 | 0.2 |   0 | -0.2 |   0 |   1
    0.3 | 0.3 |   0 | -0.3 |   0 |   1
    1.1 | 1.1 |   0 | -1.1 |   0 |   1
    2.2 | 0.2 |   0 | -0.2 |   0 |   1
    3.3 | 1.3 |   0 | -1.3 |   0 |   1
(6 rows)

-- select mod (builtin function, mod in constraints, EXPLAIN (COSTS OFF))
--Testcase 401:
EXPLAIN (COSTS OFF)
SELECT mod(value1::numeric, 2), mod(value2::numeric, 2), mod(value3::numeric, 2), mod(value4::numeric, 2), mod(5, 2) FROM numeric_tbl WHERE mod(5, 2) > value1;
                                                                 QUERY PLAN                                                                  
---------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on numeric_tbl
   Oracle query: SELECT /*886c3fbac6910e2aa6cbd3ac40b5674c*/ "VALUE1", "VALUE2", "VALUE3", "VALUE4" FROM  "NUMERIC_TBL" WHERE (1 > "VALUE1")
(2 rows)

-- select mod (builtin function, mod in constraints, result)
--Testcase 402:
SELECT mod(value1::numeric, 2), mod(value2::numeric, 2), mod(value3::numeric, 2), mod(value4::numeric, 2), mod(5, 2) FROM numeric_tbl WHERE mod(5, 2) > value1;
 mod | mod | mod  | mod | mod 
-----+-----+------+-----+-----
 0.1 |   0 | -0.1 |   0 |   1
 0.2 |   0 | -0.2 |   0 |   1
 0.3 |   0 | -0.3 |   0 |   1
(3 rows)

-- select mod as nest function with agg (pushdown, EXPLAIN (COSTS OFF))
--Testcase 403:
EXPLAIN (COSTS OFF)
SELECT sum(value3),mod(sum(value3)::numeric, 2) FROM numeric_tbl;
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Aggregate
   ->  Foreign Scan on numeric_tbl
         Oracle query: SELECT /*b3d9f3348edc9fa53b73cdc5d271b426*/ "VALUE3" FROM  "NUMERIC_TBL"
(3 rows)

-- select mod as nest function with agg (pushdown, result)
--Testcase 404:
SELECT sum(value3),mod(sum(value3)::numeric, 2) FROM numeric_tbl;
 sum  | mod  
------+------
 -7.2 | -1.2
(1 row)

-- select mod as nest with log2 (pushdown, EXPLAIN (COSTS OFF))
--Testcase 405:
EXPLAIN (COSTS OFF)
SELECT value1, mod(log(2, value2)::numeric, 2) FROM numeric_tbl;
                                             QUERY PLAN                                             
----------------------------------------------------------------------------------------------------
 Foreign Scan on numeric_tbl
   Oracle query: SELECT /*c35678a687054ae56f3a83ca5558704c*/ "VALUE1", "VALUE2" FROM  "NUMERIC_TBL"
(2 rows)

-- select mod as nest with log2 (pushdown, result)
--Testcase 406:
SELECT value1, mod(log(2, value2)::numeric, 2) FROM numeric_tbl;
 value1 |        mod         
--------+--------------------
    0.1 | 0.6438561897747247
    0.2 | 0.6438561897747247
    0.3 | 0.6438561897747247
    1.1 | 1.6438561897747247
    2.2 | 1.6438561897747247
    3.3 | 1.6438561897747247
(6 rows)

-- select mod with non pushdown func and explicit constant (EXPLAIN (COSTS OFF))
--Testcase 407:
EXPLAIN (COSTS OFF)
SELECT value1, mod(value3::numeric, 2), pi(), 4.1 FROM numeric_tbl;
                                             QUERY PLAN                                             
----------------------------------------------------------------------------------------------------
 Foreign Scan on numeric_tbl
   Oracle query: SELECT /*5373ce45d4cdd3cd948843baa7cda0cc*/ "VALUE1", "VALUE3" FROM  "NUMERIC_TBL"
(2 rows)

-- select mod with non pushdown func and explicit constant (result)
--Testcase 408:
SELECT value1, mod(value3::numeric, 2), pi(), 4.1 FROM numeric_tbl;
 value1 | mod  |        pi         | ?column? 
--------+------+-------------------+----------
    0.1 | -0.1 | 3.141592653589793 |      4.1
    0.2 | -0.2 | 3.141592653589793 |      4.1
    0.3 | -0.3 | 3.141592653589793 |      4.1
    1.1 | -1.1 | 3.141592653589793 |      4.1
    2.2 | -0.2 | 3.141592653589793 |      4.1
    3.3 | -1.3 | 3.141592653589793 |      4.1
(6 rows)

-- select mod with order by (EXPLAIN (COSTS OFF))
--Testcase 409:
EXPLAIN (COSTS OFF)
SELECT value1, mod((1-value3)::numeric, 2) FROM numeric_tbl ORDER BY mod((1-value3)::numeric, 2);
                                                QUERY PLAN                                                
----------------------------------------------------------------------------------------------------------
 Sort
   Sort Key: (mod((('1'::double precision - value3))::numeric, '2'::numeric))
   ->  Foreign Scan on numeric_tbl
         Oracle query: SELECT /*5373ce45d4cdd3cd948843baa7cda0cc*/ "VALUE1", "VALUE3" FROM  "NUMERIC_TBL"
(4 rows)

-- select mod with order by (result)
--Testcase 410:
SELECT value1, mod((1-value3)::numeric, 2) FROM numeric_tbl ORDER BY mod((1-value3)::numeric, 2);
 value1 | mod 
--------+-----
    1.1 | 0.1
    3.3 | 0.3
    0.1 | 1.1
    0.2 | 1.2
    2.2 | 1.2
    0.3 | 1.3
(6 rows)

-- select mod with order by index (result)
--Testcase 411:
SELECT value1, mod((1-value3)::numeric, 2) FROM numeric_tbl ORDER BY 2,1;
 value1 | mod 
--------+-----
    1.1 | 0.1
    3.3 | 0.3
    0.1 | 1.1
    0.2 | 1.2
    2.2 | 1.2
    0.3 | 1.3
(6 rows)

-- select mod with order by index (result)
--Testcase 412:
SELECT value1, mod((1-value3)::numeric, 2) FROM numeric_tbl ORDER BY 1,2;
 value1 | mod 
--------+-----
    0.1 | 1.1
    0.2 | 1.2
    0.3 | 1.3
    1.1 | 0.1
    2.2 | 1.2
    3.3 | 0.3
(6 rows)

-- select mod with group by (EXPLAIN (COSTS OFF))
--Testcase 413:
EXPLAIN (COSTS OFF)
SELECT value1, mod((1-value3)::numeric, 2) FROM numeric_tbl GROUP BY value1, mod((1-value3)::numeric, 2);
                                                   QUERY PLAN                                                   
----------------------------------------------------------------------------------------------------------------
 Group
   Group Key: value1, (mod((('1'::double precision - value3))::numeric, '2'::numeric))
   ->  Sort
         Sort Key: value1, (mod((('1'::double precision - value3))::numeric, '2'::numeric))
         ->  Foreign Scan on numeric_tbl
               Oracle query: SELECT /*5373ce45d4cdd3cd948843baa7cda0cc*/ "VALUE1", "VALUE3" FROM  "NUMERIC_TBL"
(6 rows)

-- select mod with group by (result)
--Testcase 414:
SELECT value1, mod((1-value3)::numeric, 2) FROM numeric_tbl GROUP BY value1, mod((1-value3)::numeric, 2);
 value1 | mod 
--------+-----
    0.1 | 1.1
    0.2 | 1.2
    0.3 | 1.3
    1.1 | 0.1
    2.2 | 1.2
    3.3 | 0.3
(6 rows)

-- select mod with group by index (result)
--Testcase 415:
SELECT value1, mod((1-value3)::numeric, 2) FROM numeric_tbl GROUP BY 2,1 ORDER BY value1;
 value1 | mod 
--------+-----
    0.1 | 1.1
    0.2 | 1.2
    0.3 | 1.3
    1.1 | 0.1
    2.2 | 1.2
    3.3 | 0.3
(6 rows)

-- select mod with group by index (result)
--Testcase 416:
SELECT value1, mod((1-value3)::numeric, 2) FROM numeric_tbl GROUP BY 1,2;
 value1 | mod 
--------+-----
    0.1 | 1.1
    0.2 | 1.2
    0.3 | 1.3
    1.1 | 0.1
    2.2 | 1.2
    3.3 | 0.3
(6 rows)

-- select mod with group by having (EXPLAIN (COSTS OFF))
--Testcase 417:
EXPLAIN (COSTS OFF)
SELECT value1, mod((1-value3)::numeric, 2) FROM numeric_tbl GROUP BY value1, mod((1-value3)::numeric, 2) HAVING avg(value1) > 0;
                                                   QUERY PLAN                                                   
----------------------------------------------------------------------------------------------------------------
 GroupAggregate
   Group Key: value1, (mod((('1'::double precision - value3))::numeric, '2'::numeric))
   Filter: (avg(value1) > '0'::double precision)
   ->  Sort
         Sort Key: value1, (mod((('1'::double precision - value3))::numeric, '2'::numeric))
         ->  Foreign Scan on numeric_tbl
               Oracle query: SELECT /*5373ce45d4cdd3cd948843baa7cda0cc*/ "VALUE1", "VALUE3" FROM  "NUMERIC_TBL"
(7 rows)

-- select mod with group by having (result)
--Testcase 418:
SELECT value1, mod((1-value3)::numeric, 2) FROM numeric_tbl GROUP BY value1, mod((1-value3)::numeric, 2) HAVING avg(value1) > 0;
 value1 | mod 
--------+-----
    0.1 | 1.1
    0.2 | 1.2
    0.3 | 1.3
    1.1 | 0.1
    2.2 | 1.2
    3.3 | 0.3
(6 rows)

-- select mod with group by index having (result)
--Testcase 419:
SELECT value1, mod((1-value3)::numeric, 2) FROM numeric_tbl GROUP BY 1,2 HAVING value1 > 1;
 value1 | mod 
--------+-----
    1.1 | 0.1
    2.2 | 1.2
    3.3 | 0.3
(3 rows)

-- select mod and as
--Testcase 420:
SELECT value1, mod(value3::numeric, 2) as mod1 FROM numeric_tbl;
 value1 | mod1 
--------+------
    0.1 | -0.1
    0.2 | -0.2
    0.3 | -0.3
    1.1 | -1.1
    2.2 | -0.2
    3.3 | -1.3
(6 rows)

-- ===============================================================================
-- test octet_length()
-- ===============================================================================
-- select octet_length (stub function, EXPLAIN (COSTS OFF))
--Testcase 421:
EXPLAIN (COSTS OFF)
SELECT octet_length(str1), octet_length(str2) FROM numeric_tbl;
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Foreign Scan on numeric_tbl
   Oracle query: SELECT /*b5e3ceef645293200ae015baf22fc9f6*/ "STR1", "STR2" FROM  "NUMERIC_TBL"
(2 rows)

-- select octet_length (stub function, result)
--Testcase 422:
SELECT octet_length(str1), octet_length(str2) FROM numeric_tbl;
 octet_length | octet_length 
--------------+--------------
            9 |            9
            9 |            9
            9 |            9
            9 |            9
            9 |            9
            9 |            9
(6 rows)

-- select octet_length (stub function, not pushdown constraints, EXPLAIN (COSTS OFF))
--Testcase 423:
EXPLAIN (COSTS OFF)
SELECT value1, octet_length(str1) FROM numeric_tbl WHERE to_hex(value2) = '64';
                                                 QUERY PLAN                                                 
------------------------------------------------------------------------------------------------------------
 Foreign Scan on numeric_tbl
   Filter: (to_hex(value2) = '64'::text)
   Oracle query: SELECT /*635e8508e85d53b1d7588d2faf1d9dce*/ "VALUE1", "VALUE2", "STR1" FROM  "NUMERIC_TBL"
(3 rows)

-- select octet_length (stub function, not pushdown constraints, result)
--Testcase 424:
SELECT value1, octet_length(str1) FROM numeric_tbl WHERE to_hex(value2) = '64';
 value1 | octet_length 
--------+--------------
    0.1 |            9
    0.2 |            9
    0.3 |            9
(3 rows)

-- select octet_length (stub function, pushdown constraints, EXPLAIN (COSTS OFF))
--Testcase 425:
EXPLAIN (COSTS OFF)
SELECT value1, octet_length(str1) FROM numeric_tbl WHERE value2 != 200;
                                                        QUERY PLAN                                                        
--------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on numeric_tbl
   Oracle query: SELECT /*7f396d83a07a7d806e4ce7625f7371d9*/ "VALUE1", "STR1" FROM  "NUMERIC_TBL" WHERE ("VALUE2" <> 200)
(2 rows)

-- select octet_length (stub function, pushdown constraints, result)
--Testcase 426:
SELECT value1, octet_length(str1) FROM numeric_tbl WHERE value2 != 200;
 value1 | octet_length 
--------+--------------
    0.1 |            9
    0.2 |            9
    0.3 |            9
(3 rows)

-- select octet_length with non pushdown func and explicit constant (EXPLAIN (COSTS OFF))
--Testcase 427:
EXPLAIN (COSTS OFF)
SELECT octet_length(str1), pi(), 4.1 FROM numeric_tbl;
                                       QUERY PLAN                                       
----------------------------------------------------------------------------------------
 Foreign Scan on numeric_tbl
   Oracle query: SELECT /*b0f206a14da49f63f52c0cf84e67a466*/ "STR1" FROM  "NUMERIC_TBL"
(2 rows)

-- select octet_length with non pushdown func and explicit constant (result)
--Testcase 428:
SELECT octet_length(str1), pi(), 4.1 FROM numeric_tbl;
 octet_length |        pi         | ?column? 
--------------+-------------------+----------
            9 | 3.141592653589793 |      4.1
            9 | 3.141592653589793 |      4.1
            9 | 3.141592653589793 |      4.1
            9 | 3.141592653589793 |      4.1
            9 | 3.141592653589793 |      4.1
            9 | 3.141592653589793 |      4.1
(6 rows)

-- select octet_length with order by (EXPLAIN (COSTS OFF))
--Testcase 429:
EXPLAIN (COSTS OFF)
SELECT value1, octet_length(str1) FROM numeric_tbl ORDER BY octet_length(str1);
                                                                QUERY PLAN                                                                
------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on numeric_tbl
   Oracle query: SELECT /*27d7548556c9405dab84aad72ade3908*/ "VALUE1", "STR1" FROM  "NUMERIC_TBL" ORDER BY lengthb("STR1") ASC NULLS LAST
(2 rows)

-- select octet_length with order by (result)
--Testcase 430:
SELECT value1, octet_length(str1) FROM numeric_tbl ORDER BY octet_length(str1);
 value1 | octet_length 
--------+--------------
    0.1 |            9
    0.2 |            9
    3.3 |            9
    1.1 |            9
    2.2 |            9
    0.3 |            9
(6 rows)

-- select octet_length with order by index (result)
--Testcase 431:
SELECT value1, octet_length(str1) FROM numeric_tbl ORDER BY 2,1;
 value1 | octet_length 
--------+--------------
    0.1 |            9
    0.2 |            9
    0.3 |            9
    1.1 |            9
    2.2 |            9
    3.3 |            9
(6 rows)

-- select octet_length with order by index (result)
--Testcase 432:
SELECT value1, octet_length(str1) FROM numeric_tbl ORDER BY 1,2;
 value1 | octet_length 
--------+--------------
    0.1 |            9
    0.2 |            9
    0.3 |            9
    1.1 |            9
    2.2 |            9
    3.3 |            9
(6 rows)

-- select octet_length with group by (EXPLAIN (COSTS OFF))
--Testcase 433:
EXPLAIN (COSTS OFF)
SELECT count(value1), octet_length(str1) FROM numeric_tbl GROUP BY octet_length(str1);
                                                                 QUERY PLAN                                                                  
---------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan
   Oracle query: SELECT /*016cc4292c1d77f3d16d581a1ef3a9cb*/ count("VALUE1"), lengthb("STR1") FROM  "NUMERIC_TBL" GROUP BY (lengthb("STR1"))
(2 rows)

-- select octet_length with group by (result)
--Testcase 434:
SELECT count(value1), octet_length(str1) FROM numeric_tbl GROUP BY octet_length(str1);
 count | octet_length 
-------+--------------
     6 |            9
(1 row)

-- select octet_length with group by index (result)
--Testcase 435:
SELECT value1, octet_length(str1) FROM numeric_tbl GROUP BY 2,1;
 value1 | octet_length 
--------+--------------
    0.1 |            9
    0.2 |            9
    0.3 |            9
    1.1 |            9
    2.2 |            9
    3.3 |            9
(6 rows)

-- select octet_length with group by having (EXPLAIN (COSTS OFF))
--Testcase 436:
EXPLAIN (COSTS OFF)
SELECT count(value1), octet_length(str1) FROM numeric_tbl GROUP BY octet_length(str1), str1 HAVING octet_length(str1) IS NOT NULL;
                                                                                           QUERY PLAN                                                                                            
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan
   Oracle query: SELECT /*667cb1127842bb684cefefd961fd0625*/ count("VALUE1"), lengthb("STR1"), "STR1" FROM  "NUMERIC_TBL" WHERE (lengthb("STR1") IS NOT NULL) GROUP BY (lengthb("STR1")), "STR1"
(2 rows)

-- select octet_length with group by having (result)
--Testcase 437:
SELECT count(value1), octet_length(str1) FROM numeric_tbl GROUP BY octet_length(str1), str1 HAVING octet_length(str1) IS NOT NULL;
 count | octet_length 
-------+--------------
     6 |            9
(1 row)

-- select octet_length with group by index having (result)
--Testcase 438:
SELECT value1, octet_length(str1) FROM numeric_tbl GROUP BY 1,2 HAVING value1 > 1;
 value1 | octet_length 
--------+--------------
    1.1 |            9
    2.2 |            9
    3.3 |            9
(3 rows)

-- ===============================================================================
-- test position()
-- ===============================================================================
-- select position (stub function, EXPLAIN (COSTS OFF))
--Testcase 439:
EXPLAIN (COSTS OFF)
SELECT position('XYZ' IN str1), position('XYZ' IN str2) FROM numeric_tbl;
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Foreign Scan on numeric_tbl
   Oracle query: SELECT /*b5e3ceef645293200ae015baf22fc9f6*/ "STR1", "STR2" FROM  "NUMERIC_TBL"
(2 rows)

-- select position (stub function, result)
--Testcase 440:
SELECT position('XYZ' IN str1), position('XYZ' IN str2) FROM numeric_tbl;
 position | position 
----------+----------
        4 |        0
        4 |        0
        4 |        0
        4 |        0
        4 |        0
        4 |        0
(6 rows)

-- select position (stub function, not pushdown constraints, EXPLAIN (COSTS OFF))
--Testcase 441:
EXPLAIN (COSTS OFF)
SELECT value1, position('XYZ' IN str1) FROM numeric_tbl WHERE to_hex(value2) = '64';
                                                 QUERY PLAN                                                 
------------------------------------------------------------------------------------------------------------
 Foreign Scan on numeric_tbl
   Filter: (to_hex(value2) = '64'::text)
   Oracle query: SELECT /*635e8508e85d53b1d7588d2faf1d9dce*/ "VALUE1", "VALUE2", "STR1" FROM  "NUMERIC_TBL"
(3 rows)

-- select position (stub function, not pushdown constraints, result)
--Testcase 442:
SELECT value1, position('XYZ' IN str1) FROM numeric_tbl WHERE to_hex(value2) = '64';
 value1 | position 
--------+----------
    0.1 |        4
    0.2 |        4
    0.3 |        4
(3 rows)

-- select position (stub function, pushdown constraints, EXPLAIN (COSTS OFF))
--Testcase 443:
EXPLAIN (COSTS OFF)
SELECT value1, position('XYZ' IN str1) FROM numeric_tbl WHERE value2 != 200;
                                                        QUERY PLAN                                                        
--------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on numeric_tbl
   Oracle query: SELECT /*7f396d83a07a7d806e4ce7625f7371d9*/ "VALUE1", "STR1" FROM  "NUMERIC_TBL" WHERE ("VALUE2" <> 200)
(2 rows)

-- select position (stub function, pushdown constraints, result)
--Testcase 444:
SELECT value1, position('XYZ' IN str1) FROM numeric_tbl WHERE value2 != 200;
 value1 | position 
--------+----------
    0.1 |        4
    0.2 |        4
    0.3 |        4
(3 rows)

-- select position with non pushdown func and explicit constant (EXPLAIN (COSTS OFF))
--Testcase 445:
EXPLAIN (COSTS OFF)
SELECT position('XYZ' IN str1), pi(), 4.1 FROM numeric_tbl;
                                       QUERY PLAN                                       
----------------------------------------------------------------------------------------
 Foreign Scan on numeric_tbl
   Oracle query: SELECT /*b0f206a14da49f63f52c0cf84e67a466*/ "STR1" FROM  "NUMERIC_TBL"
(2 rows)

-- select position with non pushdown func and explicit constant (result)
--Testcase 446:
SELECT position('XYZ' IN str1), pi(), 4.1 FROM numeric_tbl;
 position |        pi         | ?column? 
----------+-------------------+----------
        4 | 3.141592653589793 |      4.1
        4 | 3.141592653589793 |      4.1
        4 | 3.141592653589793 |      4.1
        4 | 3.141592653589793 |      4.1
        4 | 3.141592653589793 |      4.1
        4 | 3.141592653589793 |      4.1
(6 rows)

-- select position with order by (EXPLAIN (COSTS OFF))
--Testcase 447:
EXPLAIN (COSTS OFF)
SELECT value1, position('XYZ' IN str1) FROM numeric_tbl ORDER BY position('XYZ' IN str1);
                                                                  QUERY PLAN                                                                   
-----------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on numeric_tbl
   Oracle query: SELECT /*a5876945c04e8937728671fb747e5d1d*/ "VALUE1", "STR1" FROM  "NUMERIC_TBL" ORDER BY instr("STR1", 'XYZ') ASC NULLS LAST
(2 rows)

-- select position with order by (result)
--Testcase 448:
SELECT value1, position('XYZ' IN str1) FROM numeric_tbl ORDER BY position('XYZ' IN str1);
 value1 | position 
--------+----------
    0.1 |        4
    0.2 |        4
    3.3 |        4
    1.1 |        4
    2.2 |        4
    0.3 |        4
(6 rows)

-- select position with order by index (result)
--Testcase 449:
SELECT value1, position('XYZ' IN str1) FROM numeric_tbl ORDER BY 2,1;
 value1 | position 
--------+----------
    0.1 |        4
    0.2 |        4
    0.3 |        4
    1.1 |        4
    2.2 |        4
    3.3 |        4
(6 rows)

-- select position with order by index (result)
--Testcase 450:
SELECT value1, position('XYZ' IN str1) FROM numeric_tbl ORDER BY 1,2;
 value1 | position 
--------+----------
    0.1 |        4
    0.2 |        4
    0.3 |        4
    1.1 |        4
    2.2 |        4
    3.3 |        4
(6 rows)

-- select position with group by (EXPLAIN (COSTS OFF))
--Testcase 451:
EXPLAIN (COSTS OFF)
SELECT count(value1), position('XYZ' IN str1) FROM numeric_tbl GROUP BY position('XYZ' IN str1);
                                                                      QUERY PLAN                                                                       
-------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan
   Oracle query: SELECT /*f063bb8612fded02af2178d3ac3ca52b*/ count("VALUE1"), instr("STR1", 'XYZ') FROM  "NUMERIC_TBL" GROUP BY (instr("STR1", 'XYZ'))
(2 rows)

-- select position with group by (result)
--Testcase 452:
SELECT count(value1), position('XYZ' IN str1) FROM numeric_tbl GROUP BY position('XYZ' IN str1);
 count | position 
-------+----------
     6 |        4
(1 row)

-- select position with group by index (result)
--Testcase 453:
SELECT value1, position('XYZ' IN str1) FROM numeric_tbl GROUP BY 2,1;
 value1 | position 
--------+----------
    0.1 |        4
    0.2 |        4
    0.3 |        4
    1.1 |        4
    2.2 |        4
    3.3 |        4
(6 rows)

-- select position with group by having (EXPLAIN (COSTS OFF))
--Testcase 454:
EXPLAIN (COSTS OFF)
SELECT count(value1), position('XYZ' IN str1) FROM numeric_tbl GROUP BY position('XYZ' IN str1), str1 HAVING position('XYZ' IN str1) IS NOT NULL;
                                                                                                   QUERY PLAN                                                                                                   
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan
   Oracle query: SELECT /*6ea882dca8002ec9e143920170325be7*/ count("VALUE1"), instr("STR1", 'XYZ'), "STR1" FROM  "NUMERIC_TBL" WHERE (instr("STR1", 'XYZ') IS NOT NULL) GROUP BY (instr("STR1", 'XYZ')), "STR1"
(2 rows)

-- select position with group by having (result)
--Testcase 455:
SELECT count(value1), position('XYZ' IN str1) FROM numeric_tbl GROUP BY position('XYZ' IN str1), str1 HAVING position('XYZ' IN str1) IS NOT NULL;
 count | position 
-------+----------
     6 |        4
(1 row)

-- select position with group by index having (result)
--Testcase 456:
SELECT value1, position('XYZ' IN str1) FROM numeric_tbl GROUP BY 1,2 HAVING value1 > 1;
 value1 | position 
--------+----------
    1.1 |        4
    2.2 |        4
    3.3 |        4
(3 rows)

-- ===============================================================================
-- test pow()
-- ===============================================================================
-- select pow (builtin function, EXPLAIN (COSTS OFF))
--Testcase 457:
EXPLAIN (COSTS OFF)
SELECT pow(value1, 2), pow(value2, 2), pow(value3, 2), pow(value4, 2) FROM numeric_tbl;
                                                       QUERY PLAN                                                       
------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on numeric_tbl
   Oracle query: SELECT /*3a3e9ce1642025dfd6451e15cf1fadd9*/ "VALUE1", "VALUE2", "VALUE3", "VALUE4" FROM  "NUMERIC_TBL"
(2 rows)

-- select pow (builtin function, result)
--Testcase 458:
SELECT pow(value1, 2), pow(value2, 2), pow(value3, 2), pow(value4, 2) FROM numeric_tbl;
         pow          |  pow  |         pow          |  pow  
----------------------+-------+----------------------+-------
 0.010000000000000002 | 10000 | 0.010000000000000002 | 10000
  0.04000000000000001 | 10000 |  0.04000000000000001 | 10000
                 0.09 | 10000 |                 0.09 | 10000
   1.2100000000000002 | 40000 |   1.2100000000000002 | 40000
    4.840000000000001 | 40000 |    4.840000000000001 | 40000
   10.889999999999999 | 40000 |   10.889999999999999 | 40000
(6 rows)

-- select pow (builtin function, not pushdown constraints, EXPLAIN (COSTS OFF))
--Testcase 459:
EXPLAIN (COSTS OFF)
SELECT pow(value1, 2), pow(value2, 2), pow(value3, 2), pow(value4, 2) FROM numeric_tbl WHERE to_hex(value2) != '64';
                                                       QUERY PLAN                                                       
------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on numeric_tbl
   Filter: (to_hex(value2) <> '64'::text)
   Oracle query: SELECT /*3a3e9ce1642025dfd6451e15cf1fadd9*/ "VALUE1", "VALUE2", "VALUE3", "VALUE4" FROM  "NUMERIC_TBL"
(3 rows)

-- select pow (builtin function, not pushdown constraints, result)
--Testcase 460:
SELECT pow(value1, 2), pow(value2, 2), pow(value3, 2), pow(value4, 2) FROM numeric_tbl WHERE to_hex(value2) != '64';
        pow         |  pow  |        pow         |  pow  
--------------------+-------+--------------------+-------
 1.2100000000000002 | 40000 | 1.2100000000000002 | 40000
  4.840000000000001 | 40000 |  4.840000000000001 | 40000
 10.889999999999999 | 40000 | 10.889999999999999 | 40000
(3 rows)

-- select pow (builtin function, pushdown constraints, EXPLAIN (COSTS OFF))
--Testcase 461:
EXPLAIN (COSTS OFF)
SELECT pow(value1, 2), pow(value2, 2), pow(value3, 2), pow(value4, 2) FROM numeric_tbl WHERE value2 != 200;
                                                                   QUERY PLAN                                                                   
------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on numeric_tbl
   Oracle query: SELECT /*ee255a287dc590cc2e754740ed3cd0e9*/ "VALUE1", "VALUE2", "VALUE3", "VALUE4" FROM  "NUMERIC_TBL" WHERE ("VALUE2" <> 200)
(2 rows)

-- select pow (builtin function, pushdown constraints, result)
--Testcase 462:
SELECT pow(value1, 2), pow(value2, 2), pow(value3, 2), pow(value4, 2) FROM numeric_tbl WHERE value2 != 200;
         pow          |  pow  |         pow          |  pow  
----------------------+-------+----------------------+-------
 0.010000000000000002 | 10000 | 0.010000000000000002 | 10000
  0.04000000000000001 | 10000 |  0.04000000000000001 | 10000
                 0.09 | 10000 |                 0.09 | 10000
(3 rows)

-- select pow as nest function with agg (pushdown, EXPLAIN (COSTS OFF))
--Testcase 463:
EXPLAIN (COSTS OFF)
SELECT sum(value3),pow(sum(value3), 2) FROM numeric_tbl;
                                                       QUERY PLAN                                                       
------------------------------------------------------------------------------------------------------------------------
 Foreign Scan
   Oracle query: SELECT /*7d760559098ea93a12fa8cb1680705b0*/ sum("VALUE3"), power(sum("VALUE3"), 2) FROM  "NUMERIC_TBL"
(2 rows)

-- select pow as nest function with agg (pushdown, result)
--Testcase 464:
SELECT sum(value3),pow(sum(value3), 2) FROM numeric_tbl;
 sum  |  pow  
------+-------
 -7.2 | 51.84
(1 row)

-- select pow as nest with log2 (pushdown, EXPLAIN (COSTS OFF))
--Testcase 465:
EXPLAIN (COSTS OFF)
SELECT value1, pow(log(2, value2), 2) FROM numeric_tbl;
                                             QUERY PLAN                                             
----------------------------------------------------------------------------------------------------
 Foreign Scan on numeric_tbl
   Oracle query: SELECT /*c35678a687054ae56f3a83ca5558704c*/ "VALUE1", "VALUE2" FROM  "NUMERIC_TBL"
(2 rows)

-- select pow as nest with log2 (pushdown, result)
--Testcase 466:
SELECT value1, pow(log(2, value2), 2) FROM numeric_tbl;
 value1 |         pow         
--------+---------------------
    0.1 | 44.1408250704079227
    0.2 | 44.1408250704079227
    0.3 | 44.1408250704079227
    1.1 | 58.4285374499573721
    2.2 | 58.4285374499573721
    3.3 | 58.4285374499573721
(6 rows)

-- select pow with non pushdown func and explicit constant (EXPLAIN (COSTS OFF))
--Testcase 467:
EXPLAIN (COSTS OFF)
SELECT pow(value3, 2), pi(), 4.1 FROM numeric_tbl;
                                        QUERY PLAN                                        
------------------------------------------------------------------------------------------
 Foreign Scan on numeric_tbl
   Oracle query: SELECT /*b3d9f3348edc9fa53b73cdc5d271b426*/ "VALUE3" FROM  "NUMERIC_TBL"
(2 rows)

-- select pow with non pushdown func and explicit constant (result)
--Testcase 468:
SELECT pow(value3, 2), pi(), 4.1 FROM numeric_tbl;
         pow          |        pi         | ?column? 
----------------------+-------------------+----------
 0.010000000000000002 | 3.141592653589793 |      4.1
  0.04000000000000001 | 3.141592653589793 |      4.1
                 0.09 | 3.141592653589793 |      4.1
   1.2100000000000002 | 3.141592653589793 |      4.1
    4.840000000000001 | 3.141592653589793 |      4.1
   10.889999999999999 | 3.141592653589793 |      4.1
(6 rows)

-- select pow with order by (EXPLAIN (COSTS OFF))
--Testcase 469:
EXPLAIN (COSTS OFF)
SELECT value3, pow(1-value3, 2) FROM numeric_tbl ORDER BY pow(1-value3, 2);
                                                                QUERY PLAN                                                                 
-------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on numeric_tbl
   Oracle query: SELECT /*77df1da53d1f87327672192760e8b1a9*/ "VALUE3" FROM  "NUMERIC_TBL" ORDER BY power((1 - "VALUE3"), 2) ASC NULLS LAST
(2 rows)

-- select pow with order by (result)
--Testcase 470:
SELECT value3, pow(1-value3, 2) FROM numeric_tbl ORDER BY pow(1-value3, 2);
 value3 |        pow         
--------+--------------------
   -0.1 | 1.2100000000000002
   -0.2 |               1.44
   -0.3 | 1.6900000000000002
   -1.1 |               4.41
   -2.2 | 10.240000000000002
   -3.3 |              18.49
(6 rows)

-- select pow with order by index (result)
--Testcase 471:
SELECT value3, pow(1-value3, 2) FROM numeric_tbl ORDER BY 2,1;
 value3 |        pow         
--------+--------------------
   -0.1 | 1.2100000000000002
   -0.2 |               1.44
   -0.3 | 1.6900000000000002
   -1.1 |               4.41
   -2.2 | 10.240000000000002
   -3.3 |              18.49
(6 rows)

-- select pow with order by index (result)
--Testcase 472:
SELECT value3, pow(1-value3, 2) FROM numeric_tbl ORDER BY 1,2;
 value3 |        pow         
--------+--------------------
   -3.3 |              18.49
   -2.2 | 10.240000000000002
   -1.1 |               4.41
   -0.3 | 1.6900000000000002
   -0.2 |               1.44
   -0.1 | 1.2100000000000002
(6 rows)

-- select pow and as
--Testcase 473:
SELECT pow(value3, 2) as pow1 FROM numeric_tbl;
         pow1         
----------------------
 0.010000000000000002
  0.04000000000000001
                 0.09
   1.2100000000000002
    4.840000000000001
   10.889999999999999
(6 rows)

-- ===============================================================================
-- test power()
-- ===============================================================================
-- select power (builtin function, EXPLAIN (COSTS OFF))
--Testcase 474:
EXPLAIN (COSTS OFF)
SELECT power(value1, 2), power(value2, 2), power(value3, 2), power(value4, 2), power(5, 2) FROM numeric_tbl;
                                                       QUERY PLAN                                                       
------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on numeric_tbl
   Oracle query: SELECT /*3a3e9ce1642025dfd6451e15cf1fadd9*/ "VALUE1", "VALUE2", "VALUE3", "VALUE4" FROM  "NUMERIC_TBL"
(2 rows)

-- select power (builtin function, result)
--Testcase 475:
SELECT power(value1, 2), power(value2, 2), power(value3, 2), power(value4, 2), power(5, 2) FROM numeric_tbl;
        power         | power |        power         | power | power 
----------------------+-------+----------------------+-------+-------
 0.010000000000000002 | 10000 | 0.010000000000000002 | 10000 |    25
  0.04000000000000001 | 10000 |  0.04000000000000001 | 10000 |    25
                 0.09 | 10000 |                 0.09 | 10000 |    25
   1.2100000000000002 | 40000 |   1.2100000000000002 | 40000 |    25
    4.840000000000001 | 40000 |    4.840000000000001 | 40000 |    25
   10.889999999999999 | 40000 |   10.889999999999999 | 40000 |    25
(6 rows)

-- select power (builtin function, not pushdown constraints, EXPLAIN (COSTS OFF))
--Testcase 476:
EXPLAIN (COSTS OFF)
SELECT power(value1, 2), power(value2, 2), power(value3, 2), power(value4, 2), power(5, 2) FROM numeric_tbl WHERE to_hex(value2) = '64';
                                                       QUERY PLAN                                                       
------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on numeric_tbl
   Filter: (to_hex(value2) = '64'::text)
   Oracle query: SELECT /*3a3e9ce1642025dfd6451e15cf1fadd9*/ "VALUE1", "VALUE2", "VALUE3", "VALUE4" FROM  "NUMERIC_TBL"
(3 rows)

-- select power (builtin function, not pushdown constraints, result)
--Testcase 477:
SELECT power(value1, 2), power(value2, 2), power(value3, 2), power(value4, 2), power(5, 2) FROM numeric_tbl WHERE to_hex(value2) = '64';
        power         | power |        power         | power | power 
----------------------+-------+----------------------+-------+-------
 0.010000000000000002 | 10000 | 0.010000000000000002 | 10000 |    25
  0.04000000000000001 | 10000 |  0.04000000000000001 | 10000 |    25
                 0.09 | 10000 |                 0.09 | 10000 |    25
(3 rows)

-- select power (builtin function, pushdown constraints, EXPLAIN (COSTS OFF))
--Testcase 478:
EXPLAIN (COSTS OFF)
SELECT power(value1, 2), power(value2, 2), power(value3, 2), power(value4, 2), power(5, 2) FROM numeric_tbl WHERE value2 != 200;
                                                                   QUERY PLAN                                                                   
------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on numeric_tbl
   Oracle query: SELECT /*ee255a287dc590cc2e754740ed3cd0e9*/ "VALUE1", "VALUE2", "VALUE3", "VALUE4" FROM  "NUMERIC_TBL" WHERE ("VALUE2" <> 200)
(2 rows)

-- select power (builtin function, pushdown constraints, result)
--Testcase 479:
SELECT power(value1, 2), power(value2, 2), power(value3, 2), power(value4, 2), power(5, 2) FROM numeric_tbl WHERE value2 != 200;
        power         | power |        power         | power | power 
----------------------+-------+----------------------+-------+-------
 0.010000000000000002 | 10000 | 0.010000000000000002 | 10000 |    25
  0.04000000000000001 | 10000 |  0.04000000000000001 | 10000 |    25
                 0.09 | 10000 |                 0.09 | 10000 |    25
(3 rows)

-- select power (builtin function, power in constraints, EXPLAIN (COSTS OFF))
--Testcase 480:
EXPLAIN (COSTS OFF)
SELECT power(value1, 2), power(value2, 2), power(value3, 2), power(value4, 2), power(5, 2) FROM numeric_tbl WHERE power(value1, 2) != 1;
                                                                       QUERY PLAN                                                                       
--------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on numeric_tbl
   Oracle query: SELECT /*43b166579a23b95d29f3cf38176d8d58*/ "VALUE1", "VALUE2", "VALUE3", "VALUE4" FROM  "NUMERIC_TBL" WHERE (power("VALUE1", 2) <> 1)
(2 rows)

-- select power (builtin function, power in constraints, result)
--Testcase 481:
SELECT power(value1, 2), power(value2, 2), power(value3, 2), power(value4, 2), power(5, 2) FROM numeric_tbl WHERE power(value1, 2) != 1;
        power         | power |        power         | power | power 
----------------------+-------+----------------------+-------+-------
 0.010000000000000002 | 10000 | 0.010000000000000002 | 10000 |    25
  0.04000000000000001 | 10000 |  0.04000000000000001 | 10000 |    25
                 0.09 | 10000 |                 0.09 | 10000 |    25
   1.2100000000000002 | 40000 |   1.2100000000000002 | 40000 |    25
    4.840000000000001 | 40000 |    4.840000000000001 | 40000 |    25
   10.889999999999999 | 40000 |   10.889999999999999 | 40000 |    25
(6 rows)

-- select power (builtin function, power in constraints, EXPLAIN (COSTS OFF))
--Testcase 482:
EXPLAIN (COSTS OFF)
SELECT power(value1, 2), power(value2, 2), power(value3, 2), power(value4, 2), power(5, 2) FROM numeric_tbl WHERE power(5, 2) > value1;
                                                                  QUERY PLAN                                                                  
----------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on numeric_tbl
   Oracle query: SELECT /*8b9dac8c91d3936a0429ef1328cb094f*/ "VALUE1", "VALUE2", "VALUE3", "VALUE4" FROM  "NUMERIC_TBL" WHERE (25 > "VALUE1")
(2 rows)

-- select power (builtin function, power in constraints, result)
--Testcase 483:
SELECT power(value1, 2), power(value2, 2), power(value3, 2), power(value4, 2), power(5, 2) FROM numeric_tbl WHERE power(5, 2) > value1;
        power         | power |        power         | power | power 
----------------------+-------+----------------------+-------+-------
 0.010000000000000002 | 10000 | 0.010000000000000002 | 10000 |    25
  0.04000000000000001 | 10000 |  0.04000000000000001 | 10000 |    25
                 0.09 | 10000 |                 0.09 | 10000 |    25
   1.2100000000000002 | 40000 |   1.2100000000000002 | 40000 |    25
    4.840000000000001 | 40000 |    4.840000000000001 | 40000 |    25
   10.889999999999999 | 40000 |   10.889999999999999 | 40000 |    25
(6 rows)

-- select power as nest function with agg (pushdown, EXPLAIN (COSTS OFF))
--Testcase 484:
EXPLAIN (COSTS OFF)
SELECT sum(value3),power(sum(value3), 2) FROM numeric_tbl;
                                                       QUERY PLAN                                                       
------------------------------------------------------------------------------------------------------------------------
 Foreign Scan
   Oracle query: SELECT /*7d760559098ea93a12fa8cb1680705b0*/ sum("VALUE3"), power(sum("VALUE3"), 2) FROM  "NUMERIC_TBL"
(2 rows)

-- select power as nest function with agg (pushdown, result)
--Testcase 485:
SELECT sum(value3),power(sum(value3), 2) FROM numeric_tbl;
 sum  | power 
------+-------
 -7.2 | 51.84
(1 row)

-- select power as nest with log2 (pushdown, EXPLAIN (COSTS OFF))
--Testcase 486:
EXPLAIN (COSTS OFF)
SELECT value1, power(log(2, value2), 2) FROM numeric_tbl;
                                             QUERY PLAN                                             
----------------------------------------------------------------------------------------------------
 Foreign Scan on numeric_tbl
   Oracle query: SELECT /*c35678a687054ae56f3a83ca5558704c*/ "VALUE1", "VALUE2" FROM  "NUMERIC_TBL"
(2 rows)

-- select power as nest with log2 (pushdown, result)
--Testcase 487:
SELECT value1, power(log(2, value2), 2) FROM numeric_tbl;
 value1 |        power        
--------+---------------------
    0.1 | 44.1408250704079227
    0.2 | 44.1408250704079227
    0.3 | 44.1408250704079227
    1.1 | 58.4285374499573721
    2.2 | 58.4285374499573721
    3.3 | 58.4285374499573721
(6 rows)

-- select power with non pushdown func and explicit constant (EXPLAIN (COSTS OFF))
--Testcase 488:
EXPLAIN (COSTS OFF)
SELECT power(value3, 2), pi(), 4.1 FROM numeric_tbl;
                                        QUERY PLAN                                        
------------------------------------------------------------------------------------------
 Foreign Scan on numeric_tbl
   Oracle query: SELECT /*b3d9f3348edc9fa53b73cdc5d271b426*/ "VALUE3" FROM  "NUMERIC_TBL"
(2 rows)

-- select power with non pushdown func and explicit constant (result)
--Testcase 489:
SELECT power(value3, 2), pi(), 4.1 FROM numeric_tbl;
        power         |        pi         | ?column? 
----------------------+-------------------+----------
 0.010000000000000002 | 3.141592653589793 |      4.1
  0.04000000000000001 | 3.141592653589793 |      4.1
                 0.09 | 3.141592653589793 |      4.1
   1.2100000000000002 | 3.141592653589793 |      4.1
    4.840000000000001 | 3.141592653589793 |      4.1
   10.889999999999999 | 3.141592653589793 |      4.1
(6 rows)

-- select power with order by (EXPLAIN (COSTS OFF))
--Testcase 490:
EXPLAIN (COSTS OFF)
SELECT value1, power(1-value3, 2) FROM numeric_tbl ORDER BY power(1-value3, 2);
                                                                     QUERY PLAN                                                                      
-----------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on numeric_tbl
   Oracle query: SELECT /*a56b1f9c5eeafecb46e5b5c5ac5d2a94*/ "VALUE1", "VALUE3" FROM  "NUMERIC_TBL" ORDER BY power((1 - "VALUE3"), 2) ASC NULLS LAST
(2 rows)

-- select power with order by (result)
--Testcase 491:
SELECT value1, power(1-value3, 2) FROM numeric_tbl ORDER BY power(1-value3, 2);
 value1 |       power        
--------+--------------------
    0.1 | 1.2100000000000002
    0.2 |               1.44
    0.3 | 1.6900000000000002
    1.1 |               4.41
    2.2 | 10.240000000000002
    3.3 |              18.49
(6 rows)

-- select power with order by index (result)
--Testcase 492:
SELECT value1, power(1-value3, 2) FROM numeric_tbl ORDER BY 2,1;
 value1 |       power        
--------+--------------------
    0.1 | 1.2100000000000002
    0.2 |               1.44
    0.3 | 1.6900000000000002
    1.1 |               4.41
    2.2 | 10.240000000000002
    3.3 |              18.49
(6 rows)

-- select power with order by index (result)
--Testcase 493:
SELECT value1, power(1-value3, 2) FROM numeric_tbl ORDER BY 1,2;
 value1 |       power        
--------+--------------------
    0.1 | 1.2100000000000002
    0.2 |               1.44
    0.3 | 1.6900000000000002
    1.1 |               4.41
    2.2 | 10.240000000000002
    3.3 |              18.49
(6 rows)

-- select power with group by (EXPLAIN (COSTS OFF))
--Testcase 494:
EXPLAIN (COSTS OFF)
SELECT count(value1), power(1-value3, 2) FROM numeric_tbl GROUP BY power(1-value3, 2);
                                                                          QUERY PLAN                                                                           
---------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan
   Oracle query: SELECT /*aa9bb7257e54197c284ece467b83dd23*/ count("VALUE1"), power((1 - "VALUE3"), 2) FROM  "NUMERIC_TBL" GROUP BY (power((1 - "VALUE3"), 2))
(2 rows)

-- select power with group by (result)
--Testcase 495:
SELECT count(value1), power(1-value3, 2) FROM numeric_tbl GROUP BY power(1-value3, 2);
 count | power 
-------+-------
     1 |  1.21
     1 |  1.44
     1 |  1.69
     1 |  4.41
     1 | 10.24
     1 | 18.49
(6 rows)

-- select power with group by index (result)
--Testcase 496:
SELECT value1, power(1-value3, 2) FROM numeric_tbl GROUP BY 2,1;
 value1 | power 
--------+-------
    0.1 |  1.21
    0.2 |  1.44
    0.3 |  1.69
    1.1 |  4.41
    2.2 | 10.24
    3.3 | 18.49
(6 rows)

-- select power with group by index (result)
--Testcase 497:
SELECT value1, power(1-value3, 2) FROM numeric_tbl GROUP BY 1,2;
 value1 | power 
--------+-------
    0.1 |  1.21
    0.2 |  1.44
    0.3 |  1.69
    1.1 |  4.41
    2.2 | 10.24
    3.3 | 18.49
(6 rows)

-- select power with group by having (EXPLAIN (COSTS OFF))
--Testcase 498:
EXPLAIN (COSTS OFF)
SELECT count(value1), power(1-value3, 2) FROM numeric_tbl GROUP BY power(1-value3, 2) HAVING power(avg(value1), 2) > 0;
                                                                                             QUERY PLAN                                                                                             
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan
   Oracle query: SELECT /*442721554dc3204cfe4db1105034b300*/ count("VALUE1"), power((1 - "VALUE3"), 2) FROM  "NUMERIC_TBL" GROUP BY (power((1 - "VALUE3"), 2)) HAVING (power(avg("VALUE1"), 2) > 0)
(2 rows)

-- select power with group by having (result)
--Testcase 499:
SELECT count(value1), power(1-value3, 2) FROM numeric_tbl GROUP BY power(1-value3, 2) HAVING power(avg(value1), 2) > 0;
 count | power 
-------+-------
     1 |  1.21
     1 |  1.44
     1 |  1.69
     1 |  4.41
     1 | 10.24
     1 | 18.49
(6 rows)

-- select power with group by index having (result)
--Testcase 500:
SELECT value1, power(1-value3, 2) FROM numeric_tbl GROUP BY 2,1 HAVING power(1-value3, 2) > 0;
 value1 | power 
--------+-------
    0.1 |  1.21
    0.2 |  1.44
    0.3 |  1.69
    1.1 |  4.41
    2.2 | 10.24
    3.3 | 18.49
(6 rows)

-- select power with group by index having (result)
--Testcase 501:
SELECT value1, power(1-value3, 2) FROM numeric_tbl GROUP BY 1,2 HAVING value1 > 1;
 value1 | power 
--------+-------
    1.1 |  4.41
    2.2 | 10.24
    3.3 | 18.49
(3 rows)

-- select power and as
--Testcase 502:
SELECT power(value3, 2) as power1 FROM numeric_tbl;
        power1        
----------------------
 0.010000000000000002
  0.04000000000000001
                 0.09
   1.2100000000000002
    4.840000000000001
   10.889999999999999
(6 rows)

-- ===============================================================================
-- test replace()
-- ===============================================================================
-- select replace (stub function, EXPLAIN (COSTS OFF))
--Testcase 503:
EXPLAIN (COSTS OFF)
SELECT replace(str1, 'XYZ', 'ABC'), replace(str2, 'XYZ', 'ABC') FROM numeric_tbl;
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Foreign Scan on numeric_tbl
   Oracle query: SELECT /*b5e3ceef645293200ae015baf22fc9f6*/ "STR1", "STR2" FROM  "NUMERIC_TBL"
(2 rows)

-- select replace (stub function, result)
--Testcase 504:
SELECT replace(str1, 'XYZ', 'ABC'), replace(str2, 'XYZ', 'ABC') FROM numeric_tbl;
  replace  |  replace  
-----------+-----------
 ---ABC--- |    abc   
 ---ABC--- |    abc   
 ---ABC--- |    abc   
 ---ABC--- |    abc   
 ---ABC--- |    abc   
 ---ABC--- |    abc   
(6 rows)

-- select replace (stub function, not pushdown constraints, EXPLAIN (COSTS OFF))
--Testcase 505:
EXPLAIN (COSTS OFF)
SELECT value1, replace(str1, 'XYZ', 'ABC') FROM numeric_tbl WHERE to_hex(value2) = '64';
                                                 QUERY PLAN                                                 
------------------------------------------------------------------------------------------------------------
 Foreign Scan on numeric_tbl
   Filter: (to_hex(value2) = '64'::text)
   Oracle query: SELECT /*635e8508e85d53b1d7588d2faf1d9dce*/ "VALUE1", "VALUE2", "STR1" FROM  "NUMERIC_TBL"
(3 rows)

-- select replace (stub function, not pushdown constraints, result)
--Testcase 506:
SELECT value1, replace(str1, 'XYZ', 'ABC') FROM numeric_tbl WHERE to_hex(value2) = '64';
 value1 |  replace  
--------+-----------
    0.1 | ---ABC---
    0.2 | ---ABC---
    0.3 | ---ABC---
(3 rows)

-- select replace (stub function, pushdown constraints, EXPLAIN (COSTS OFF))
--Testcase 507:
EXPLAIN (COSTS OFF)
SELECT value1, replace(str1, 'XYZ', 'ABC') FROM numeric_tbl WHERE value2 != 200;
                                                        QUERY PLAN                                                        
--------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on numeric_tbl
   Oracle query: SELECT /*7f396d83a07a7d806e4ce7625f7371d9*/ "VALUE1", "STR1" FROM  "NUMERIC_TBL" WHERE ("VALUE2" <> 200)
(2 rows)

-- select replace (stub function, pushdown constraints, result)
--Testcase 508:
SELECT value1, replace(str1, 'XYZ', 'ABC') FROM numeric_tbl WHERE value2 != 200;
 value1 |  replace  
--------+-----------
    0.1 | ---ABC---
    0.2 | ---ABC---
    0.3 | ---ABC---
(3 rows)

-- select replace with non pushdown func and explicit constant (EXPLAIN (COSTS OFF))
--Testcase 509:
EXPLAIN (COSTS OFF)
SELECT replace(str1, 'XYZ', 'ABC'), pi(), 4.1 FROM numeric_tbl;
                                       QUERY PLAN                                       
----------------------------------------------------------------------------------------
 Foreign Scan on numeric_tbl
   Oracle query: SELECT /*b0f206a14da49f63f52c0cf84e67a466*/ "STR1" FROM  "NUMERIC_TBL"
(2 rows)

-- select replace with non pushdown func and explicit constant (result)
--Testcase 510:
SELECT replace(str1, 'XYZ', 'ABC'), pi(), 4.1 FROM numeric_tbl;
  replace  |        pi         | ?column? 
-----------+-------------------+----------
 ---ABC--- | 3.141592653589793 |      4.1
 ---ABC--- | 3.141592653589793 |      4.1
 ---ABC--- | 3.141592653589793 |      4.1
 ---ABC--- | 3.141592653589793 |      4.1
 ---ABC--- | 3.141592653589793 |      4.1
 ---ABC--- | 3.141592653589793 |      4.1
(6 rows)

-- select replace with order by (EXPLAIN (COSTS OFF))
--Testcase 511:
EXPLAIN (COSTS OFF)
SELECT value1, replace(str1, 'XYZ', 'ABC') FROM numeric_tbl ORDER BY replace(str1, 'XYZ', 'ABC');
                                               QUERY PLAN                                               
--------------------------------------------------------------------------------------------------------
 Sort
   Sort Key: (replace(str1, 'XYZ'::text, 'ABC'::text))
   ->  Foreign Scan on numeric_tbl
         Oracle query: SELECT /*adc4aceb6c6364fd12224d4c1ad89a55*/ "VALUE1", "STR1" FROM  "NUMERIC_TBL"
(4 rows)

-- select replace with order by (result)
--Testcase 512:
SELECT value1, replace(str1, 'XYZ', 'ABC') FROM numeric_tbl ORDER BY replace(str1, 'XYZ', 'ABC');
 value1 |  replace  
--------+-----------
    0.1 | ---ABC---
    0.2 | ---ABC---
    0.3 | ---ABC---
    1.1 | ---ABC---
    2.2 | ---ABC---
    3.3 | ---ABC---
(6 rows)

-- select replace with order by index (result)
--Testcase 513:
SELECT value1, replace(str1, 'XYZ', 'ABC') FROM numeric_tbl ORDER BY 2,1;
 value1 |  replace  
--------+-----------
    0.1 | ---ABC---
    0.2 | ---ABC---
    0.3 | ---ABC---
    1.1 | ---ABC---
    2.2 | ---ABC---
    3.3 | ---ABC---
(6 rows)

-- select replace with order by index (result)
--Testcase 514:
SELECT value1, replace(str1, 'XYZ', 'ABC') FROM numeric_tbl ORDER BY 1,2;
 value1 |  replace  
--------+-----------
    0.1 | ---ABC---
    0.2 | ---ABC---
    0.3 | ---ABC---
    1.1 | ---ABC---
    2.2 | ---ABC---
    3.3 | ---ABC---
(6 rows)

-- select replace with group by (EXPLAIN (COSTS OFF))
--Testcase 515:
EXPLAIN (COSTS OFF)
SELECT count(value1), replace(str1, 'XYZ', 'ABC') FROM numeric_tbl GROUP BY replace(str1, 'XYZ', 'ABC');
                                                                               QUERY PLAN                                                                                
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan
   Oracle query: SELECT /*a4716fb2f848c7b3adc30777ae0a91d1*/ count("VALUE1"), replace("STR1", 'XYZ', 'ABC') FROM  "NUMERIC_TBL" GROUP BY (replace("STR1", 'XYZ', 'ABC'))
(2 rows)

-- select replace with group by (result)
--Testcase 516:
SELECT count(value1), replace(str1, 'XYZ', 'ABC') FROM numeric_tbl GROUP BY replace(str1, 'XYZ', 'ABC');
 count |  replace  
-------+-----------
     6 | ---ABC---
(1 row)

-- select replace with group by index (result)
--Testcase 517:
SELECT value1, replace(str1, 'XYZ', 'ABC') FROM numeric_tbl GROUP BY 2,1;
 value1 |  replace  
--------+-----------
    0.1 | ---ABC---
    0.2 | ---ABC---
    0.3 | ---ABC---
    1.1 | ---ABC---
    2.2 | ---ABC---
    3.3 | ---ABC---
(6 rows)

-- select replace with group by having (EXPLAIN (COSTS OFF))
--Testcase 518:
EXPLAIN (COSTS OFF)
SELECT count(value1), replace(str1, 'XYZ', 'ABC') FROM numeric_tbl GROUP BY replace(str1, 'XYZ', 'ABC'), str1 HAVING replace(str1, 'XYZ', 'ABC') IS NOT NULL;
                                                                                                                QUERY PLAN                                                                                                                 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan
   Oracle query: SELECT /*b4c77f25b9792930666748f003e55d65*/ count("VALUE1"), replace("STR1", 'XYZ', 'ABC'), "STR1" FROM  "NUMERIC_TBL" WHERE (replace("STR1", 'XYZ', 'ABC') IS NOT NULL) GROUP BY (replace("STR1", 'XYZ', 'ABC')), "STR1"
(2 rows)

-- select replace with group by having (result)
--Testcase 519:
SELECT count(value1), replace(str1, 'XYZ', 'ABC') FROM numeric_tbl GROUP BY replace(str1, 'XYZ', 'ABC'), str1 HAVING replace(str1, 'XYZ', 'ABC') IS NOT NULL;
 count |  replace  
-------+-----------
     6 | ---ABC---
(1 row)

-- select replace with group by index having (result)
--Testcase 520:
SELECT value1, replace(str1, 'XYZ', 'ABC') FROM numeric_tbl GROUP BY 1,2 HAVING value1 > 1;
 value1 |  replace  
--------+-----------
    1.1 | ---ABC---
    2.2 | ---ABC---
    3.3 | ---ABC---
(3 rows)

-- ===============================================================================
-- test round()
-- ===============================================================================
-- select round (builtin function, EXPLAIN (COSTS OFF))
--Testcase 521:
EXPLAIN (COSTS OFF)
SELECT round(value1), round(value2), round(value3), round(value4), round(0.5) FROM numeric_tbl;
                                                       QUERY PLAN                                                       
------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on numeric_tbl
   Oracle query: SELECT /*3a3e9ce1642025dfd6451e15cf1fadd9*/ "VALUE1", "VALUE2", "VALUE3", "VALUE4" FROM  "NUMERIC_TBL"
(2 rows)

-- select round (builtin function, result)
--Testcase 522:
SELECT round(value1), round(value2), round(value3), round(value4), round(0.5) FROM numeric_tbl;
 round | round | round | round | round 
-------+-------+-------+-------+-------
     0 |   100 |    -0 |  -100 |     1
     0 |   100 |    -0 |  -100 |     1
     0 |   100 |    -0 |  -100 |     1
     1 |   200 |    -1 |  -200 |     1
     2 |   200 |    -2 |  -200 |     1
     3 |   200 |    -3 |  -200 |     1
(6 rows)

-- select round (builtin function, not pushdown constraints, EXPLAIN (COSTS OFF))
--Testcase 523:
EXPLAIN (COSTS OFF)
SELECT round(value1), round(value2), round(value3), round(value4), round(0.5) FROM numeric_tbl WHERE to_hex(value2) = '64';
                                                       QUERY PLAN                                                       
------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on numeric_tbl
   Filter: (to_hex(value2) = '64'::text)
   Oracle query: SELECT /*3a3e9ce1642025dfd6451e15cf1fadd9*/ "VALUE1", "VALUE2", "VALUE3", "VALUE4" FROM  "NUMERIC_TBL"
(3 rows)

-- select round (builtin function, not pushdown constraints, result)
--Testcase 524:
SELECT round(value1), round(value2), round(value3), round(value4), round(0.5) FROM numeric_tbl WHERE to_hex(value2) = '64';
 round | round | round | round | round 
-------+-------+-------+-------+-------
     0 |   100 |    -0 |  -100 |     1
     0 |   100 |    -0 |  -100 |     1
     0 |   100 |    -0 |  -100 |     1
(3 rows)

-- select round (builtin function, pushdown constraints, EXPLAIN (COSTS OFF))
--Testcase 525:
EXPLAIN (COSTS OFF)
SELECT round(value1), round(value2), round(value3), round(value4), round(0.5) FROM numeric_tbl WHERE value2 != 200;
                                                                   QUERY PLAN                                                                   
------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on numeric_tbl
   Oracle query: SELECT /*ee255a287dc590cc2e754740ed3cd0e9*/ "VALUE1", "VALUE2", "VALUE3", "VALUE4" FROM  "NUMERIC_TBL" WHERE ("VALUE2" <> 200)
(2 rows)

-- select round (builtin function, pushdown constraints, result)
--Testcase 526:
SELECT round(value1), round(value2), round(value3), round(value4), round(0.5) FROM numeric_tbl WHERE value2 != 200;
 round | round | round | round | round 
-------+-------+-------+-------+-------
     0 |   100 |    -0 |  -100 |     1
     0 |   100 |    -0 |  -100 |     1
     0 |   100 |    -0 |  -100 |     1
(3 rows)

-- select round (builtin function, round in constraints, EXPLAIN (COSTS OFF))
--Testcase 527:
EXPLAIN (COSTS OFF)
SELECT round(value1), round(value2), round(value3), round(value4), round(0.5) FROM numeric_tbl WHERE round(value1) != 1;
                                                                     QUERY PLAN                                                                      
-----------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on numeric_tbl
   Oracle query: SELECT /*828487e395ac13e6d732460d29552c6f*/ "VALUE1", "VALUE2", "VALUE3", "VALUE4" FROM  "NUMERIC_TBL" WHERE (round("VALUE1") <> 1)
(2 rows)

-- select round (builtin function, round in constraints, result)
--Testcase 528:
SELECT round(value1), round(value2), round(value3), round(value4), round(0.5) FROM numeric_tbl WHERE round(value1) != 1;
 round | round | round | round | round 
-------+-------+-------+-------+-------
     0 |   100 |    -0 |  -100 |     1
     0 |   100 |    -0 |  -100 |     1
     0 |   100 |    -0 |  -100 |     1
     2 |   200 |    -2 |  -200 |     1
     3 |   200 |    -3 |  -200 |     1
(5 rows)

-- select round (builtin function, round in constraints, EXPLAIN (COSTS OFF))
--Testcase 529:
EXPLAIN (COSTS OFF)
SELECT round(value1), round(value2), round(value3), round(value4), round(0.5) FROM numeric_tbl WHERE round(0.5) > value1;
                                                                 QUERY PLAN                                                                  
---------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on numeric_tbl
   Oracle query: SELECT /*886c3fbac6910e2aa6cbd3ac40b5674c*/ "VALUE1", "VALUE2", "VALUE3", "VALUE4" FROM  "NUMERIC_TBL" WHERE (1 > "VALUE1")
(2 rows)

-- select round (builtin function, round in constraints, result)
--Testcase 530:
SELECT round(value1), round(value2), round(value3), round(value4), round(0.5) FROM numeric_tbl WHERE round(0.5) > value1;
 round | round | round | round | round 
-------+-------+-------+-------+-------
     0 |   100 |    -0 |  -100 |     1
     0 |   100 |    -0 |  -100 |     1
     0 |   100 |    -0 |  -100 |     1
(3 rows)

-- select round as nest function with agg (pushdown, EXPLAIN (COSTS OFF))
--Testcase 531:
EXPLAIN (COSTS OFF)
SELECT sum(value3),round(sum(value3)) FROM numeric_tbl;
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Foreign Scan
   Oracle query: SELECT /*449e6bfdc4a96f148c9148b846e888fd*/ sum("VALUE3"), round(sum("VALUE3")) FROM  "NUMERIC_TBL"
(2 rows)

-- select round as nest function with agg (pushdown, result)
--Testcase 532:
SELECT sum(value3),round(sum(value3)) FROM numeric_tbl;
 sum  | round 
------+-------
 -7.2 |    -7
(1 row)

-- select round as nest with log2 (pushdown, EXPLAIN (COSTS OFF))
--Testcase 533:
EXPLAIN (COSTS OFF)
SELECT round(log(2, value2)) FROM numeric_tbl;
                                        QUERY PLAN                                        
------------------------------------------------------------------------------------------
 Foreign Scan on numeric_tbl
   Oracle query: SELECT /*942bf85feb96f605a79f40dffa8f6645*/ "VALUE2" FROM  "NUMERIC_TBL"
(2 rows)

-- select round as nest with log2 (pushdown, result)
--Testcase 534:
SELECT round(log(2, value2)) FROM numeric_tbl;
 round 
-------
     7
     7
     7
     8
     8
     8
(6 rows)

-- select round with non pushdown func and explicit constant (EXPLAIN (COSTS OFF))
--Testcase 535:
EXPLAIN (COSTS OFF)
SELECT round(value3), pi(), 4.1 FROM numeric_tbl;
                                        QUERY PLAN                                        
------------------------------------------------------------------------------------------
 Foreign Scan on numeric_tbl
   Oracle query: SELECT /*b3d9f3348edc9fa53b73cdc5d271b426*/ "VALUE3" FROM  "NUMERIC_TBL"
(2 rows)

-- select round with non pushdown func and explicit constant (result)
--Testcase 536:
SELECT round(value3), pi(), 4.1 FROM numeric_tbl;
 round |        pi         | ?column? 
-------+-------------------+----------
    -0 | 3.141592653589793 |      4.1
    -0 | 3.141592653589793 |      4.1
    -0 | 3.141592653589793 |      4.1
    -1 | 3.141592653589793 |      4.1
    -2 | 3.141592653589793 |      4.1
    -3 | 3.141592653589793 |      4.1
(6 rows)

-- select round with order by (EXPLAIN (COSTS OFF))
--Testcase 537:
EXPLAIN (COSTS OFF)
SELECT value1, round(1-value3) FROM numeric_tbl ORDER BY round(1-value3);
                                                                    QUERY PLAN                                                                    
--------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on numeric_tbl
   Oracle query: SELECT /*ebd89618059d39fa07937a17e8fa92dc*/ "VALUE1", "VALUE3" FROM  "NUMERIC_TBL" ORDER BY round((1 - "VALUE3")) ASC NULLS LAST
(2 rows)

-- select round with order by (result)
--Testcase 538:
SELECT value1, round(1-value3) FROM numeric_tbl ORDER BY round(1-value3);
 value1 | round 
--------+-------
    0.1 |     1
    0.2 |     1
    0.3 |     1
    1.1 |     2
    2.2 |     3
    3.3 |     4
(6 rows)

-- select round with order by index (result)
--Testcase 539:
SELECT value1, round(1-value3) FROM numeric_tbl ORDER BY 2,1;
 value1 | round 
--------+-------
    0.1 |     1
    0.2 |     1
    0.3 |     1
    1.1 |     2
    2.2 |     3
    3.3 |     4
(6 rows)

-- select round with order by index (result)
--Testcase 540:
SELECT value1, round(1-value3) FROM numeric_tbl ORDER BY 1,2;
 value1 | round 
--------+-------
    0.1 |     1
    0.2 |     1
    0.3 |     1
    1.1 |     2
    2.2 |     3
    3.3 |     4
(6 rows)

-- select round with group by (EXPLAIN (COSTS OFF))
--Testcase 541:
EXPLAIN (COSTS OFF)
SELECT count(value1), round(1-value3) FROM numeric_tbl GROUP BY round(1-value3);
                                                                       QUERY PLAN                                                                        
---------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan
   Oracle query: SELECT /*0cd2da69f630a1d5d9d3d2882cc050e1*/ count("VALUE1"), round((1 - "VALUE3")) FROM  "NUMERIC_TBL" GROUP BY (round((1 - "VALUE3")))
(2 rows)

-- select round with group by (result)
--Testcase 542:
SELECT count(value1), round(1-value3) FROM numeric_tbl GROUP BY round(1-value3);
 count | round 
-------+-------
     3 |     1
     1 |     2
     1 |     3
     1 |     4
(4 rows)

-- select round with group by index (result)
--Testcase 543:
SELECT value1, round(1-value3) FROM numeric_tbl GROUP BY 2,1;
 value1 | round 
--------+-------
    0.1 |     1
    0.2 |     1
    0.3 |     1
    1.1 |     2
    2.2 |     3
    3.3 |     4
(6 rows)

-- select round with group by index (result)
--Testcase 544:
SELECT value1, round(1-value3) FROM numeric_tbl GROUP BY 1,2;
 value1 | round 
--------+-------
    0.1 |     1
    0.2 |     1
    0.3 |     1
    1.1 |     2
    2.2 |     3
    3.3 |     4
(6 rows)

-- select round with group by having (EXPLAIN (COSTS OFF))
--Testcase 545:
EXPLAIN (COSTS OFF)
SELECT count(value1), round(1-value3) FROM numeric_tbl GROUP BY round(1-value3) HAVING round(avg(value1)) > 0;
                                                                                        QUERY PLAN                                                                                         
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan
   Oracle query: SELECT /*8fc91ea5d0093623ec316f5d649326b4*/ count("VALUE1"), round((1 - "VALUE3")) FROM  "NUMERIC_TBL" GROUP BY (round((1 - "VALUE3"))) HAVING (round(avg("VALUE1")) > 0)
(2 rows)

-- select round with group by having (result)
--Testcase 546:
SELECT count(value1), round(1-value3) FROM numeric_tbl GROUP BY round(1-value3) HAVING round(avg(value1)) > 0;
 count | round 
-------+-------
     1 |     2
     1 |     3
     1 |     4
(3 rows)

-- select round with group by index having (result)
--Testcase 547:
SELECT value1, round(1-value3) FROM numeric_tbl GROUP BY 2,1 HAVING round(1-value3) > 0;
 value1 | round 
--------+-------
    0.1 |     1
    0.2 |     1
    0.3 |     1
    1.1 |     2
    2.2 |     3
    3.3 |     4
(6 rows)

-- select round with group by index having (result)
--Testcase 548:
SELECT value1, round(1-value3) FROM numeric_tbl GROUP BY 1,2 HAVING value1 > 1;
 value1 | round 
--------+-------
    1.1 |     2
    2.2 |     3
    3.3 |     4
(3 rows)

-- select round and as
--Testcase 549:
SELECT round(value3) as round1 FROM numeric_tbl;
 round1 
--------
     -0
     -0
     -0
     -1
     -2
     -3
(6 rows)

-- ===============================================================================
-- test rpad()
-- ===============================================================================
-- select rpad (stub function, EXPLAIN (COSTS OFF))
--Testcase 550:
EXPLAIN (COSTS OFF)
SELECT rpad(str1, 16, str2), rpad(str1, 4, str2) FROM numeric_tbl;
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Foreign Scan on numeric_tbl
   Oracle query: SELECT /*b5e3ceef645293200ae015baf22fc9f6*/ "STR1", "STR2" FROM  "NUMERIC_TBL"
(2 rows)

-- select rpad (stub function, result)
--Testcase 551:
SELECT rpad(str1, 16, str2), rpad(str1, 4, str2) FROM numeric_tbl;
       rpad       | rpad 
------------------+------
 ---XYZ---   abc  | ---X
 ---XYZ---   abc  | ---X
 ---XYZ---   abc  | ---X
 ---XYZ---   abc  | ---X
 ---XYZ---   abc  | ---X
 ---XYZ---   abc  | ---X
(6 rows)

-- select rpad (stub function, not pushdown constraints, EXPLAIN (COSTS OFF))
--Testcase 552:
EXPLAIN (COSTS OFF)
SELECT value1, rpad(str1, 16, str2) FROM numeric_tbl WHERE to_hex(value2) = '64';
                                                     QUERY PLAN                                                     
--------------------------------------------------------------------------------------------------------------------
 Foreign Scan on numeric_tbl
   Filter: (to_hex(value2) = '64'::text)
   Oracle query: SELECT /*7aa8b2846c64d0f025072a118cf8dc3a*/ "VALUE1", "VALUE2", "STR1", "STR2" FROM  "NUMERIC_TBL"
(3 rows)

-- select rpad (stub function, not pushdown constraints, result)
--Testcase 553:
SELECT value1, rpad(str1, 16, str2) FROM numeric_tbl WHERE to_hex(value2) = '64';
 value1 |       rpad       
--------+------------------
    0.1 | ---XYZ---   abc 
    0.2 | ---XYZ---   abc 
    0.3 | ---XYZ---   abc 
(3 rows)

-- select rpad (stub function, pushdown constraints, EXPLAIN (COSTS OFF))
--Testcase 554:
EXPLAIN (COSTS OFF)
SELECT value1, rpad(str1, 16, str2) FROM numeric_tbl WHERE value2 != 200;
                                                            QUERY PLAN                                                            
----------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on numeric_tbl
   Oracle query: SELECT /*9aac24d90af0c2dac6f359e50ec86111*/ "VALUE1", "STR1", "STR2" FROM  "NUMERIC_TBL" WHERE ("VALUE2" <> 200)
(2 rows)

-- select rpad (stub function, pushdown constraints, result)
--Testcase 555:
SELECT value1, rpad(str1, 16, str2) FROM numeric_tbl WHERE value2 != 200;
 value1 |       rpad       
--------+------------------
    0.1 | ---XYZ---   abc 
    0.2 | ---XYZ---   abc 
    0.3 | ---XYZ---   abc 
(3 rows)

-- select rpad with non pushdown func and explicit constant (EXPLAIN (COSTS OFF))
--Testcase 556:
EXPLAIN (COSTS OFF)
SELECT rpad(str1, 16, str2), pi(), 4.1 FROM numeric_tbl;
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Foreign Scan on numeric_tbl
   Oracle query: SELECT /*b5e3ceef645293200ae015baf22fc9f6*/ "STR1", "STR2" FROM  "NUMERIC_TBL"
(2 rows)

-- select rpad with non pushdown func and explicit constant (result)
--Testcase 557:
SELECT rpad(str1, 16, str2), pi(), 4.1 FROM numeric_tbl;
       rpad       |        pi         | ?column? 
------------------+-------------------+----------
 ---XYZ---   abc  | 3.141592653589793 |      4.1
 ---XYZ---   abc  | 3.141592653589793 |      4.1
 ---XYZ---   abc  | 3.141592653589793 |      4.1
 ---XYZ---   abc  | 3.141592653589793 |      4.1
 ---XYZ---   abc  | 3.141592653589793 |      4.1
 ---XYZ---   abc  | 3.141592653589793 |      4.1
(6 rows)

-- select rpad with order by (EXPLAIN (COSTS OFF))
--Testcase 558:
EXPLAIN (COSTS OFF)
SELECT value1, rpad(str1, 16, str2) FROM numeric_tbl ORDER BY rpad(str1, 16, str2);
                                                   QUERY PLAN                                                   
----------------------------------------------------------------------------------------------------------------
 Sort
   Sort Key: (rpad(str1, 16, str2))
   ->  Foreign Scan on numeric_tbl
         Oracle query: SELECT /*9ad3f2ffabf772687045763ec071c0d3*/ "VALUE1", "STR1", "STR2" FROM  "NUMERIC_TBL"
(4 rows)

-- select rpad with order by (result)
--Testcase 559:
SELECT value1, rpad(str1, 16, str2) FROM numeric_tbl ORDER BY rpad(str1, 16, str2);
 value1 |       rpad       
--------+------------------
    0.1 | ---XYZ---   abc 
    0.2 | ---XYZ---   abc 
    0.3 | ---XYZ---   abc 
    1.1 | ---XYZ---   abc 
    2.2 | ---XYZ---   abc 
    3.3 | ---XYZ---   abc 
(6 rows)

-- select rpad with order by index (result)
--Testcase 560:
SELECT value1, rpad(str1, 16, str2) FROM numeric_tbl ORDER BY 2,1;
 value1 |       rpad       
--------+------------------
    0.1 | ---XYZ---   abc 
    0.2 | ---XYZ---   abc 
    0.3 | ---XYZ---   abc 
    1.1 | ---XYZ---   abc 
    2.2 | ---XYZ---   abc 
    3.3 | ---XYZ---   abc 
(6 rows)

-- select rpad with order by index (result)
--Testcase 561:
SELECT value1, rpad(str1, 16, str2) FROM numeric_tbl ORDER BY 1,2;
 value1 |       rpad       
--------+------------------
    0.1 | ---XYZ---   abc 
    0.2 | ---XYZ---   abc 
    0.3 | ---XYZ---   abc 
    1.1 | ---XYZ---   abc 
    2.2 | ---XYZ---   abc 
    3.3 | ---XYZ---   abc 
(6 rows)

-- select rpad with group by (EXPLAIN (COSTS OFF))
--Testcase 562:
EXPLAIN (COSTS OFF)
SELECT count(value1), rpad(str1, 16, str2) FROM numeric_tbl GROUP BY rpad(str1, 16, str2);
                                                                          QUERY PLAN                                                                           
---------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan
   Oracle query: SELECT /*f42f4f333d7f57675ec1d3d8ac488b1b*/ count("VALUE1"), rpad("STR1", 16, "STR2") FROM  "NUMERIC_TBL" GROUP BY (rpad("STR1", 16, "STR2"))
(2 rows)

-- select rpad with group by (result)
--Testcase 563:
SELECT count(value1), rpad(str1, 16, str2) FROM numeric_tbl GROUP BY rpad(str1, 16, str2);
 count |       rpad       
-------+------------------
     6 | ---XYZ---   abc 
(1 row)

-- select rpad with group by index (result)
--Testcase 564:
SELECT value1, rpad(str1, 16, str2) FROM numeric_tbl GROUP BY 2,1;
 value1 |       rpad       
--------+------------------
    0.1 | ---XYZ---   abc 
    0.2 | ---XYZ---   abc 
    0.3 | ---XYZ---   abc 
    1.1 | ---XYZ---   abc 
    2.2 | ---XYZ---   abc 
    3.3 | ---XYZ---   abc 
(6 rows)

-- select rpad with group by having (EXPLAIN (COSTS OFF))
--Testcase 565:
EXPLAIN (COSTS OFF)
SELECT count(value1), rpad(str1, 16, str2) FROM numeric_tbl GROUP BY rpad(str1, 16, str2) HAVING rpad(str1, 16, str2) IS NOT NULL;
                                                                                                 QUERY PLAN                                                                                                 
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan
   Oracle query: SELECT /*b2146287fa985d8685149d3ed38a996c*/ count("VALUE1"), rpad("STR1", 16, "STR2") FROM  "NUMERIC_TBL" WHERE (rpad("STR1", 16, "STR2") IS NOT NULL) GROUP BY (rpad("STR1", 16, "STR2"))
(2 rows)

-- select rpad with group by having (result)
--Testcase 566:
SELECT count(value1), rpad(str1, 16, str2) FROM numeric_tbl GROUP BY rpad(str1, 16, str2) HAVING rpad(str1, 16, str2) IS NOT NULL;
 count |       rpad       
-------+------------------
     6 | ---XYZ---   abc 
(1 row)

-- select rpad with group by index having (result)
--Testcase 567:
SELECT value1, rpad(str1, 16, str2) FROM numeric_tbl GROUP BY 1,2 HAVING value1 > 1;
 value1 |       rpad       
--------+------------------
    1.1 | ---XYZ---   abc 
    2.2 | ---XYZ---   abc 
    3.3 | ---XYZ---   abc 
(3 rows)

-- ===============================================================================
-- test rtrim()
-- ===============================================================================
-- select rtrim (stub function, EXPLAIN (COSTS OFF))
--Testcase 568:
EXPLAIN (COSTS OFF)
SELECT rtrim(str1), rtrim(str2, ' ') FROM numeric_tbl;
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Foreign Scan on numeric_tbl
   Oracle query: SELECT /*b5e3ceef645293200ae015baf22fc9f6*/ "STR1", "STR2" FROM  "NUMERIC_TBL"
(2 rows)

-- select rtrim (stub function, result)
--Testcase 569:
SELECT rtrim(str1), rtrim(str2, ' ') FROM numeric_tbl;
   rtrim   | rtrim  
-----------+--------
 ---XYZ--- |    abc
 ---XYZ--- |    abc
 ---XYZ--- |    abc
 ---XYZ--- |    abc
 ---XYZ--- |    abc
 ---XYZ--- |    abc
(6 rows)

-- select rtrim (stub function, not pushdown constraints, EXPLAIN (COSTS OFF))
--Testcase 570:
EXPLAIN (COSTS OFF)
SELECT value1, rtrim(str1, '-') FROM numeric_tbl WHERE to_hex(value2) = '64';
                                                 QUERY PLAN                                                 
------------------------------------------------------------------------------------------------------------
 Foreign Scan on numeric_tbl
   Filter: (to_hex(value2) = '64'::text)
   Oracle query: SELECT /*635e8508e85d53b1d7588d2faf1d9dce*/ "VALUE1", "VALUE2", "STR1" FROM  "NUMERIC_TBL"
(3 rows)

-- select rtrim (stub function, not pushdown constraints, result)
--Testcase 571:
SELECT value1, rtrim(str1, '-') FROM numeric_tbl WHERE to_hex(value2) = '64';
 value1 | rtrim  
--------+--------
    0.1 | ---XYZ
    0.2 | ---XYZ
    0.3 | ---XYZ
(3 rows)

-- select rtrim (stub function, pushdown constraints, EXPLAIN (COSTS OFF))
--Testcase 572:
EXPLAIN (COSTS OFF)
SELECT value1, rtrim(str1, '-') FROM numeric_tbl WHERE value2 != 200;
                                                        QUERY PLAN                                                        
--------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on numeric_tbl
   Oracle query: SELECT /*7f396d83a07a7d806e4ce7625f7371d9*/ "VALUE1", "STR1" FROM  "NUMERIC_TBL" WHERE ("VALUE2" <> 200)
(2 rows)

-- select rtrim (stub function, pushdown constraints, result)
--Testcase 573:
SELECT value1, rtrim(str1, '-') FROM numeric_tbl WHERE value2 != 200;
 value1 | rtrim  
--------+--------
    0.1 | ---XYZ
    0.2 | ---XYZ
    0.3 | ---XYZ
(3 rows)

-- select rtrim with non pushdown func and explicit constant (EXPLAIN (COSTS OFF))
--Testcase 574:
EXPLAIN (COSTS OFF)
SELECT rtrim(str1, '-'), pi(), 4.1 FROM numeric_tbl;
                                       QUERY PLAN                                       
----------------------------------------------------------------------------------------
 Foreign Scan on numeric_tbl
   Oracle query: SELECT /*b0f206a14da49f63f52c0cf84e67a466*/ "STR1" FROM  "NUMERIC_TBL"
(2 rows)

-- select rtrim with non pushdown func and explicit constant (result)
--Testcase 575:
SELECT rtrim(str1, '-'), pi(), 4.1 FROM numeric_tbl;
 rtrim  |        pi         | ?column? 
--------+-------------------+----------
 ---XYZ | 3.141592653589793 |      4.1
 ---XYZ | 3.141592653589793 |      4.1
 ---XYZ | 3.141592653589793 |      4.1
 ---XYZ | 3.141592653589793 |      4.1
 ---XYZ | 3.141592653589793 |      4.1
 ---XYZ | 3.141592653589793 |      4.1
(6 rows)

-- select rtrim with order by (EXPLAIN (COSTS OFF))
--Testcase 576:
EXPLAIN (COSTS OFF)
SELECT value1, rtrim(str1, '-') FROM numeric_tbl ORDER BY rtrim(str1, '-');
                                               QUERY PLAN                                               
--------------------------------------------------------------------------------------------------------
 Sort
   Sort Key: (rtrim(str1, '-'::text))
   ->  Foreign Scan on numeric_tbl
         Oracle query: SELECT /*adc4aceb6c6364fd12224d4c1ad89a55*/ "VALUE1", "STR1" FROM  "NUMERIC_TBL"
(4 rows)

-- select rtrim with order by (result)
--Testcase 577:
SELECT value1, rtrim(str1, '-') FROM numeric_tbl ORDER BY rtrim(str1, '-');
 value1 | rtrim  
--------+--------
    0.1 | ---XYZ
    0.2 | ---XYZ
    0.3 | ---XYZ
    1.1 | ---XYZ
    2.2 | ---XYZ
    3.3 | ---XYZ
(6 rows)

-- select rtrim with order by index (result)
--Testcase 578:
SELECT value1, rtrim(str1, '-') FROM numeric_tbl ORDER BY 2,1;
 value1 | rtrim  
--------+--------
    0.1 | ---XYZ
    0.2 | ---XYZ
    0.3 | ---XYZ
    1.1 | ---XYZ
    2.2 | ---XYZ
    3.3 | ---XYZ
(6 rows)

-- select rtrim with order by index (result)
--Testcase 579:
SELECT value1, rtrim(str1, '-') FROM numeric_tbl ORDER BY 1,2;
 value1 | rtrim  
--------+--------
    0.1 | ---XYZ
    0.2 | ---XYZ
    0.3 | ---XYZ
    1.1 | ---XYZ
    2.2 | ---XYZ
    3.3 | ---XYZ
(6 rows)

-- select rtrim with group by (EXPLAIN (COSTS OFF))
--Testcase 580:
EXPLAIN (COSTS OFF)
SELECT count(value1), rtrim(str1, '-') FROM numeric_tbl GROUP BY rtrim(str1, '-');
                                                                    QUERY PLAN                                                                     
---------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan
   Oracle query: SELECT /*75bee9b7a1342b470c92e1c457492acb*/ count("VALUE1"), rtrim("STR1", '-') FROM  "NUMERIC_TBL" GROUP BY (rtrim("STR1", '-'))
(2 rows)

-- select rtrim with group by (result)
--Testcase 581:
SELECT count(value1), rtrim(str1, '-') FROM numeric_tbl GROUP BY rtrim(str1, '-');
 count | rtrim  
-------+--------
     6 | ---XYZ
(1 row)

-- select rtrim with group by index (result)
--Testcase 582:
SELECT value1, rtrim(str2) FROM numeric_tbl GROUP BY 2,1;
 value1 | rtrim  
--------+--------
    0.1 |    abc
    0.2 |    abc
    0.3 |    abc
    1.1 |    abc
    2.2 |    abc
    3.3 |    abc
(6 rows)

-- select rtrim with group by having (EXPLAIN (COSTS OFF))
--Testcase 583:
EXPLAIN (COSTS OFF)
SELECT count(value1), rtrim(str1, '-') FROM numeric_tbl GROUP BY rtrim(str1, '-') HAVING rtrim(str1, '-') IS NOT NULL;
                                                                                        QUERY PLAN                                                                                        
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan
   Oracle query: SELECT /*69fc2e3c8f0176218e727451fb5c7d85*/ count("VALUE1"), rtrim("STR1", '-') FROM  "NUMERIC_TBL" WHERE (rtrim("STR1", '-') IS NOT NULL) GROUP BY (rtrim("STR1", '-'))
(2 rows)

-- select rtrim with group by having (result)
--Testcase 584:
SELECT count(value1), rtrim(str1, '-') FROM numeric_tbl GROUP BY rtrim(str1, '-') HAVING rtrim(str1, '-') IS NOT NULL;
 count | rtrim  
-------+--------
     6 | ---XYZ
(1 row)

-- select rtrim with group by index having (result)
--Testcase 585:
SELECT value1, rtrim(str1, '-') FROM numeric_tbl GROUP BY 1,2 HAVING value1 > 1;
 value1 | rtrim  
--------+--------
    1.1 | ---XYZ
    2.2 | ---XYZ
    3.3 | ---XYZ
(3 rows)

-- ===============================================================================
-- test sign()
-- ===============================================================================
-- select sign (builtin function, EXPLAIN (COSTS OFF))
--Testcase 586:
EXPLAIN (COSTS OFF)
SELECT sign(value1), sign(value2), sign(value3), sign(value4), sign(0.5) FROM numeric_tbl;
                                                       QUERY PLAN                                                       
------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on numeric_tbl
   Oracle query: SELECT /*3a3e9ce1642025dfd6451e15cf1fadd9*/ "VALUE1", "VALUE2", "VALUE3", "VALUE4" FROM  "NUMERIC_TBL"
(2 rows)

-- select sign (builtin function, result)
--Testcase 587:
SELECT sign(value1), sign(value2), sign(value3), sign(value4), sign(0.5) FROM numeric_tbl;
 sign | sign | sign | sign | sign 
------+------+------+------+------
    1 |    1 |   -1 |   -1 |    1
    1 |    1 |   -1 |   -1 |    1
    1 |    1 |   -1 |   -1 |    1
    1 |    1 |   -1 |   -1 |    1
    1 |    1 |   -1 |   -1 |    1
    1 |    1 |   -1 |   -1 |    1
(6 rows)

-- select sign (builtin function, not pushdown constraints, EXPLAIN (COSTS OFF))
--Testcase 588:
EXPLAIN (COSTS OFF)
SELECT sign(value1), sign(value2), sign(value3), sign(value4), sign(0.5) FROM numeric_tbl WHERE to_hex(value2) = '64';
                                                       QUERY PLAN                                                       
------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on numeric_tbl
   Filter: (to_hex(value2) = '64'::text)
   Oracle query: SELECT /*3a3e9ce1642025dfd6451e15cf1fadd9*/ "VALUE1", "VALUE2", "VALUE3", "VALUE4" FROM  "NUMERIC_TBL"
(3 rows)

-- select sign (builtin function, not pushdown constraints, result)
--Testcase 589:
SELECT sign(value1), sign(value2), sign(value3), sign(value4), sign(0.5) FROM numeric_tbl WHERE to_hex(value2) = '64';
 sign | sign | sign | sign | sign 
------+------+------+------+------
    1 |    1 |   -1 |   -1 |    1
    1 |    1 |   -1 |   -1 |    1
    1 |    1 |   -1 |   -1 |    1
(3 rows)

-- select sign (builtin function, pushdown constraints, EXPLAIN (COSTS OFF))
--Testcase 590:
EXPLAIN (COSTS OFF)
SELECT sign(value1), sign(value2), sign(value3), sign(value4), sign(0.5) FROM numeric_tbl WHERE value2 != 200;
                                                                   QUERY PLAN                                                                   
------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on numeric_tbl
   Oracle query: SELECT /*ee255a287dc590cc2e754740ed3cd0e9*/ "VALUE1", "VALUE2", "VALUE3", "VALUE4" FROM  "NUMERIC_TBL" WHERE ("VALUE2" <> 200)
(2 rows)

-- select sign (builtin function, pushdown constraints, result)
--Testcase 591:
SELECT sign(value1), sign(value2), sign(value3), sign(value4), sign(0.5) FROM numeric_tbl WHERE value2 != 200;
 sign | sign | sign | sign | sign 
------+------+------+------+------
    1 |    1 |   -1 |   -1 |    1
    1 |    1 |   -1 |   -1 |    1
    1 |    1 |   -1 |   -1 |    1
(3 rows)

-- select sign (builtin function, sign in constraints, EXPLAIN (COSTS OFF))
--Testcase 592:
EXPLAIN (COSTS OFF)
SELECT sign(value1), sign(value2), sign(value3), sign(value4), sign(0.5) FROM numeric_tbl WHERE sign(value1) != -1;
                                                                     QUERY PLAN                                                                      
-----------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on numeric_tbl
   Oracle query: SELECT /*95d6cf7dba915b042a86d3cb7c5318dc*/ "VALUE1", "VALUE2", "VALUE3", "VALUE4" FROM  "NUMERIC_TBL" WHERE (sign("VALUE1") <> -1)
(2 rows)

-- select sign (builtin function, sign in constraints, result)
--Testcase 593:
SELECT sign(value1), sign(value2), sign(value3), sign(value4), sign(0.5) FROM numeric_tbl WHERE sign(value1) != -1;
 sign | sign | sign | sign | sign 
------+------+------+------+------
    1 |    1 |   -1 |   -1 |    1
    1 |    1 |   -1 |   -1 |    1
    1 |    1 |   -1 |   -1 |    1
    1 |    1 |   -1 |   -1 |    1
    1 |    1 |   -1 |   -1 |    1
    1 |    1 |   -1 |   -1 |    1
(6 rows)

-- select sign (builtin function, sign in constraints, EXPLAIN (COSTS OFF))
--Testcase 594:
EXPLAIN (COSTS OFF)
SELECT sign(value1), sign(value2), sign(value3), sign(value4), sign(0.5) FROM numeric_tbl WHERE sign(0.5) > value1;
                                                                 QUERY PLAN                                                                  
---------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on numeric_tbl
   Oracle query: SELECT /*886c3fbac6910e2aa6cbd3ac40b5674c*/ "VALUE1", "VALUE2", "VALUE3", "VALUE4" FROM  "NUMERIC_TBL" WHERE (1 > "VALUE1")
(2 rows)

-- select sign (builtin function, sign in constraints, result)
--Testcase 595:
SELECT sign(value1), sign(value2), sign(value3), sign(value4), sign(0.5) FROM numeric_tbl WHERE sign(0.5) > value1;
 sign | sign | sign | sign | sign 
------+------+------+------+------
    1 |    1 |   -1 |   -1 |    1
    1 |    1 |   -1 |   -1 |    1
    1 |    1 |   -1 |   -1 |    1
(3 rows)

-- select sign as nest function with agg (pushdown, EXPLAIN (COSTS OFF))
--Testcase 596:
EXPLAIN (COSTS OFF)
SELECT sum(value3),sign(sum(value3)) FROM numeric_tbl;
                                                     QUERY PLAN                                                     
--------------------------------------------------------------------------------------------------------------------
 Foreign Scan
   Oracle query: SELECT /*65bd6cdb2b6cc2f03121ae6377fbb45f*/ sum("VALUE3"), sign(sum("VALUE3")) FROM  "NUMERIC_TBL"
(2 rows)

-- select sign as nest function with agg (pushdown, result)
--Testcase 597:
SELECT sum(value3),sign(sum(value3)) FROM numeric_tbl;
 sum  | sign 
------+------
 -7.2 |   -1
(1 row)

-- select sign as nest with log2 (pushdown, EXPLAIN (COSTS OFF))
--Testcase 598:
EXPLAIN (COSTS OFF)
SELECT sign(log(2, value2)) FROM numeric_tbl;
                                        QUERY PLAN                                        
------------------------------------------------------------------------------------------
 Foreign Scan on numeric_tbl
   Oracle query: SELECT /*942bf85feb96f605a79f40dffa8f6645*/ "VALUE2" FROM  "NUMERIC_TBL"
(2 rows)

-- select sign as nest with log2 (pushdown, result)
--Testcase 599:
SELECT sign(log(2, value2)) FROM numeric_tbl;
 sign 
------
    1
    1
    1
    1
    1
    1
(6 rows)

-- select sign with non pushdown func and explicit constant (EXPLAIN (COSTS OFF))
--Testcase 600:
EXPLAIN (COSTS OFF)
SELECT sign(value3), pi(), 4.1 FROM numeric_tbl;
                                        QUERY PLAN                                        
------------------------------------------------------------------------------------------
 Foreign Scan on numeric_tbl
   Oracle query: SELECT /*b3d9f3348edc9fa53b73cdc5d271b426*/ "VALUE3" FROM  "NUMERIC_TBL"
(2 rows)

-- select sign with non pushdown func and explicit constant (result)
--Testcase 601:
SELECT sign(value3), pi(), 4.1 FROM numeric_tbl;
 sign |        pi         | ?column? 
------+-------------------+----------
   -1 | 3.141592653589793 |      4.1
   -1 | 3.141592653589793 |      4.1
   -1 | 3.141592653589793 |      4.1
   -1 | 3.141592653589793 |      4.1
   -1 | 3.141592653589793 |      4.1
   -1 | 3.141592653589793 |      4.1
(6 rows)

-- select sign with order by (EXPLAIN (COSTS OFF))
--Testcase 602:
EXPLAIN (COSTS OFF)
SELECT value1, sign(1-value3) FROM numeric_tbl ORDER BY sign(1-value3);
                                                                   QUERY PLAN                                                                    
-------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on numeric_tbl
   Oracle query: SELECT /*f15b29dfc7c055815abac2b82886bcf8*/ "VALUE1", "VALUE3" FROM  "NUMERIC_TBL" ORDER BY sign((1 - "VALUE3")) ASC NULLS LAST
(2 rows)

-- select sign with order by (result)
--Testcase 603:
SELECT value1, sign(1-value3) FROM numeric_tbl ORDER BY sign(1-value3);
 value1 | sign 
--------+------
    0.1 |    1
    0.2 |    1
    3.3 |    1
    1.1 |    1
    2.2 |    1
    0.3 |    1
(6 rows)

-- select sign with order by index (result)
--Testcase 604:
SELECT value1, sign(1-value3) FROM numeric_tbl ORDER BY 2,1;
 value1 | sign 
--------+------
    0.1 |    1
    0.2 |    1
    0.3 |    1
    1.1 |    1
    2.2 |    1
    3.3 |    1
(6 rows)

-- select sign with order by index (result)
--Testcase 605:
SELECT value1, sign(1-value3) FROM numeric_tbl ORDER BY 1,2;
 value1 | sign 
--------+------
    0.1 |    1
    0.2 |    1
    0.3 |    1
    1.1 |    1
    2.2 |    1
    3.3 |    1
(6 rows)

-- select sign with group by (EXPLAIN (COSTS OFF))
--Testcase 606:
EXPLAIN (COSTS OFF)
SELECT count(value1), sign(1-value3) FROM numeric_tbl GROUP BY sign(1-value3);
                                                                      QUERY PLAN                                                                       
-------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan
   Oracle query: SELECT /*1f08cb69b3c174495aa627a47557beaf*/ count("VALUE1"), sign((1 - "VALUE3")) FROM  "NUMERIC_TBL" GROUP BY (sign((1 - "VALUE3")))
(2 rows)

-- select sign with group by (result)
--Testcase 607:
SELECT count(value1), sign(1-value3) FROM numeric_tbl GROUP BY sign(1-value3);
 count | sign 
-------+------
     6 |    1
(1 row)

-- select sign with group by index (result)
--Testcase 608:
SELECT value1, sign(1-value3) FROM numeric_tbl GROUP BY 2,1;
 value1 | sign 
--------+------
    0.1 |    1
    0.2 |    1
    0.3 |    1
    1.1 |    1
    2.2 |    1
    3.3 |    1
(6 rows)

-- select sign with group by index (result)
--Testcase 609:
SELECT value1, sign(1-value3) FROM numeric_tbl GROUP BY 1,2;
 value1 | sign 
--------+------
    0.1 |    1
    0.2 |    1
    0.3 |    1
    1.1 |    1
    2.2 |    1
    3.3 |    1
(6 rows)

-- select sign with group by having (EXPLAIN (COSTS OFF))
--Testcase 610:
EXPLAIN (COSTS OFF)
SELECT count(value1), sign(1-value3) FROM numeric_tbl GROUP BY sign(1-value3) HAVING sign(avg(value1)) > 0;
                                                                                       QUERY PLAN                                                                                       
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan
   Oracle query: SELECT /*327147fa984431473b2029c0202b815c*/ count("VALUE1"), sign((1 - "VALUE3")) FROM  "NUMERIC_TBL" GROUP BY (sign((1 - "VALUE3"))) HAVING (sign(avg("VALUE1")) > 0)
(2 rows)

-- select sign with group by having (result)
--Testcase 611:
SELECT count(value1), sign(1-value3) FROM numeric_tbl GROUP BY sign(1-value3) HAVING sign(avg(value1)) > 0;
 count | sign 
-------+------
     6 |    1
(1 row)

-- select sign with group by index having (result)
--Testcase 612:
SELECT value1, sign(1-value3) FROM numeric_tbl GROUP BY 2,1 HAVING sign(1-value3) > 0;
 value1 | sign 
--------+------
    0.1 |    1
    0.2 |    1
    0.3 |    1
    1.1 |    1
    2.2 |    1
    3.3 |    1
(6 rows)

-- select sign with group by index having (result)
--Testcase 613:
SELECT value1, sign(1-value3) FROM numeric_tbl GROUP BY 1,2 HAVING value1 > 1;
 value1 | sign 
--------+------
    1.1 |    1
    2.2 |    1
    3.3 |    1
(3 rows)

-- select sign and as
--Testcase 614:
SELECT sign(value3) as sign1 FROM numeric_tbl;
 sign1 
-------
    -1
    -1
    -1
    -1
    -1
    -1
(6 rows)

-- ===============================================================================
-- test sin()
-- ===============================================================================
-- select sin (builtin function, EXPLAIN (COSTS OFF))
--Testcase 615:
EXPLAIN (COSTS OFF)
SELECT value1, sin(value2), sin(value3), sin(value4), sin(0.5) FROM numeric_tbl;
                                                       QUERY PLAN                                                       
------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on numeric_tbl
   Oracle query: SELECT /*3a3e9ce1642025dfd6451e15cf1fadd9*/ "VALUE1", "VALUE2", "VALUE3", "VALUE4" FROM  "NUMERIC_TBL"
(2 rows)

-- select sin (builtin function, result)
--Testcase 616:
SELECT value1, sin(value2), sin(value3), sin(value4), sin(0.5) FROM numeric_tbl;
 value1 |         sin         |         sin          |        sin         |        sin        
--------+---------------------+----------------------+--------------------+-------------------
    0.1 | -0.5063656411097588 | -0.09983341664682815 | 0.5063656411097588 | 0.479425538604203
    0.2 | -0.5063656411097588 | -0.19866933079506122 | 0.5063656411097588 | 0.479425538604203
    0.3 | -0.5063656411097588 | -0.29552020666133955 | 0.5063656411097588 | 0.479425538604203
    1.1 | -0.8732972972139946 |  -0.8912073600614354 | 0.8732972972139946 | 0.479425538604203
    2.2 | -0.8732972972139946 |  -0.8084964038195901 | 0.8732972972139946 | 0.479425538604203
    3.3 | -0.8732972972139946 |   0.1577456941432482 | 0.8732972972139946 | 0.479425538604203
(6 rows)

-- select sin (builtin function, not pushdown constraints, EXPLAIN (COSTS OFF))
--Testcase 617:
EXPLAIN (COSTS OFF)
SELECT sin(value1), sin(value2), sin(value3), sin(value4), sin(0.5) FROM numeric_tbl WHERE to_hex(value2) = '64';
                                                       QUERY PLAN                                                       
------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on numeric_tbl
   Filter: (to_hex(value2) = '64'::text)
   Oracle query: SELECT /*3a3e9ce1642025dfd6451e15cf1fadd9*/ "VALUE1", "VALUE2", "VALUE3", "VALUE4" FROM  "NUMERIC_TBL"
(3 rows)

-- select sin (builtin function, not pushdown constraints, result)
--Testcase 618:
SELECT sin(value1), sin(value2), sin(value3), sin(value4), sin(0.5) FROM numeric_tbl WHERE to_hex(value2) = '64';
         sin         |         sin         |         sin          |        sin         |        sin        
---------------------+---------------------+----------------------+--------------------+-------------------
 0.09983341664682815 | -0.5063656411097588 | -0.09983341664682815 | 0.5063656411097588 | 0.479425538604203
 0.19866933079506122 | -0.5063656411097588 | -0.19866933079506122 | 0.5063656411097588 | 0.479425538604203
 0.29552020666133955 | -0.5063656411097588 | -0.29552020666133955 | 0.5063656411097588 | 0.479425538604203
(3 rows)

-- select sin (builtin function, pushdown constraints, EXPLAIN (COSTS OFF))
--Testcase 619:
EXPLAIN (COSTS OFF)
SELECT sin(value1), sin(value2), sin(value3), sin(value4), sin(0.5) FROM numeric_tbl WHERE value2 != 200;
                                                                   QUERY PLAN                                                                   
------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on numeric_tbl
   Oracle query: SELECT /*ee255a287dc590cc2e754740ed3cd0e9*/ "VALUE1", "VALUE2", "VALUE3", "VALUE4" FROM  "NUMERIC_TBL" WHERE ("VALUE2" <> 200)
(2 rows)

-- select sin (builtin function, pushdown constraints, result)
--Testcase 620:
SELECT sin(value1), sin(value2), sin(value3), sin(value4), sin(0.5) FROM numeric_tbl WHERE value2 != 200;
         sin         |         sin         |         sin          |        sin         |        sin        
---------------------+---------------------+----------------------+--------------------+-------------------
 0.09983341664682815 | -0.5063656411097588 | -0.09983341664682815 | 0.5063656411097588 | 0.479425538604203
 0.19866933079506122 | -0.5063656411097588 | -0.19866933079506122 | 0.5063656411097588 | 0.479425538604203
 0.29552020666133955 | -0.5063656411097588 | -0.29552020666133955 | 0.5063656411097588 | 0.479425538604203
(3 rows)

-- select sin (builtin function, sin in constraints, EXPLAIN (COSTS OFF))
--Testcase 621:
EXPLAIN (COSTS OFF)
SELECT value1, sin(value2), sin(value3), sin(value4), sin(0.5) FROM numeric_tbl WHERE sin(value1) != 1;
                                                                    QUERY PLAN                                                                     
---------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on numeric_tbl
   Oracle query: SELECT /*c1f50d1ae42bc80902a61328c5f82a0a*/ "VALUE1", "VALUE2", "VALUE3", "VALUE4" FROM  "NUMERIC_TBL" WHERE (sin("VALUE1") <> 1)
(2 rows)

-- select sin (builtin function, sin in constraints, result)
--Testcase 622:
SELECT value1, sin(value2), sin(value3), sin(value4), sin(0.5) FROM numeric_tbl WHERE sin(value1) != 1;
 value1 |         sin         |         sin          |        sin         |        sin        
--------+---------------------+----------------------+--------------------+-------------------
    0.1 | -0.5063656411097588 | -0.09983341664682815 | 0.5063656411097588 | 0.479425538604203
    0.2 | -0.5063656411097588 | -0.19866933079506122 | 0.5063656411097588 | 0.479425538604203
    0.3 | -0.5063656411097588 | -0.29552020666133955 | 0.5063656411097588 | 0.479425538604203
    1.1 | -0.8732972972139946 |  -0.8912073600614354 | 0.8732972972139946 | 0.479425538604203
    2.2 | -0.8732972972139946 |  -0.8084964038195901 | 0.8732972972139946 | 0.479425538604203
    3.3 | -0.8732972972139946 |   0.1577456941432482 | 0.8732972972139946 | 0.479425538604203
(6 rows)

-- select sin (builtin function, sin in constraints, EXPLAIN (COSTS OFF))
--Testcase 623:
EXPLAIN (COSTS OFF)
SELECT sin(value1), sin(value2), sin(value3), sin(value4), sin(0.5) FROM numeric_tbl WHERE sin(0.5) > value1;
                                                                         QUERY PLAN                                                                          
-------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on numeric_tbl
   Oracle query: SELECT /*eb5bfff2249cb68388ccc64b7d6bd76f*/ "VALUE1", "VALUE2", "VALUE3", "VALUE4" FROM  "NUMERIC_TBL" WHERE (0.479425538604203 > "VALUE1")
(2 rows)

-- select sin (builtin function, sin in constraints, result)
--Testcase 624:
SELECT sin(value1), sin(value2), sin(value3), sin(value4), sin(0.5) FROM numeric_tbl WHERE sin(0.5) > value1;
         sin         |         sin         |         sin          |        sin         |        sin        
---------------------+---------------------+----------------------+--------------------+-------------------
 0.09983341664682815 | -0.5063656411097588 | -0.09983341664682815 | 0.5063656411097588 | 0.479425538604203
 0.19866933079506122 | -0.5063656411097588 | -0.19866933079506122 | 0.5063656411097588 | 0.479425538604203
 0.29552020666133955 | -0.5063656411097588 | -0.29552020666133955 | 0.5063656411097588 | 0.479425538604203
(3 rows)

-- select sin as nest function with agg (pushdown, EXPLAIN (COSTS OFF))
--Testcase 625:
EXPLAIN (COSTS OFF)
SELECT sum(value3),sin(sum(value3)) FROM numeric_tbl;
                                                    QUERY PLAN                                                     
-------------------------------------------------------------------------------------------------------------------
 Foreign Scan
   Oracle query: SELECT /*eaf86f8fceeef16d87bf9aec2111b5a4*/ sum("VALUE3"), sin(sum("VALUE3")) FROM  "NUMERIC_TBL"
(2 rows)

-- select sin as nest function with agg (pushdown, result)
--Testcase 626:
SELECT sum(value3),sin(sum(value3)) FROM numeric_tbl;
 sum  |        sin         
------+--------------------
 -7.2 | -0.793667863849153
(1 row)

-- select sin as nest with log2 (pushdown, EXPLAIN (COSTS OFF))
--Testcase 627:
EXPLAIN (COSTS OFF)
SELECT value1, sin(log(2, value2)) FROM numeric_tbl;
                                             QUERY PLAN                                             
----------------------------------------------------------------------------------------------------
 Foreign Scan on numeric_tbl
   Oracle query: SELECT /*c35678a687054ae56f3a83ca5558704c*/ "VALUE1", "VALUE2" FROM  "NUMERIC_TBL"
(2 rows)

-- select sin as nest with log2 (pushdown, result)
--Testcase 628:
SELECT value1, sin(log(2, value2)) FROM numeric_tbl;
 value1 |         sin         
--------+---------------------
    0.1 | 0.35290203084144156
    0.2 | 0.35290203084144156
    0.3 | 0.35290203084144156
    1.1 |  0.9780047569436308
    2.2 |  0.9780047569436308
    3.3 |  0.9780047569436308
(6 rows)

-- select sin with non pushdown func and explicit constant (EXPLAIN (COSTS OFF))
--Testcase 629:
EXPLAIN (COSTS OFF)
SELECT value1, sin(value3), pi(), 4.1 FROM numeric_tbl;
                                             QUERY PLAN                                             
----------------------------------------------------------------------------------------------------
 Foreign Scan on numeric_tbl
   Oracle query: SELECT /*5373ce45d4cdd3cd948843baa7cda0cc*/ "VALUE1", "VALUE3" FROM  "NUMERIC_TBL"
(2 rows)

-- select sin with non pushdown func and explicit constant (result)
--Testcase 630:
SELECT value1, sin(value3), pi(), 4.1 FROM numeric_tbl;
 value1 |         sin          |        pi         | ?column? 
--------+----------------------+-------------------+----------
    0.1 | -0.09983341664682815 | 3.141592653589793 |      4.1
    0.2 | -0.19866933079506122 | 3.141592653589793 |      4.1
    0.3 | -0.29552020666133955 | 3.141592653589793 |      4.1
    1.1 |  -0.8912073600614354 | 3.141592653589793 |      4.1
    2.2 |  -0.8084964038195901 | 3.141592653589793 |      4.1
    3.3 |   0.1577456941432482 | 3.141592653589793 |      4.1
(6 rows)

-- select sin with order by (EXPLAIN (COSTS OFF))
--Testcase 631:
EXPLAIN (COSTS OFF)
SELECT value1, sin(1-value3) FROM numeric_tbl ORDER BY sin(1-value3);
                                                                   QUERY PLAN                                                                   
------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on numeric_tbl
   Oracle query: SELECT /*33397e991be5cea53dcad3bdcb5bba15*/ "VALUE1", "VALUE3" FROM  "NUMERIC_TBL" ORDER BY sin((1 - "VALUE3")) ASC NULLS LAST
(2 rows)

-- select sin with order by (result)
--Testcase 632:
SELECT value1, sin(1-value3) FROM numeric_tbl ORDER BY sin(1-value3);
 value1 |          sin          
--------+-----------------------
    3.3 |   -0.9161659367494549
    2.2 | -0.058374143427580086
    1.1 |    0.8632093666488737
    0.1 |    0.8912073600614354
    0.2 |    0.9320390859672263
    0.3 |     0.963558185417193
(6 rows)

-- select sin with order by index (result)
--Testcase 633:
SELECT value1, sin(1-value3) FROM numeric_tbl ORDER BY 2,1;
 value1 |          sin          
--------+-----------------------
    3.3 |   -0.9161659367494549
    2.2 | -0.058374143427580086
    1.1 |    0.8632093666488737
    0.1 |    0.8912073600614354
    0.2 |    0.9320390859672263
    0.3 |     0.963558185417193
(6 rows)

-- select sin with order by index (result)
--Testcase 634:
SELECT value1, sin(1-value3) FROM numeric_tbl ORDER BY 1,2;
 value1 |          sin          
--------+-----------------------
    0.1 |    0.8912073600614354
    0.2 |    0.9320390859672263
    0.3 |     0.963558185417193
    1.1 |    0.8632093666488737
    2.2 | -0.058374143427580086
    3.3 |   -0.9161659367494549
(6 rows)

-- select sin with group by (EXPLAIN (COSTS OFF))
--Testcase 635:
EXPLAIN (COSTS OFF)
SELECT value1, sin(1-value3) FROM numeric_tbl GROUP BY value1, sin(1-value3);
                                                                       QUERY PLAN                                                                       
--------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan
   Oracle query: SELECT /*f775e9344a707e3d5ac54c00c9b37416*/ "VALUE1", sin((1 - "VALUE3")) FROM  "NUMERIC_TBL" GROUP BY "VALUE1", (sin((1 - "VALUE3")))
(2 rows)

-- select sin with group by (result)
--Testcase 636:
SELECT value1, sin(1-value3) FROM numeric_tbl GROUP BY value1, sin(1-value3);
 value1 |         sin          
--------+----------------------
    0.1 |   0.8912073600614353
    0.2 |   0.9320390859672264
    0.3 |    0.963558185417193
    1.1 |   0.8632093666488738
    2.2 | -0.05837414342757991
    3.3 |   -0.916165936749455
(6 rows)

-- select sin with group by index (result)
--Testcase 637:
SELECT value1, sin(1-value3) FROM numeric_tbl GROUP BY 2,1;
 value1 |         sin          
--------+----------------------
    0.1 |   0.8912073600614353
    0.2 |   0.9320390859672264
    0.3 |    0.963558185417193
    1.1 |   0.8632093666488738
    2.2 | -0.05837414342757991
    3.3 |   -0.916165936749455
(6 rows)

-- select sin with group by index (result)
--Testcase 638:
SELECT value1, sin(1-value3) FROM numeric_tbl GROUP BY 1,2;
 value1 |         sin          
--------+----------------------
    0.1 |   0.8912073600614353
    0.2 |   0.9320390859672264
    0.3 |    0.963558185417193
    1.1 |   0.8632093666488738
    2.2 | -0.05837414342757991
    3.3 |   -0.916165936749455
(6 rows)

-- select sin with group by having (EXPLAIN (COSTS OFF))
--Testcase 639:
EXPLAIN (COSTS OFF)
SELECT value1, sin(1-value3) FROM numeric_tbl GROUP BY value1, sin(1-value3) HAVING sin(avg(value1)) > 0;
                                                                                       QUERY PLAN                                                                                       
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan
   Oracle query: SELECT /*d18ea98cd92fd622d57a86309682719c*/ "VALUE1", sin((1 - "VALUE3")) FROM  "NUMERIC_TBL" GROUP BY "VALUE1", (sin((1 - "VALUE3"))) HAVING (sin(avg("VALUE1")) > 0)
(2 rows)

-- select sin with group by having (result)
--Testcase 640:
SELECT value1, sin(1-value3) FROM numeric_tbl GROUP BY value1, sin(1-value3) HAVING sin(avg(value1)) > 0;
 value1 |         sin          
--------+----------------------
    0.1 |   0.8912073600614353
    0.2 |   0.9320390859672264
    0.3 |    0.963558185417193
    1.1 |   0.8632093666488738
    2.2 | -0.05837414342757991
(5 rows)

-- select sin with group by index having (result)
--Testcase 641:
SELECT value1, sin(1-value3) FROM numeric_tbl GROUP BY 2,1 HAVING sin(1-value3) > 0;
 value1 |        sin         
--------+--------------------
    0.1 | 0.8912073600614353
    0.2 | 0.9320390859672264
    0.3 |  0.963558185417193
    1.1 | 0.8632093666488738
(4 rows)

-- select sin with group by index having (result)
--Testcase 642:
SELECT value1, sin(1-value3) FROM numeric_tbl GROUP BY 1,2 HAVING value1 > 1;
 value1 |         sin          
--------+----------------------
    1.1 |   0.8632093666488738
    2.2 | -0.05837414342757991
    3.3 |   -0.916165936749455
(3 rows)

-- select sin and as
--Testcase 643:
SELECT value1, sin(value3) as sin1 FROM numeric_tbl;
 value1 |         sin1         
--------+----------------------
    0.1 | -0.09983341664682815
    0.2 | -0.19866933079506122
    0.3 | -0.29552020666133955
    1.1 |  -0.8912073600614354
    2.2 |  -0.8084964038195901
    3.3 |   0.1577456941432482
(6 rows)

-- ===============================================================================
-- test sqrt()
-- ===============================================================================
-- select sqrt (builtin function, EXPLAIN (COSTS OFF))
--Testcase 644:
EXPLAIN (COSTS OFF)
SELECT sqrt(value1), sqrt(value2), sqrt(0.5) FROM numeric_tbl;
                                             QUERY PLAN                                             
----------------------------------------------------------------------------------------------------
 Foreign Scan on numeric_tbl
   Oracle query: SELECT /*c35678a687054ae56f3a83ca5558704c*/ "VALUE1", "VALUE2" FROM  "NUMERIC_TBL"
(2 rows)

-- select sqrt (builtin function, result)
--Testcase 645:
SELECT sqrt(value1), sqrt(value2), sqrt(0.5) FROM numeric_tbl;
        sqrt         |        sqrt        |        sqrt         
---------------------+--------------------+---------------------
 0.31622776601683794 |                 10 | 0.70710678118654752
  0.4472135954999579 |                 10 | 0.70710678118654752
  0.5477225575051661 |                 10 | 0.70710678118654752
  1.0488088481701516 | 14.142135623730951 | 0.70710678118654752
  1.4832396974191326 | 14.142135623730951 | 0.70710678118654752
   1.816590212458495 | 14.142135623730951 | 0.70710678118654752
(6 rows)

-- select sqrt (builtin function, not pushdown constraints, EXPLAIN (COSTS OFF))
--Testcase 646:
EXPLAIN (COSTS OFF)
SELECT sqrt(value1), sqrt(value2), sqrt(0.5) FROM numeric_tbl WHERE to_hex(value2) = '64';
                                             QUERY PLAN                                             
----------------------------------------------------------------------------------------------------
 Foreign Scan on numeric_tbl
   Filter: (to_hex(value2) = '64'::text)
   Oracle query: SELECT /*c35678a687054ae56f3a83ca5558704c*/ "VALUE1", "VALUE2" FROM  "NUMERIC_TBL"
(3 rows)

-- select sqrt (builtin function, not pushdown constraints, result)
--Testcase 647:
SELECT sqrt(value1), sqrt(value2), sqrt(0.5) FROM numeric_tbl WHERE to_hex(value2) = '64';
        sqrt         | sqrt |        sqrt         
---------------------+------+---------------------
 0.31622776601683794 |   10 | 0.70710678118654752
  0.4472135954999579 |   10 | 0.70710678118654752
  0.5477225575051661 |   10 | 0.70710678118654752
(3 rows)

-- select sqrt (builtin function, pushdown constraints, EXPLAIN (COSTS OFF))
--Testcase 648:
EXPLAIN (COSTS OFF)
SELECT sqrt(value1), sqrt(value2), sqrt(0.5) FROM numeric_tbl WHERE value2 != 200;
                                                         QUERY PLAN                                                         
----------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on numeric_tbl
   Oracle query: SELECT /*660e459315c0723ec23b5285bdca63e2*/ "VALUE1", "VALUE2" FROM  "NUMERIC_TBL" WHERE ("VALUE2" <> 200)
(2 rows)

-- select sqrt (builtin function, pushdown constraints, result)
--Testcase 649:
SELECT sqrt(value1), sqrt(value2), sqrt(0.5) FROM numeric_tbl WHERE value2 != 200;
        sqrt         | sqrt |        sqrt         
---------------------+------+---------------------
 0.31622776601683794 |   10 | 0.70710678118654752
  0.4472135954999579 |   10 | 0.70710678118654752
  0.5477225575051661 |   10 | 0.70710678118654752
(3 rows)

-- select sqrt (builtin function, sqrt in constraints, EXPLAIN (COSTS OFF))
--Testcase 650:
EXPLAIN (COSTS OFF)
SELECT sqrt(value1), sqrt(value2), sqrt(0.5) FROM numeric_tbl WHERE sqrt(value1) != 1;
                                                           QUERY PLAN                                                           
--------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on numeric_tbl
   Oracle query: SELECT /*8ab192e567bd3eaa112c98733b654476*/ "VALUE1", "VALUE2" FROM  "NUMERIC_TBL" WHERE (sqrt("VALUE1") <> 1)
(2 rows)

-- select sqrt (builtin function, sqrt in constraints, result)
--Testcase 651:
SELECT sqrt(value1), sqrt(value2), sqrt(0.5) FROM numeric_tbl WHERE sqrt(value1) != 1;
        sqrt         |        sqrt        |        sqrt         
---------------------+--------------------+---------------------
 0.31622776601683794 |                 10 | 0.70710678118654752
  0.4472135954999579 |                 10 | 0.70710678118654752
  0.5477225575051661 |                 10 | 0.70710678118654752
  1.0488088481701516 | 14.142135623730951 | 0.70710678118654752
  1.4832396974191326 | 14.142135623730951 | 0.70710678118654752
   1.816590212458495 | 14.142135623730951 | 0.70710678118654752
(6 rows)

-- select sqrt (builtin function, sqrt in constraints, EXPLAIN (COSTS OFF))
--Testcase 652:
EXPLAIN (COSTS OFF)
SELECT sqrt(value1), sqrt(value2), sqrt(0.5) FROM numeric_tbl WHERE sqrt(0.5) > value1;
                                                                QUERY PLAN                                                                
------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on numeric_tbl
   Oracle query: SELECT /*18be4081e34b920a7c169d141674329a*/ "VALUE1", "VALUE2" FROM  "NUMERIC_TBL" WHERE (0.7071067811865476 > "VALUE1")
(2 rows)

-- select sqrt (builtin function, sqrt in constraints, result)
--Testcase 653:
SELECT sqrt(value1), sqrt(value2), sqrt(0.5) FROM numeric_tbl WHERE sqrt(0.5) > value1;
        sqrt         | sqrt |        sqrt         
---------------------+------+---------------------
 0.31622776601683794 |   10 | 0.70710678118654752
  0.4472135954999579 |   10 | 0.70710678118654752
  0.5477225575051661 |   10 | 0.70710678118654752
(3 rows)

-- select sqrt as nest function with agg (pushdown, EXPLAIN (COSTS OFF))
--Testcase 654:
EXPLAIN (COSTS OFF)
SELECT sum(value3),sqrt(sum(value1)) FROM numeric_tbl;
                                                     QUERY PLAN                                                     
--------------------------------------------------------------------------------------------------------------------
 Foreign Scan
   Oracle query: SELECT /*4eab61ce35269b9681f0a36895ff4f52*/ sum("VALUE3"), sqrt(sum("VALUE1")) FROM  "NUMERIC_TBL"
(2 rows)

-- select sqrt as nest function with agg (pushdown, result)
--Testcase 655:
SELECT sum(value3),sqrt(sum(value1)) FROM numeric_tbl;
 sum  |        sqrt        
------+--------------------
 -7.2 | 2.6832815729997477
(1 row)

-- select sqrt as nest with log2 (pushdown, EXPLAIN (COSTS OFF))
--Testcase 656:
EXPLAIN (COSTS OFF)
SELECT value1, sqrt(log(2, value2)) FROM numeric_tbl;
                                             QUERY PLAN                                             
----------------------------------------------------------------------------------------------------
 Foreign Scan on numeric_tbl
   Oracle query: SELECT /*c35678a687054ae56f3a83ca5558704c*/ "VALUE1", "VALUE2" FROM  "NUMERIC_TBL"
(2 rows)

-- select sqrt as nest with log2 (pushdown, result)
--Testcase 657:
SELECT value1, sqrt(log(2, value2)) FROM numeric_tbl;
 value1 |        sqrt        
--------+--------------------
    0.1 | 2.5775678826705466
    0.2 | 2.5775678826705466
    0.3 | 2.5775678826705466
    1.1 | 2.7647524644667061
    2.2 | 2.7647524644667061
    3.3 | 2.7647524644667061
(6 rows)

-- select sqrt with non pushdown func and explicit constant (EXPLAIN (COSTS OFF))
--Testcase 658:
EXPLAIN (COSTS OFF)
SELECT sqrt(value2), pi(), 4.1 FROM numeric_tbl;
                                        QUERY PLAN                                        
------------------------------------------------------------------------------------------
 Foreign Scan on numeric_tbl
   Oracle query: SELECT /*942bf85feb96f605a79f40dffa8f6645*/ "VALUE2" FROM  "NUMERIC_TBL"
(2 rows)

-- select sqrt with non pushdown func and explicit constant (result)
--Testcase 659:
SELECT sqrt(value2), pi(), 4.1 FROM numeric_tbl;
        sqrt        |        pi         | ?column? 
--------------------+-------------------+----------
                 10 | 3.141592653589793 |      4.1
                 10 | 3.141592653589793 |      4.1
                 10 | 3.141592653589793 |      4.1
 14.142135623730951 | 3.141592653589793 |      4.1
 14.142135623730951 | 3.141592653589793 |      4.1
 14.142135623730951 | 3.141592653589793 |      4.1
(6 rows)

-- select sqrt with order by (EXPLAIN (COSTS OFF))
--Testcase 660:
EXPLAIN (COSTS OFF)
SELECT value1, sqrt(1-value3) FROM numeric_tbl ORDER BY sqrt(1-value3);
                                                                   QUERY PLAN                                                                    
-------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on numeric_tbl
   Oracle query: SELECT /*9cd16974dcf050685ab05aaacbf576f8*/ "VALUE1", "VALUE3" FROM  "NUMERIC_TBL" ORDER BY sqrt((1 - "VALUE3")) ASC NULLS LAST
(2 rows)

-- select sqrt with order by (result)
--Testcase 661:
SELECT value1, sqrt(1-value3) FROM numeric_tbl ORDER BY sqrt(1-value3);
 value1 |        sqrt        
--------+--------------------
    0.1 | 1.0488088481701516
    0.2 | 1.0954451150103321
    0.3 |  1.140175425099138
    1.1 |  1.449137674618944
    2.2 | 1.7888543819998317
    3.3 |  2.073644135332772
(6 rows)

-- select sqrt with order by index (result)
--Testcase 662:
SELECT value1, sqrt(1-value3) FROM numeric_tbl ORDER BY 2,1;
 value1 |        sqrt        
--------+--------------------
    0.1 | 1.0488088481701516
    0.2 | 1.0954451150103321
    0.3 |  1.140175425099138
    1.1 |  1.449137674618944
    2.2 | 1.7888543819998317
    3.3 |  2.073644135332772
(6 rows)

-- select sqrt with order by index (result)
--Testcase 663:
SELECT value1, sqrt(1-value3) FROM numeric_tbl ORDER BY 1,2;
 value1 |        sqrt        
--------+--------------------
    0.1 | 1.0488088481701516
    0.2 | 1.0954451150103321
    0.3 |  1.140175425099138
    1.1 |  1.449137674618944
    2.2 | 1.7888543819998317
    3.3 |  2.073644135332772
(6 rows)

-- select sqrt with group by (EXPLAIN (COSTS OFF))
--Testcase 664:
EXPLAIN (COSTS OFF)
SELECT count(value1), sqrt(1-value3) FROM numeric_tbl GROUP BY sqrt(1-value3);
                                                                      QUERY PLAN                                                                       
-------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan
   Oracle query: SELECT /*f56d8c78b15a8293846122c230fac0e5*/ count("VALUE1"), sqrt((1 - "VALUE3")) FROM  "NUMERIC_TBL" GROUP BY (sqrt((1 - "VALUE3")))
(2 rows)

-- select sqrt with group by (result)
--Testcase 665:
SELECT count(value1), sqrt(1-value3) FROM numeric_tbl GROUP BY sqrt(1-value3);
 count |        sqrt        
-------+--------------------
     1 | 1.0488088481701516
     1 | 1.0954451150103321
     1 |  1.140175425099138
     1 |  1.449137674618944
     1 | 1.7888543819998317
     1 |  2.073644135332772
(6 rows)

-- select sqrt with group by index (result)
--Testcase 666:
SELECT value1, sqrt(1-value3) FROM numeric_tbl GROUP BY 2,1;
 value1 |        sqrt        
--------+--------------------
    0.1 | 1.0488088481701516
    0.2 | 1.0954451150103321
    0.3 |  1.140175425099138
    1.1 |  1.449137674618944
    2.2 | 1.7888543819998317
    3.3 |  2.073644135332772
(6 rows)

-- select sqrt with group by index (result)
--Testcase 667:
SELECT value1, sqrt(1-value3) FROM numeric_tbl GROUP BY 1,2;
 value1 |        sqrt        
--------+--------------------
    0.1 | 1.0488088481701516
    0.2 | 1.0954451150103321
    0.3 |  1.140175425099138
    1.1 |  1.449137674618944
    2.2 | 1.7888543819998317
    3.3 |  2.073644135332772
(6 rows)

-- select sqrt with group by having (EXPLAIN (COSTS OFF))
--Testcase 668:
EXPLAIN (COSTS OFF)
SELECT count(value1), sqrt(1-value3) FROM numeric_tbl GROUP BY sqrt(1-value3) HAVING sqrt(avg(value1)) > 0;
                                                                                       QUERY PLAN                                                                                       
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan
   Oracle query: SELECT /*8397c795632efe9cb37d957e0bd3c9fd*/ count("VALUE1"), sqrt((1 - "VALUE3")) FROM  "NUMERIC_TBL" GROUP BY (sqrt((1 - "VALUE3"))) HAVING (sqrt(avg("VALUE1")) > 0)
(2 rows)

-- select sqrt with group by having (result)
--Testcase 669:
SELECT count(value1), sqrt(1-value3) FROM numeric_tbl GROUP BY sqrt(1-value3) HAVING sqrt(avg(value1)) > 0;
 count |        sqrt        
-------+--------------------
     1 | 1.0488088481701516
     1 | 1.0954451150103321
     1 |  1.140175425099138
     1 |  1.449137674618944
     1 | 1.7888543819998317
     1 |  2.073644135332772
(6 rows)

-- select sqrt with group by index having (result)
--Testcase 670:
SELECT value1, sqrt(1-value3) FROM numeric_tbl GROUP BY 2,1 HAVING sqrt(1-value3) > 0;
 value1 |        sqrt        
--------+--------------------
    0.1 | 1.0488088481701516
    0.2 | 1.0954451150103321
    0.3 |  1.140175425099138
    1.1 |  1.449137674618944
    2.2 | 1.7888543819998317
    3.3 |  2.073644135332772
(6 rows)

-- select sqrt with group by index having (result)
--Testcase 671:
SELECT value1, sqrt(1-value3) FROM numeric_tbl GROUP BY 1,2 HAVING value1 > 1;
 value1 |        sqrt        
--------+--------------------
    1.1 |  1.449137674618944
    2.2 | 1.7888543819998317
    3.3 |  2.073644135332772
(3 rows)

-- select sqrt and as (return null with negative number)
--Testcase 672:
SELECT value1, value3 + 1, sqrt(value1 + 1) as sqrt1 FROM numeric_tbl;
 value1 |       ?column?       |       sqrt1        
--------+----------------------+--------------------
    0.1 |                  0.9 | 1.0488088481701516
    0.2 |                  0.8 | 1.0954451150103321
    0.3 |                  0.7 |  1.140175425099138
    1.1 | -0.10000000000000009 |  1.449137674618944
    2.2 |  -1.2000000000000002 | 1.7888543819998317
    3.3 |                 -2.3 |  2.073644135332772
(6 rows)

-- ===============================================================================
-- test substr()
-- ===============================================================================
-- select substr (stub function, EXPLAIN (COSTS OFF))
--Testcase 673:
EXPLAIN (COSTS OFF)
SELECT substr(str1, 3), substr(str2, 3, 4) FROM numeric_tbl;
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Foreign Scan on numeric_tbl
   Oracle query: SELECT /*b5e3ceef645293200ae015baf22fc9f6*/ "STR1", "STR2" FROM  "NUMERIC_TBL"
(2 rows)

-- select substr (stub function, result)
--Testcase 674:
SELECT substr(str1, 3), substr(str2, 3, 4) FROM numeric_tbl;
 substr  | substr 
---------+--------
 -XYZ--- |  abc
 -XYZ--- |  abc
 -XYZ--- |  abc
 -XYZ--- |  abc
 -XYZ--- |  abc
 -XYZ--- |  abc
(6 rows)

-- select substr (stub function, not pushdown constraints, EXPLAIN (COSTS OFF))
--Testcase 675:
EXPLAIN (COSTS OFF)
SELECT value1, substr(str2, 3, 4) FROM numeric_tbl WHERE to_hex(value2) = '64';
                                                 QUERY PLAN                                                 
------------------------------------------------------------------------------------------------------------
 Foreign Scan on numeric_tbl
   Filter: (to_hex(value2) = '64'::text)
   Oracle query: SELECT /*20947e03cae6add1c69490f9e87174d3*/ "VALUE1", "VALUE2", "STR2" FROM  "NUMERIC_TBL"
(3 rows)

-- select substr (stub function, not pushdown constraints, result)
--Testcase 676:
SELECT value1, substr(str2, 3, 4) FROM numeric_tbl WHERE to_hex(value2) = '64';
 value1 | substr 
--------+--------
    0.1 |  abc
    0.2 |  abc
    0.3 |  abc
(3 rows)

-- select substr (stub function, pushdown constraints, EXPLAIN (COSTS OFF))
--Testcase 677:
EXPLAIN (COSTS OFF)
SELECT value1, substr(str2, 3, 4) FROM numeric_tbl WHERE value2 != 200;
                                                        QUERY PLAN                                                        
--------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on numeric_tbl
   Oracle query: SELECT /*68e55889ea21b07c1c695e2244150ac9*/ "VALUE1", "STR2" FROM  "NUMERIC_TBL" WHERE ("VALUE2" <> 200)
(2 rows)

-- select substr (stub function, pushdown constraints, result)
--Testcase 678:
SELECT value1, substr(str2, 3, 4) FROM numeric_tbl WHERE value2 != 200;
 value1 | substr 
--------+--------
    0.1 |  abc
    0.2 |  abc
    0.3 |  abc
(3 rows)

-- select substr with non pushdown func and explicit constant (EXPLAIN (COSTS OFF))
--Testcase 679:
EXPLAIN (COSTS OFF)
SELECT substr(str2, 3, 4), pi(), 4.1 FROM numeric_tbl;
                                       QUERY PLAN                                       
----------------------------------------------------------------------------------------
 Foreign Scan on numeric_tbl
   Oracle query: SELECT /*360269455b8592269953e6007497fe87*/ "STR2" FROM  "NUMERIC_TBL"
(2 rows)

-- select substr with non pushdown func and explicit constant (result)
--Testcase 680:
SELECT substr(str2, 3, 4), pi(), 4.1 FROM numeric_tbl;
 substr |        pi         | ?column? 
--------+-------------------+----------
  abc   | 3.141592653589793 |      4.1
  abc   | 3.141592653589793 |      4.1
  abc   | 3.141592653589793 |      4.1
  abc   | 3.141592653589793 |      4.1
  abc   | 3.141592653589793 |      4.1
  abc   | 3.141592653589793 |      4.1
(6 rows)

-- select substr with order by (EXPLAIN (COSTS OFF))
--Testcase 681:
EXPLAIN (COSTS OFF)
SELECT value1, substr(str2, 3, 4) FROM numeric_tbl ORDER BY substr(str2, 3, 4);
                                               QUERY PLAN                                               
--------------------------------------------------------------------------------------------------------
 Sort
   Sort Key: (substr(str2, 3, 4))
   ->  Foreign Scan on numeric_tbl
         Oracle query: SELECT /*5bd215e60cbacd68030da2b5afd0cbf4*/ "VALUE1", "STR2" FROM  "NUMERIC_TBL"
(4 rows)

-- select substr with order by (result)
--Testcase 682:
SELECT value1, substr(str2, 3, 4) FROM numeric_tbl ORDER BY substr(str2, 3, 4);
 value1 | substr 
--------+--------
    0.1 |  abc
    0.2 |  abc
    0.3 |  abc
    1.1 |  abc
    2.2 |  abc
    3.3 |  abc
(6 rows)

-- select substr with order by index (result)
--Testcase 683:
SELECT value1, substr(str2, 3, 4) FROM numeric_tbl ORDER BY 2,1;
 value1 | substr 
--------+--------
    0.1 |  abc
    0.2 |  abc
    0.3 |  abc
    1.1 |  abc
    2.2 |  abc
    3.3 |  abc
(6 rows)

-- select substr with order by index (result)
--Testcase 684:
SELECT value1, substr(str2, 3, 4) FROM numeric_tbl ORDER BY 1,2;
 value1 | substr 
--------+--------
    0.1 |  abc
    0.2 |  abc
    0.3 |  abc
    1.1 |  abc
    2.2 |  abc
    3.3 |  abc
(6 rows)

-- select substr with group by (EXPLAIN (COSTS OFF))
--Testcase 685:
EXPLAIN (COSTS OFF)
SELECT count(value1), substr(str2, 3, 4) FROM numeric_tbl GROUP BY substr(str2, 3, 4);
                                                                      QUERY PLAN                                                                       
-------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan
   Oracle query: SELECT /*ab5429b3f3f3fbd10ab8c5e7f3286d9a*/ count("VALUE1"), substr("STR2", 3, 4) FROM  "NUMERIC_TBL" GROUP BY (substr("STR2", 3, 4))
(2 rows)

-- select substr with group by (result)
--Testcase 686:
SELECT count(value1), substr(str2, 3, 4) FROM numeric_tbl GROUP BY substr(str2, 3, 4);
 count | substr 
-------+--------
     6 |  abc
(1 row)

-- select substr with group by index (result)
--Testcase 687:
SELECT value1, substr(str2, 3, 4) FROM numeric_tbl GROUP BY 2,1;
 value1 | substr 
--------+--------
    0.1 |  abc
    0.2 |  abc
    0.3 |  abc
    1.1 |  abc
    2.2 |  abc
    3.3 |  abc
(6 rows)

-- select substr with group by having (EXPLAIN (COSTS OFF))
--Testcase 688:
EXPLAIN (COSTS OFF)
SELECT count(value1), substr(str2, 3, 4) FROM numeric_tbl GROUP BY substr(str2, 3, 4), str2 HAVING substr(str2, 3, 4) IS NOT NULL;
                                                                                                   QUERY PLAN                                                                                                   
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan
   Oracle query: SELECT /*0f15a4b423ce006732eccf452b3a65f3*/ count("VALUE1"), substr("STR2", 3, 4), "STR2" FROM  "NUMERIC_TBL" WHERE (substr("STR2", 3, 4) IS NOT NULL) GROUP BY (substr("STR2", 3, 4)), "STR2"
(2 rows)

-- select substr with group by having (result)
--Testcase 689:
SELECT count(value1), substr(str2, 3, 4) FROM numeric_tbl GROUP BY substr(str2, 3, 4), str2 HAVING substr(str2, 3, 4) IS NOT NULL;
 count | substr 
-------+--------
     6 |  abc
(1 row)

-- select substr with group by index having (result)
--Testcase 690:
SELECT value1, substr(str2, 3, 4) FROM numeric_tbl GROUP BY 1,2 HAVING value1 > 1;
 value1 | substr 
--------+--------
    1.1 |  abc
    2.2 |  abc
    3.3 |  abc
(3 rows)

-- ===============================================================================
-- test substring()
-- ===============================================================================
-- select substring (stub function, EXPLAIN (COSTS OFF))
--Testcase 691:
EXPLAIN (COSTS OFF)
SELECT substring(str1, 3), substring(str2, 3, 4) FROM numeric_tbl;
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Foreign Scan on numeric_tbl
   Oracle query: SELECT /*b5e3ceef645293200ae015baf22fc9f6*/ "STR1", "STR2" FROM  "NUMERIC_TBL"
(2 rows)

-- select substring (stub function, result)
--Testcase 692:
SELECT substring(str1, 3), substring(str2, 3, 4) FROM numeric_tbl;
 substring | substring 
-----------+-----------
 -XYZ---   |  abc
 -XYZ---   |  abc
 -XYZ---   |  abc
 -XYZ---   |  abc
 -XYZ---   |  abc
 -XYZ---   |  abc
(6 rows)

-- select substring (stub function, EXPLAIN (COSTS OFF))
--Testcase 693:
EXPLAIN (COSTS OFF)
SELECT substring(str1 FROM 3), substring(str2 FROM 3 FOR 4) FROM numeric_tbl;
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Foreign Scan on numeric_tbl
   Oracle query: SELECT /*b5e3ceef645293200ae015baf22fc9f6*/ "STR1", "STR2" FROM  "NUMERIC_TBL"
(2 rows)

-- select substring (stub function, result)
--Testcase 694:
SELECT substring(str1 FROM 3), substring(str2 FROM 3 FOR 4) FROM numeric_tbl;
 substring | substring 
-----------+-----------
 -XYZ---   |  abc
 -XYZ---   |  abc
 -XYZ---   |  abc
 -XYZ---   |  abc
 -XYZ---   |  abc
 -XYZ---   |  abc
(6 rows)

-- select substring (stub function, not pushdown constraints, EXPLAIN (COSTS OFF))
--Testcase 695:
EXPLAIN (COSTS OFF)
SELECT value1, substring(str2, 3, 4) FROM numeric_tbl WHERE to_hex(value2) = '64';
                                                 QUERY PLAN                                                 
------------------------------------------------------------------------------------------------------------
 Foreign Scan on numeric_tbl
   Filter: (to_hex(value2) = '64'::text)
   Oracle query: SELECT /*20947e03cae6add1c69490f9e87174d3*/ "VALUE1", "VALUE2", "STR2" FROM  "NUMERIC_TBL"
(3 rows)

-- select substring (stub function, not pushdown constraints, result)
--Testcase 696:
SELECT value1, substring(str2, 3, 4) FROM numeric_tbl WHERE to_hex(value2) = '64';
 value1 | substring 
--------+-----------
    0.1 |  abc
    0.2 |  abc
    0.3 |  abc
(3 rows)

-- select substring (stub function, pushdown constraints, EXPLAIN (COSTS OFF))
--Testcase 697:
EXPLAIN (COSTS OFF)
SELECT value1, substring(str2 FROM 3 FOR 4) FROM numeric_tbl WHERE value2 != 200;
                                                        QUERY PLAN                                                        
--------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on numeric_tbl
   Oracle query: SELECT /*68e55889ea21b07c1c695e2244150ac9*/ "VALUE1", "STR2" FROM  "NUMERIC_TBL" WHERE ("VALUE2" <> 200)
(2 rows)

-- select substring (stub function, pushdown constraints, result)
--Testcase 698:
SELECT value1, substring(str2 FROM 3 FOR 4) FROM numeric_tbl WHERE value2 != 200;
 value1 | substring 
--------+-----------
    0.1 |  abc
    0.2 |  abc
    0.3 |  abc
(3 rows)

-- select substring with non pushdown func and explicit constant (EXPLAIN (COSTS OFF))
--Testcase 699:
EXPLAIN (COSTS OFF)
SELECT substring(str2 FROM 3 FOR 4), pi(), 4.1 FROM numeric_tbl;
                                       QUERY PLAN                                       
----------------------------------------------------------------------------------------
 Foreign Scan on numeric_tbl
   Oracle query: SELECT /*360269455b8592269953e6007497fe87*/ "STR2" FROM  "NUMERIC_TBL"
(2 rows)

-- select substring with non pushdown func and explicit constant (result)
--Testcase 700:
SELECT substring(str2 FROM 3 FOR 4), pi(), 4.1 FROM numeric_tbl;
 substring |        pi         | ?column? 
-----------+-------------------+----------
  abc      | 3.141592653589793 |      4.1
  abc      | 3.141592653589793 |      4.1
  abc      | 3.141592653589793 |      4.1
  abc      | 3.141592653589793 |      4.1
  abc      | 3.141592653589793 |      4.1
  abc      | 3.141592653589793 |      4.1
(6 rows)

-- select substring with order by (EXPLAIN (COSTS OFF))
--Testcase 701:
EXPLAIN (COSTS OFF)
SELECT value1, substring(str2 FROM 3 FOR 4) FROM numeric_tbl ORDER BY substring(str2 FROM 3 FOR 4);
                                               QUERY PLAN                                               
--------------------------------------------------------------------------------------------------------
 Sort
   Sort Key: (SUBSTRING(str2 FROM 3 FOR 4))
   ->  Foreign Scan on numeric_tbl
         Oracle query: SELECT /*5bd215e60cbacd68030da2b5afd0cbf4*/ "VALUE1", "STR2" FROM  "NUMERIC_TBL"
(4 rows)

-- select substring with order by (result)
--Testcase 702:
SELECT value1, substring(str2 FROM 3 FOR 4) FROM numeric_tbl ORDER BY substring(str2 FROM 3 FOR 4);
 value1 | substring 
--------+-----------
    0.1 |  abc
    0.2 |  abc
    0.3 |  abc
    1.1 |  abc
    2.2 |  abc
    3.3 |  abc
(6 rows)

-- select substring with order by index (result)
--Testcase 703:
SELECT value1, substring(str2 FROM 3 FOR 4) FROM numeric_tbl ORDER BY 2,1;
 value1 | substring 
--------+-----------
    0.1 |  abc
    0.2 |  abc
    0.3 |  abc
    1.1 |  abc
    2.2 |  abc
    3.3 |  abc
(6 rows)

-- select substring with order by index (result)
--Testcase 704:
SELECT value1, substring(str2 FROM 3 FOR 4) FROM numeric_tbl ORDER BY 1,2;
 value1 | substring 
--------+-----------
    0.1 |  abc
    0.2 |  abc
    0.3 |  abc
    1.1 |  abc
    2.2 |  abc
    3.3 |  abc
(6 rows)

-- select substring with group by (EXPLAIN (COSTS OFF))
--Testcase 705:
EXPLAIN (COSTS OFF)
SELECT count(value1), substring(str2, 3, 4) FROM numeric_tbl GROUP BY substring(str2, 3, 4);
                                                                      QUERY PLAN                                                                       
-------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan
   Oracle query: SELECT /*ab5429b3f3f3fbd10ab8c5e7f3286d9a*/ count("VALUE1"), substr("STR2", 3, 4) FROM  "NUMERIC_TBL" GROUP BY (substr("STR2", 3, 4))
(2 rows)

-- select substring with group by (result)
--Testcase 706:
SELECT count(value1), substring(str2, 3, 4) FROM numeric_tbl GROUP BY substring(str2, 3, 4);
 count | substring 
-------+-----------
     6 |  abc
(1 row)

-- select substring with group by index (result)
--Testcase 707:
SELECT value1, substring(str2, 3, 4) FROM numeric_tbl GROUP BY 2,1;
 value1 | substring 
--------+-----------
    0.1 |  abc
    0.2 |  abc
    0.3 |  abc
    1.1 |  abc
    2.2 |  abc
    3.3 |  abc
(6 rows)

-- select substring with group by having (EXPLAIN (COSTS OFF))
--Testcase 708:
EXPLAIN (COSTS OFF)
SELECT count(value1), substring(str2, 3, 4) FROM numeric_tbl GROUP BY substring(str2, 3, 4), str2 HAVING substring(str2, 3, 4) IS NOT NULL;
                                                                                                   QUERY PLAN                                                                                                   
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan
   Oracle query: SELECT /*0f15a4b423ce006732eccf452b3a65f3*/ count("VALUE1"), substr("STR2", 3, 4), "STR2" FROM  "NUMERIC_TBL" WHERE (substr("STR2", 3, 4) IS NOT NULL) GROUP BY (substr("STR2", 3, 4)), "STR2"
(2 rows)

-- select substring with group by having (result)
--Testcase 709:
SELECT count(value1), substring(str2, 3, 4) FROM numeric_tbl GROUP BY substring(str2, 3, 4), str2 HAVING substring(str2, 3, 4) IS NOT NULL;
 count | substring 
-------+-----------
     6 |  abc
(1 row)

-- select substring with group by index having (result)
--Testcase 710:
SELECT value1, substring(str2, 3, 4) FROM numeric_tbl GROUP BY 1,2 HAVING value1 > 1;
 value1 | substring 
--------+-----------
    1.1 |  abc
    2.2 |  abc
    3.3 |  abc
(3 rows)

-- ===============================================================================
-- test tan()
-- ===============================================================================
-- select tan (builtin function, EXPLAIN (COSTS OFF))
--Testcase 711:
EXPLAIN (COSTS OFF)
SELECT value1, tan(value2), tan(value3), tan(value4), tan(0.5) FROM numeric_tbl;
                                                       QUERY PLAN                                                       
------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on numeric_tbl
   Oracle query: SELECT /*3a3e9ce1642025dfd6451e15cf1fadd9*/ "VALUE1", "VALUE2", "VALUE3", "VALUE4" FROM  "NUMERIC_TBL"
(2 rows)

-- select tan (builtin function, result)
--Testcase 712:
SELECT value1, tan(value2), tan(value3), tan(value4), tan(0.5) FROM numeric_tbl;
 value1 |         tan         |         tan          |        tan         |        tan         
--------+---------------------+----------------------+--------------------+--------------------
    0.1 | -0.5872139151569291 | -0.10033467208545055 | 0.5872139151569291 | 0.5463024898437905
    0.2 | -0.5872139151569291 |  -0.2027100355086725 | 0.5872139151569291 | 0.5463024898437905
    0.3 | -0.5872139151569291 | -0.30933624960962325 | 0.5872139151569291 | 0.5463024898437905
    1.1 | -1.7925274837903817 |  -1.9647596572486523 | 1.7925274837903817 | 0.5463024898437905
    2.2 | -1.7925274837903817 |   1.3738230567687946 | 1.7925274837903817 | 0.5463024898437905
    3.3 | -1.7925274837903817 | -0.15974574766003222 | 1.7925274837903817 | 0.5463024898437905
(6 rows)

-- select tan (builtin function, not pushdown constraints, EXPLAIN (COSTS OFF))
--Testcase 713:
EXPLAIN (COSTS OFF)
SELECT tan(value1), tan(value2), tan(value3), tan(value4), tan(0.5) FROM numeric_tbl WHERE to_hex(value2) = '64';
                                                       QUERY PLAN                                                       
------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on numeric_tbl
   Filter: (to_hex(value2) = '64'::text)
   Oracle query: SELECT /*3a3e9ce1642025dfd6451e15cf1fadd9*/ "VALUE1", "VALUE2", "VALUE3", "VALUE4" FROM  "NUMERIC_TBL"
(3 rows)

-- select tan (builtin function, not pushdown constraints, result)
--Testcase 714:
SELECT tan(value1), tan(value2), tan(value3), tan(value4), tan(0.5) FROM numeric_tbl WHERE to_hex(value2) = '64';
         tan         |         tan         |         tan          |        tan         |        tan         
---------------------+---------------------+----------------------+--------------------+--------------------
 0.10033467208545055 | -0.5872139151569291 | -0.10033467208545055 | 0.5872139151569291 | 0.5463024898437905
  0.2027100355086725 | -0.5872139151569291 |  -0.2027100355086725 | 0.5872139151569291 | 0.5463024898437905
 0.30933624960962325 | -0.5872139151569291 | -0.30933624960962325 | 0.5872139151569291 | 0.5463024898437905
(3 rows)

-- select tan (builtin function, pushdown constraints, EXPLAIN (COSTS OFF))
--Testcase 715:
EXPLAIN (COSTS OFF)
SELECT tan(value1), tan(value2), tan(value3), tan(value4), tan(0.5) FROM numeric_tbl WHERE value2 != 200;
                                                                   QUERY PLAN                                                                   
------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on numeric_tbl
   Oracle query: SELECT /*ee255a287dc590cc2e754740ed3cd0e9*/ "VALUE1", "VALUE2", "VALUE3", "VALUE4" FROM  "NUMERIC_TBL" WHERE ("VALUE2" <> 200)
(2 rows)

-- select tan (builtin function, pushdown constraints, result)
--Testcase 716:
SELECT tan(value1), tan(value2), tan(value3), tan(value4), tan(0.5) FROM numeric_tbl WHERE value2 != 200;
         tan         |         tan         |         tan          |        tan         |        tan         
---------------------+---------------------+----------------------+--------------------+--------------------
 0.10033467208545055 | -0.5872139151569291 | -0.10033467208545055 | 0.5872139151569291 | 0.5463024898437905
  0.2027100355086725 | -0.5872139151569291 |  -0.2027100355086725 | 0.5872139151569291 | 0.5463024898437905
 0.30933624960962325 | -0.5872139151569291 | -0.30933624960962325 | 0.5872139151569291 | 0.5463024898437905
(3 rows)

-- select tan (builtin function, tan in constraints, EXPLAIN (COSTS OFF))
--Testcase 717:
EXPLAIN (COSTS OFF)
SELECT value1, tan(value2), tan(value3), tan(value4), tan(0.5) FROM numeric_tbl WHERE tan(value1) != 1;
                                                                    QUERY PLAN                                                                     
---------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on numeric_tbl
   Oracle query: SELECT /*d9b1f54b7e5f6702342796320a73dff8*/ "VALUE1", "VALUE2", "VALUE3", "VALUE4" FROM  "NUMERIC_TBL" WHERE (tan("VALUE1") <> 1)
(2 rows)

-- select tan (builtin function, tan in constraints, result)
--Testcase 718:
SELECT value1, tan(value2), tan(value3), tan(value4), tan(0.5) FROM numeric_tbl WHERE tan(value1) != 1;
 value1 |         tan         |         tan          |        tan         |        tan         
--------+---------------------+----------------------+--------------------+--------------------
    0.1 | -0.5872139151569291 | -0.10033467208545055 | 0.5872139151569291 | 0.5463024898437905
    0.2 | -0.5872139151569291 |  -0.2027100355086725 | 0.5872139151569291 | 0.5463024898437905
    0.3 | -0.5872139151569291 | -0.30933624960962325 | 0.5872139151569291 | 0.5463024898437905
    1.1 | -1.7925274837903817 |  -1.9647596572486523 | 1.7925274837903817 | 0.5463024898437905
    2.2 | -1.7925274837903817 |   1.3738230567687946 | 1.7925274837903817 | 0.5463024898437905
    3.3 | -1.7925274837903817 | -0.15974574766003222 | 1.7925274837903817 | 0.5463024898437905
(6 rows)

-- select tan (builtin function, tan in constraints, EXPLAIN (COSTS OFF))
--Testcase 719:
EXPLAIN (COSTS OFF)
SELECT tan(value1), tan(value2), tan(value3), tan(value4), tan(0.5) FROM numeric_tbl WHERE tan(0.5) > value1;
                                                                          QUERY PLAN                                                                          
--------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on numeric_tbl
   Oracle query: SELECT /*9422ca5aa21452b9f458c0174d7b3c89*/ "VALUE1", "VALUE2", "VALUE3", "VALUE4" FROM  "NUMERIC_TBL" WHERE (0.5463024898437905 > "VALUE1")
(2 rows)

-- select tan (builtin function, tan in constraints, result)
--Testcase 720:
SELECT tan(value1), tan(value2), tan(value3), tan(value4), tan(0.5) FROM numeric_tbl WHERE tan(0.5) > value1;
         tan         |         tan         |         tan          |        tan         |        tan         
---------------------+---------------------+----------------------+--------------------+--------------------
 0.10033467208545055 | -0.5872139151569291 | -0.10033467208545055 | 0.5872139151569291 | 0.5463024898437905
  0.2027100355086725 | -0.5872139151569291 |  -0.2027100355086725 | 0.5872139151569291 | 0.5463024898437905
 0.30933624960962325 | -0.5872139151569291 | -0.30933624960962325 | 0.5872139151569291 | 0.5463024898437905
(3 rows)

-- select tan as nest function with agg (pushdown, EXPLAIN (COSTS OFF))
--Testcase 721:
EXPLAIN (COSTS OFF)
SELECT sum(value3),tan(sum(value3)) FROM numeric_tbl;
                                                    QUERY PLAN                                                     
-------------------------------------------------------------------------------------------------------------------
 Foreign Scan
   Oracle query: SELECT /*b9f10af6f9322ae1a940468fb7282eca*/ sum("VALUE3"), tan(sum("VALUE3")) FROM  "NUMERIC_TBL"
(2 rows)

-- select tan as nest function with agg (pushdown, result)
--Testcase 722:
SELECT sum(value3),tan(sum(value3)) FROM numeric_tbl;
 sum  |         tan         
------+---------------------
 -7.2 | -1.3046209400556377
(1 row)

-- select tan as nest with log2 (pushdown, EXPLAIN (COSTS OFF))
--Testcase 723:
EXPLAIN (COSTS OFF)
SELECT value1, tan(log(2, value2)) FROM numeric_tbl;
                                             QUERY PLAN                                             
----------------------------------------------------------------------------------------------------
 Foreign Scan on numeric_tbl
   Oracle query: SELECT /*c35678a687054ae56f3a83ca5558704c*/ "VALUE1", "VALUE2" FROM  "NUMERIC_TBL"
(2 rows)

-- select tan as nest with log2 (pushdown, result)
--Testcase 724:
SELECT value1, tan(log(2, value2)) FROM numeric_tbl;
 value1 |         tan         
--------+---------------------
    0.1 | 0.37716897786271997
    0.2 | 0.37716897786271997
    0.3 | 0.37716897786271997
    1.1 |  4.6888130658593115
    2.2 |  4.6888130658593115
    3.3 |  4.6888130658593115
(6 rows)

-- select tan with non pushdown func and explicit constant (EXPLAIN (COSTS OFF))
--Testcase 725:
EXPLAIN (COSTS OFF)
SELECT value1, tan(value3), pi(), 4.1 FROM numeric_tbl;
                                             QUERY PLAN                                             
----------------------------------------------------------------------------------------------------
 Foreign Scan on numeric_tbl
   Oracle query: SELECT /*5373ce45d4cdd3cd948843baa7cda0cc*/ "VALUE1", "VALUE3" FROM  "NUMERIC_TBL"
(2 rows)

-- select tan with non pushdown func and explicit constant (result)
--Testcase 726:
SELECT value1, tan(value3), pi(), 4.1 FROM numeric_tbl;
 value1 |         tan          |        pi         | ?column? 
--------+----------------------+-------------------+----------
    0.1 | -0.10033467208545055 | 3.141592653589793 |      4.1
    0.2 |  -0.2027100355086725 | 3.141592653589793 |      4.1
    0.3 | -0.30933624960962325 | 3.141592653589793 |      4.1
    1.1 |  -1.9647596572486523 | 3.141592653589793 |      4.1
    2.2 |   1.3738230567687946 | 3.141592653589793 |      4.1
    3.3 | -0.15974574766003222 | 3.141592653589793 |      4.1
(6 rows)

-- select tan with order by (EXPLAIN (COSTS OFF))
--Testcase 727:
EXPLAIN (COSTS OFF)
SELECT value1, tan(1-value3) FROM numeric_tbl ORDER BY tan(1-value3);
                                                                   QUERY PLAN                                                                   
------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on numeric_tbl
   Oracle query: SELECT /*aa3f3d35c6b866cba0f446a7a095f3d5*/ "VALUE1", "VALUE3" FROM  "NUMERIC_TBL" ORDER BY tan((1 - "VALUE3")) ASC NULLS LAST
(2 rows)

-- select tan with order by (result)
--Testcase 728:
SELECT value1, tan(1-value3) FROM numeric_tbl ORDER BY tan(1-value3);
 value1 |         tan          
--------+----------------------
    1.1 |  -1.7098465429045073
    2.2 | 0.058473854459578645
    0.1 |   1.9647596572486523
    3.3 |     2.28584787736698
    0.2 |   2.5721516221263188
    0.3 |   3.6021024479679786
(6 rows)

-- select tan with order by index (result)
--Testcase 729:
SELECT value1, tan(1-value3) FROM numeric_tbl ORDER BY 2,1;
 value1 |         tan          
--------+----------------------
    1.1 |  -1.7098465429045073
    2.2 | 0.058473854459578645
    0.1 |   1.9647596572486523
    3.3 |     2.28584787736698
    0.2 |   2.5721516221263188
    0.3 |   3.6021024479679786
(6 rows)

-- select tan with order by index (result)
--Testcase 730:
SELECT value1, tan(1-value3) FROM numeric_tbl ORDER BY 1,2;
 value1 |         tan          
--------+----------------------
    0.1 |   1.9647596572486523
    0.2 |   2.5721516221263188
    0.3 |   3.6021024479679786
    1.1 |  -1.7098465429045073
    2.2 | 0.058473854459578645
    3.3 |     2.28584787736698
(6 rows)

-- select tan with group by (EXPLAIN (COSTS OFF))
--Testcase 731:
EXPLAIN (COSTS OFF)
SELECT value1, tan(1-value3) FROM numeric_tbl GROUP BY value1, tan(1-value3);
                                                                       QUERY PLAN                                                                       
--------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan
   Oracle query: SELECT /*2d5906e8f81c7096e072b9cb5d4a2f6b*/ "VALUE1", tan((1 - "VALUE3")) FROM  "NUMERIC_TBL" GROUP BY "VALUE1", (tan((1 - "VALUE3")))
(2 rows)

-- select tan with group by (result)
--Testcase 732:
SELECT value1, tan(1-value3) FROM numeric_tbl GROUP BY value1, tan(1-value3);
 value1 |         tan          
--------+----------------------
    0.1 |   1.9647596572486519
    0.2 |   2.5721516221263188
    0.3 |    3.602102447967978
    1.1 |  -1.7098465429045078
    2.2 | 0.058473854459578464
    3.3 |   2.2858478773669813
(6 rows)

-- select tan with group by index (result)
--Testcase 733:
SELECT value1, tan(1-value3) FROM numeric_tbl GROUP BY 2,1;
 value1 |         tan          
--------+----------------------
    0.1 |   1.9647596572486519
    0.2 |   2.5721516221263188
    0.3 |    3.602102447967978
    1.1 |  -1.7098465429045078
    2.2 | 0.058473854459578464
    3.3 |   2.2858478773669813
(6 rows)

-- select tan with group by index (result)
--Testcase 734:
SELECT value1, tan(1-value3) FROM numeric_tbl GROUP BY 1,2;
 value1 |         tan          
--------+----------------------
    0.1 |   1.9647596572486519
    0.2 |   2.5721516221263188
    0.3 |    3.602102447967978
    1.1 |  -1.7098465429045078
    2.2 | 0.058473854459578464
    3.3 |   2.2858478773669813
(6 rows)

-- select tan with group by having (EXPLAIN (COSTS OFF))
--Testcase 735:
EXPLAIN (COSTS OFF)
SELECT value1, tan(1-value3) FROM numeric_tbl GROUP BY value1, tan(1-value3) HAVING tan(avg(value1)) > 0;
                                                                                       QUERY PLAN                                                                                       
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan
   Oracle query: SELECT /*be2007ee02356a15aafafb23d0227372*/ "VALUE1", tan((1 - "VALUE3")) FROM  "NUMERIC_TBL" GROUP BY "VALUE1", (tan((1 - "VALUE3"))) HAVING (tan(avg("VALUE1")) > 0)
(2 rows)

-- select tan with group by having (result)
--Testcase 736:
SELECT value1, tan(1-value3) FROM numeric_tbl GROUP BY value1, tan(1-value3) HAVING tan(avg(value1)) > 0;
 value1 |         tan         
--------+---------------------
    0.1 |  1.9647596572486519
    0.2 |  2.5721516221263188
    0.3 |   3.602102447967978
    1.1 | -1.7098465429045078
    3.3 |  2.2858478773669813
(5 rows)

-- select tan with group by index having (result)
--Testcase 737:
SELECT value1, tan(1-value3) FROM numeric_tbl GROUP BY 2,1 HAVING tan(1-value3) > 0;
 value1 |         tan          
--------+----------------------
    0.1 |   1.9647596572486519
    0.2 |   2.5721516221263188
    0.3 |    3.602102447967978
    2.2 | 0.058473854459578464
    3.3 |   2.2858478773669813
(5 rows)

-- select tan with group by index having (result)
--Testcase 738:
SELECT value1, tan(1-value3) FROM numeric_tbl GROUP BY 1,2 HAVING value1 > 1;
 value1 |         tan          
--------+----------------------
    1.1 |  -1.7098465429045078
    2.2 | 0.058473854459578464
    3.3 |   2.2858478773669813
(3 rows)

-- select tan and as
--Testcase 739:
SELECT value1, tan(value3) as tan1 FROM numeric_tbl;
 value1 |         tan1         
--------+----------------------
    0.1 | -0.10033467208545055
    0.2 |  -0.2027100355086725
    0.3 | -0.30933624960962325
    1.1 |  -1.9647596572486523
    2.2 |   1.3738230567687946
    3.3 | -0.15974574766003222
(6 rows)

-- ===============================================================================
-- test upper()
-- ===============================================================================
-- select upper (stub function, EXPLAIN (COSTS OFF))
--Testcase 740:
EXPLAIN (COSTS OFF)
SELECT upper(tag1), upper(str1), upper(str2) FROM numeric_tbl;
                                               QUERY PLAN                                               
--------------------------------------------------------------------------------------------------------
 Foreign Scan on numeric_tbl
   Oracle query: SELECT /*cfe4b846415e390289494b4d6e555317*/ "TAG1", "STR1", "STR2" FROM  "NUMERIC_TBL"
(2 rows)

-- select upper (stub function, result)
--Testcase 741:
SELECT upper(tag1), upper(str1), upper(str2) FROM numeric_tbl;
 upper |   upper   |   upper   
-------+-----------+-----------
 A     | ---XYZ--- |    ABC   
 A     | ---XYZ--- |    ABC   
 A     | ---XYZ--- |    ABC   
 B     | ---XYZ--- |    ABC   
 B     | ---XYZ--- |    ABC   
 B     | ---XYZ--- |    ABC   
(6 rows)

-- select upper (stub function, not pushdown constraints, EXPLAIN (COSTS OFF))
--Testcase 742:
EXPLAIN (COSTS OFF)
SELECT value1, upper(tag1) FROM numeric_tbl WHERE to_hex(value2) = '64';
                                                 QUERY PLAN                                                 
------------------------------------------------------------------------------------------------------------
 Foreign Scan on numeric_tbl
   Filter: (to_hex(value2) = '64'::text)
   Oracle query: SELECT /*248cf7b7bc5107e8b457c6d33a103008*/ "TAG1", "VALUE1", "VALUE2" FROM  "NUMERIC_TBL"
(3 rows)

-- select upper (stub function, not pushdown constraints, result)
--Testcase 743:
SELECT value1, upper(tag1) FROM numeric_tbl WHERE to_hex(value2) = '64';
 value1 | upper 
--------+-------
    0.1 | A
    0.2 | A
    0.3 | A
(3 rows)

-- select upper (stub function, pushdown constraints, EXPLAIN (COSTS OFF))
--Testcase 744:
EXPLAIN (COSTS OFF)
SELECT value1, upper(str1) FROM numeric_tbl WHERE value2 != 200;
                                                        QUERY PLAN                                                        
--------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on numeric_tbl
   Oracle query: SELECT /*7f396d83a07a7d806e4ce7625f7371d9*/ "VALUE1", "STR1" FROM  "NUMERIC_TBL" WHERE ("VALUE2" <> 200)
(2 rows)

-- select upper (stub function, pushdown constraints, result)
--Testcase 745:
SELECT value1, upper(str1) FROM numeric_tbl WHERE value2 != 200;
 value1 |   upper   
--------+-----------
    0.1 | ---XYZ---
    0.2 | ---XYZ---
    0.3 | ---XYZ---
(3 rows)

-- select upper with non pushdown func and explicit constant (EXPLAIN (COSTS OFF))
--Testcase 746:
EXPLAIN (COSTS OFF)
SELECT upper(str1), pi(), 4.1 FROM numeric_tbl;
                                       QUERY PLAN                                       
----------------------------------------------------------------------------------------
 Foreign Scan on numeric_tbl
   Oracle query: SELECT /*b0f206a14da49f63f52c0cf84e67a466*/ "STR1" FROM  "NUMERIC_TBL"
(2 rows)

-- select ucase with non pushdown func and explicit constant (result)
--Testcase 747:
SELECT upper(str1), pi(), 4.1 FROM numeric_tbl;
   upper   |        pi         | ?column? 
-----------+-------------------+----------
 ---XYZ--- | 3.141592653589793 |      4.1
 ---XYZ--- | 3.141592653589793 |      4.1
 ---XYZ--- | 3.141592653589793 |      4.1
 ---XYZ--- | 3.141592653589793 |      4.1
 ---XYZ--- | 3.141592653589793 |      4.1
 ---XYZ--- | 3.141592653589793 |      4.1
(6 rows)

-- select upper with order by (EXPLAIN (COSTS OFF))
--Testcase 748:
EXPLAIN (COSTS OFF)
SELECT value1, upper(str1) FROM numeric_tbl ORDER BY upper(str1);
                                               QUERY PLAN                                               
--------------------------------------------------------------------------------------------------------
 Sort
   Sort Key: (upper(str1))
   ->  Foreign Scan on numeric_tbl
         Oracle query: SELECT /*adc4aceb6c6364fd12224d4c1ad89a55*/ "VALUE1", "STR1" FROM  "NUMERIC_TBL"
(4 rows)

-- select upper with order by (result)
--Testcase 749:
SELECT value1, upper(str1) FROM numeric_tbl ORDER BY upper(str1);
 value1 |   upper   
--------+-----------
    0.1 | ---XYZ---
    0.2 | ---XYZ---
    0.3 | ---XYZ---
    1.1 | ---XYZ---
    2.2 | ---XYZ---
    3.3 | ---XYZ---
(6 rows)

-- select upper with order by index (result)
--Testcase 750:
SELECT value1, upper(str1) FROM numeric_tbl ORDER BY 2,1;
 value1 |   upper   
--------+-----------
    0.1 | ---XYZ---
    0.2 | ---XYZ---
    0.3 | ---XYZ---
    1.1 | ---XYZ---
    2.2 | ---XYZ---
    3.3 | ---XYZ---
(6 rows)

-- select upper with order by index (result)
--Testcase 751:
SELECT value1, upper(str1) FROM numeric_tbl ORDER BY 1,2;
 value1 |   upper   
--------+-----------
    0.1 | ---XYZ---
    0.2 | ---XYZ---
    0.3 | ---XYZ---
    1.1 | ---XYZ---
    2.2 | ---XYZ---
    3.3 | ---XYZ---
(6 rows)

-- select upper with group by (EXPLAIN (COSTS OFF))
--Testcase 752:
EXPLAIN (COSTS OFF)
SELECT count(value1), upper(str1) FROM numeric_tbl GROUP BY upper(str1);
                                                               QUERY PLAN                                                                
-----------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan
   Oracle query: SELECT /*16d90da9576961f3e33e5d988448aa29*/ count("VALUE1"), upper("STR1") FROM  "NUMERIC_TBL" GROUP BY (upper("STR1"))
(2 rows)

-- select upper with group by (result)
--Testcase 753:
SELECT count(value1), upper(str1) FROM numeric_tbl GROUP BY upper(str1);
 count |   upper   
-------+-----------
     6 | ---XYZ---
(1 row)

-- select upper with group by index (result)
--Testcase 754:
SELECT value1, upper(str1) FROM numeric_tbl GROUP BY 2,1;
 value1 |   upper   
--------+-----------
    0.1 | ---XYZ---
    0.2 | ---XYZ---
    0.3 | ---XYZ---
    1.1 | ---XYZ---
    2.2 | ---XYZ---
    3.3 | ---XYZ---
(6 rows)

-- select upper with group by having (EXPLAIN (COSTS OFF))
--Testcase 755:
EXPLAIN (COSTS OFF)
SELECT count(value1), upper(str1) FROM numeric_tbl GROUP BY upper(str1), tag1 HAVING upper(str1) IS NOT NULL;
                                                                                        QUERY PLAN                                                                                         
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan
   Oracle query: SELECT /*19194d80e84ff46f29fe20f609363066*/ count("VALUE1"), upper("STR1"), "TAG1" FROM  "NUMERIC_TBL" WHERE (upper("STR1") IS NOT NULL) GROUP BY (upper("STR1")), "TAG1"
(2 rows)

-- select upper with group by having (result)
--Testcase 756:
SELECT count(value1), upper(str1) FROM numeric_tbl GROUP BY upper(str1), tag1 HAVING upper(str1) IS NOT NULL;
 count |   upper   
-------+-----------
     3 | ---XYZ---
     3 | ---XYZ---
(2 rows)

-- select upper with group by index having (result)
--Testcase 757:
SELECT value1, upper(tag1) FROM numeric_tbl GROUP BY 1,2 HAVING value1 > 1;
 value1 | upper 
--------+-------
    1.1 | B
    2.2 | B
    3.3 | B
(3 rows)

-- ===============================================================================
-- test log()
-- ===============================================================================
-- select log (builtin function, numeric cast, EXPLAIN (COSTS OFF))
-- log_<base>(v) : postgresql (base, v), mysql (base, v)
--Testcase 758:
EXPLAIN (COSTS OFF)
SELECT value1, log(value1::numeric, value2::numeric) FROM numeric_tbl WHERE value1 != 1;
                                                        QUERY PLAN                                                        
--------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on numeric_tbl
   Oracle query: SELECT /*7881a110524530cfd8973b403543a9a4*/ "VALUE1", "VALUE2" FROM  "NUMERIC_TBL" WHERE ("VALUE1" <> 1)
(2 rows)

-- select log (builtin function, numeric cast, result)
--Testcase 759:
SELECT value1, log(value1::numeric, value2::numeric) FROM numeric_tbl WHERE value1 != 1;
 value1 |         log         
--------+---------------------
    0.1 | -2.0000000000000000
    0.2 | -2.8613531161467861
    0.3 | -3.8249785787863969
    1.1 |  55.590256753535330
    2.2 |  6.7198527566540755
    3.3 |  4.4377398922117404
(6 rows)

-- select log (builtin function,  float8, EXPLAIN (COSTS OFF))
--Testcase 760:
EXPLAIN (COSTS OFF)
SELECT value1, log(value1::numeric, 0.1) FROM numeric_tbl WHERE value1 != 1;
                                                   QUERY PLAN                                                   
----------------------------------------------------------------------------------------------------------------
 Foreign Scan on numeric_tbl
   Oracle query: SELECT /*45f17844bf503ef8abeddf513c91ae9f*/ "VALUE1" FROM  "NUMERIC_TBL" WHERE ("VALUE1" <> 1)
(2 rows)

-- select log (builtin function, float8, result)
--Testcase 761:
SELECT value1, log(value1::numeric, 0.1) FROM numeric_tbl WHERE value1 != 1;
 value1 |         log         
--------+---------------------
    0.1 |  1.0000000000000000
    0.2 |  1.4306765580733931
    0.3 |  1.9124892893931984
    1.1 | -24.158857928096806
    2.2 | -2.9203673004336506
    3.3 | -1.9285884584617046
(6 rows)

-- select log (builtin function, bigint, EXPLAIN (COSTS OFF))
--Testcase 762:
EXPLAIN (COSTS OFF)
SELECT value1, log(value2::numeric, 3) FROM numeric_tbl WHERE value1 != 1;
                                                        QUERY PLAN                                                        
--------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on numeric_tbl
   Oracle query: SELECT /*7881a110524530cfd8973b403543a9a4*/ "VALUE1", "VALUE2" FROM  "NUMERIC_TBL" WHERE ("VALUE1" <> 1)
(2 rows)

-- select log (builtin function, bigint, result)
--Testcase 763:
SELECT value1, log(value2::numeric, 3) FROM numeric_tbl WHERE value1 != 1;
 value1 |        log         
--------+--------------------
    0.1 | 0.2385606273598312
    0.2 | 0.2385606273598312
    0.3 | 0.2385606273598312
    1.1 | 0.2073511669203535
    2.2 | 0.2073511669203535
    3.3 | 0.2073511669203535
(6 rows)

-- select log (builtin function, mix type, EXPLAIN (COSTS OFF))
--Testcase 764:
EXPLAIN (COSTS OFF)
SELECT value1, log(value1::numeric, value2::numeric) FROM numeric_tbl WHERE value1 != 1;
                                                        QUERY PLAN                                                        
--------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on numeric_tbl
   Oracle query: SELECT /*7881a110524530cfd8973b403543a9a4*/ "VALUE1", "VALUE2" FROM  "NUMERIC_TBL" WHERE ("VALUE1" <> 1)
(2 rows)

-- select log (builtin function,  mix type, result)
--Testcase 765:
SELECT value1, log(value1::numeric, value2::numeric) FROM numeric_tbl WHERE value1 != 1;
 value1 |         log         
--------+---------------------
    0.1 | -2.0000000000000000
    0.2 | -2.8613531161467861
    0.3 | -3.8249785787863969
    1.1 |  55.590256753535330
    2.2 |  6.7198527566540755
    3.3 |  4.4377398922117404
(6 rows)

-- select log(v) -- built in function
-- log(v): postgreSQL base 10 logarithm
--Testcase 766:
EXPLAIN (COSTS OFF)
SELECT log(10, value2) FROM numeric_tbl WHERE value1 != 1;
                                                   QUERY PLAN                                                   
----------------------------------------------------------------------------------------------------------------
 Foreign Scan on numeric_tbl
   Oracle query: SELECT /*fefc46b83863a5ceef3ca6383785ab32*/ "VALUE2" FROM  "NUMERIC_TBL" WHERE ("VALUE1" <> 1)
(2 rows)

--Testcase 767:
SELECT log(10, value2) FROM numeric_tbl WHERE value1 != 1;
        log         
--------------------
 2.0000000000000000
 2.0000000000000000
 2.0000000000000000
 2.3010299956639812
 2.3010299956639812
 2.3010299956639812
(6 rows)

-- select log (builtin function, EXPLAIN (COSTS OFF))
--Testcase 768:
EXPLAIN (COSTS OFF)
SELECT log(10, value2), log(10, value2), log(0.5) FROM numeric_tbl;
                                        QUERY PLAN                                        
------------------------------------------------------------------------------------------
 Foreign Scan on numeric_tbl
   Oracle query: SELECT /*942bf85feb96f605a79f40dffa8f6645*/ "VALUE2" FROM  "NUMERIC_TBL"
(2 rows)

-- select log (builtin function, result)
--Testcase 769:
SELECT log(10, value2), log(10, value2), log(0.5) FROM numeric_tbl;
        log         |        log         |         log         
--------------------+--------------------+---------------------
 2.0000000000000000 | 2.0000000000000000 | -0.3010299956639812
 2.0000000000000000 | 2.0000000000000000 | -0.3010299956639812
 2.0000000000000000 | 2.0000000000000000 | -0.3010299956639812
 2.3010299956639812 | 2.3010299956639812 | -0.3010299956639812
 2.3010299956639812 | 2.3010299956639812 | -0.3010299956639812
 2.3010299956639812 | 2.3010299956639812 | -0.3010299956639812
(6 rows)

-- select log (builtin function, not pushdown constraints, EXPLAIN (COSTS OFF))
--Testcase 770:
EXPLAIN (COSTS OFF)
SELECT log(10, value2), log(10, value2), log(0.5) FROM numeric_tbl WHERE to_hex(value2) = '64';
                                        QUERY PLAN                                        
------------------------------------------------------------------------------------------
 Foreign Scan on numeric_tbl
   Filter: (to_hex(value2) = '64'::text)
   Oracle query: SELECT /*942bf85feb96f605a79f40dffa8f6645*/ "VALUE2" FROM  "NUMERIC_TBL"
(3 rows)

-- select log (builtin function, not pushdown constraints, result)
--Testcase 771:
SELECT log(10, value2), log(10, value2), log(0.5) FROM numeric_tbl WHERE to_hex(value2) = '64';
        log         |        log         |         log         
--------------------+--------------------+---------------------
 2.0000000000000000 | 2.0000000000000000 | -0.3010299956639812
 2.0000000000000000 | 2.0000000000000000 | -0.3010299956639812
 2.0000000000000000 | 2.0000000000000000 | -0.3010299956639812
(3 rows)

-- select log (builtin function, pushdown constraints, EXPLAIN (COSTS OFF))
--Testcase 772:
EXPLAIN (COSTS OFF)
SELECT log(10, value2), log(10, value2), log(0.5) FROM numeric_tbl WHERE value2 != 200;
                                                    QUERY PLAN                                                    
------------------------------------------------------------------------------------------------------------------
 Foreign Scan on numeric_tbl
   Oracle query: SELECT /*b4e386f43c4d9d83db8b37b255270e70*/ "VALUE2" FROM  "NUMERIC_TBL" WHERE ("VALUE2" <> 200)
(2 rows)

-- select log (builtin function, pushdown constraints, result)
--Testcase 773:
SELECT log(10, value2), log(10, value2), log(0.5) FROM numeric_tbl WHERE value2 != 200;
        log         |        log         |         log         
--------------------+--------------------+---------------------
 2.0000000000000000 | 2.0000000000000000 | -0.3010299956639812
 2.0000000000000000 | 2.0000000000000000 | -0.3010299956639812
 2.0000000000000000 | 2.0000000000000000 | -0.3010299956639812
(3 rows)

-- select log (builtin function, log in constraints, EXPLAIN (COSTS OFF))
--Testcase 774:
EXPLAIN (COSTS OFF)
SELECT log(10, value2), log(10, value2), log(0.5) FROM numeric_tbl WHERE log(10, value2) != 1;
                                                       QUERY PLAN                                                        
-------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on numeric_tbl
   Oracle query: SELECT /*8a673c08ab77b7f3c97c8dabf715b0a8*/ "VALUE2" FROM  "NUMERIC_TBL" WHERE (log(10, "VALUE2") <> 1)
(2 rows)

-- select log (builtin function, log in constraints, result)
--Testcase 775:
SELECT log(10, value2), log(10, value2), log(0.5) FROM numeric_tbl WHERE log(10, value2) != 1;
        log         |        log         |         log         
--------------------+--------------------+---------------------
 2.0000000000000000 | 2.0000000000000000 | -0.3010299956639812
 2.0000000000000000 | 2.0000000000000000 | -0.3010299956639812
 2.0000000000000000 | 2.0000000000000000 | -0.3010299956639812
 2.3010299956639812 | 2.3010299956639812 | -0.3010299956639812
 2.3010299956639812 | 2.3010299956639812 | -0.3010299956639812
 2.3010299956639812 | 2.3010299956639812 | -0.3010299956639812
(6 rows)

-- select log (builtin function, log in constraints, EXPLAIN (COSTS OFF))
--Testcase 776:
EXPLAIN (COSTS OFF)
SELECT log(10, value2), log(10, value2), log(0.5) FROM numeric_tbl WHERE log(5) > value1;
                                                           QUERY PLAN                                                           
--------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on numeric_tbl
   Oracle query: SELECT /*49ba6aff26d2d70a981a95e3989c284d*/ "VALUE2" FROM  "NUMERIC_TBL" WHERE (0.6989700043360189 > "VALUE1")
(2 rows)

-- select log (builtin function, log in constraints, result)
--Testcase 777:
SELECT log(10, value2), log(10, value2), log(0.5) FROM numeric_tbl WHERE log(5) > value1;
        log         |        log         |         log         
--------------------+--------------------+---------------------
 2.0000000000000000 | 2.0000000000000000 | -0.3010299956639812
 2.0000000000000000 | 2.0000000000000000 | -0.3010299956639812
 2.0000000000000000 | 2.0000000000000000 | -0.3010299956639812
(3 rows)

-- select log as nest function with agg (pushdown, EXPLAIN (COSTS OFF))
--Testcase 778:
EXPLAIN (COSTS OFF)
SELECT sum(value3),log(10, sum(value2)) FROM numeric_tbl;
                                                      QUERY PLAN                                                       
-----------------------------------------------------------------------------------------------------------------------
 Foreign Scan
   Oracle query: SELECT /*939aeb646befab0291934dd8c57bf26b*/ sum("VALUE3"), log(10, sum("VALUE2")) FROM  "NUMERIC_TBL"
(2 rows)

-- select log as nest function with agg (pushdown, result)
--Testcase 779:
SELECT sum(value3),log(10, sum(value2)) FROM numeric_tbl;
 sum  |                   log                   
------+-----------------------------------------
 -7.2 | 2.9542425094393248745900558065102306184
(1 row)

-- select log as nest with log2 (pushdown, EXPLAIN (COSTS OFF))
--Testcase 780:
EXPLAIN (COSTS OFF)
SELECT value1, log(log(2, value2)) FROM numeric_tbl;
                                             QUERY PLAN                                             
----------------------------------------------------------------------------------------------------
 Foreign Scan on numeric_tbl
   Oracle query: SELECT /*c35678a687054ae56f3a83ca5558704c*/ "VALUE1", "VALUE2" FROM  "NUMERIC_TBL"
(2 rows)

-- select log as nest with log2 (pushdown, result)
--Testcase 781:
SELECT value1, log(log(2, value2)) FROM numeric_tbl;
 value1 |        log         
--------+--------------------
    0.1 | 0.8224202233183060
    0.2 | 0.8224202233183060
    0.3 | 0.8224202233183060
    1.1 | 0.8833125077164665
    2.2 | 0.8833125077164665
    3.3 | 0.8833125077164665
(6 rows)

-- select log with non pushdown func and explicit constant (EXPLAIN (COSTS OFF))
--Testcase 782:
EXPLAIN (COSTS OFF)
SELECT log(10, value2), pi(), 4.1 FROM numeric_tbl;
                                        QUERY PLAN                                        
------------------------------------------------------------------------------------------
 Foreign Scan on numeric_tbl
   Oracle query: SELECT /*942bf85feb96f605a79f40dffa8f6645*/ "VALUE2" FROM  "NUMERIC_TBL"
(2 rows)

-- select log with non pushdown func and explicit constant (result)
--Testcase 783:
SELECT log(10, value2), pi(), 4.1 FROM numeric_tbl;
        log         |        pi         | ?column? 
--------------------+-------------------+----------
 2.0000000000000000 | 3.141592653589793 |      4.1
 2.0000000000000000 | 3.141592653589793 |      4.1
 2.0000000000000000 | 3.141592653589793 |      4.1
 2.3010299956639812 | 3.141592653589793 |      4.1
 2.3010299956639812 | 3.141592653589793 |      4.1
 2.3010299956639812 | 3.141592653589793 |      4.1
(6 rows)

-- select log with order by (EXPLAIN (COSTS OFF))
--Testcase 784:
EXPLAIN (COSTS OFF)
SELECT value3, log(10, value2) FROM numeric_tbl ORDER BY log(10, value2);
                                                                  QUERY PLAN                                                                  
----------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on numeric_tbl
   Oracle query: SELECT /*118ced714383c4b4583979bfb9b164f0*/ "VALUE2", "VALUE3" FROM  "NUMERIC_TBL" ORDER BY log(10, "VALUE2") ASC NULLS LAST
(2 rows)

-- select log with order by (result)
--Testcase 785:
SELECT value3, log(10, value2) FROM numeric_tbl ORDER BY log(10, value2);
 value3 |        log         
--------+--------------------
   -0.1 | 2.0000000000000000
   -0.2 | 2.0000000000000000
   -0.3 | 2.0000000000000000
   -1.1 | 2.3010299956639812
   -2.2 | 2.3010299956639812
   -3.3 | 2.3010299956639812
(6 rows)

-- select log with order by index (result)
--Testcase 786:
SELECT value3, log(10, value2) FROM numeric_tbl ORDER BY 2,1;
 value3 |        log         
--------+--------------------
   -0.3 | 2.0000000000000000
   -0.2 | 2.0000000000000000
   -0.1 | 2.0000000000000000
   -3.3 | 2.3010299956639812
   -2.2 | 2.3010299956639812
   -1.1 | 2.3010299956639812
(6 rows)

-- select log with order by index (result)
--Testcase 787:
SELECT value3, log(10, value2) FROM numeric_tbl ORDER BY 1,2;
 value3 |        log         
--------+--------------------
   -3.3 | 2.3010299956639812
   -2.2 | 2.3010299956639812
   -1.1 | 2.3010299956639812
   -0.3 | 2.0000000000000000
   -0.2 | 2.0000000000000000
   -0.1 | 2.0000000000000000
(6 rows)

-- select log with group by (EXPLAIN (COSTS OFF))
--Testcase 788:
EXPLAIN (COSTS OFF)
SELECT count(value1), log(10, value2) FROM numeric_tbl GROUP BY log(10, value2);
                                                                   QUERY PLAN                                                                    
-------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan
   Oracle query: SELECT /*11dab5fc666fcd2b86d9b7df28930a53*/ count("VALUE1"), log(10, "VALUE2") FROM  "NUMERIC_TBL" GROUP BY (log(10, "VALUE2"))
(2 rows)

-- select log with group by (result)
--Testcase 789:
SELECT count(value1), log(10, value2) FROM numeric_tbl GROUP BY log(10, value2);
 count |                   log                    
-------+------------------------------------------
     3 |                                        2
     3 | 2.30102999566398119521373889472449302677
(2 rows)

-- select log with group by index (result)
--Testcase 790:
SELECT value1, log(10, value2) FROM numeric_tbl GROUP BY 2,1;
 value1 |                   log                    
--------+------------------------------------------
    0.1 |                                        2
    0.2 |                                        2
    0.3 |                                        2
    1.1 | 2.30102999566398119521373889472449302677
    2.2 | 2.30102999566398119521373889472449302677
    3.3 | 2.30102999566398119521373889472449302677
(6 rows)

-- select log with group by index (result)
--Testcase 791:
SELECT value1, log(10, value2) FROM numeric_tbl GROUP BY 1,2;
 value1 |                   log                    
--------+------------------------------------------
    0.1 |                                        2
    0.2 |                                        2
    0.3 |                                        2
    1.1 | 2.30102999566398119521373889472449302677
    2.2 | 2.30102999566398119521373889472449302677
    3.3 | 2.30102999566398119521373889472449302677
(6 rows)

-- select log with group by having (EXPLAIN (COSTS OFF))
--Testcase 792:
EXPLAIN (COSTS OFF)
SELECT count(value1), log(10, value2) FROM numeric_tbl GROUP BY log(10, value2) HAVING log(10, avg(value2)) > 0;
                                                                                     QUERY PLAN                                                                                      
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan
   Oracle query: SELECT /*5a9a10765c96322481ad50f41a55bf8a*/ count("VALUE1"), log(10, "VALUE2") FROM  "NUMERIC_TBL" GROUP BY (log(10, "VALUE2")) HAVING (log(10, avg("VALUE2")) > 0)
(2 rows)

-- select log with group by having (result)
--Testcase 793:
SELECT count(value1), log(10, value2) FROM numeric_tbl GROUP BY log(10, value2) HAVING log(10, avg(value2)) > 0;
 count |                   log                    
-------+------------------------------------------
     3 |                                        2
     3 | 2.30102999566398119521373889472449302677
(2 rows)

-- select log with group by index having (result)
--Testcase 794:
SELECT value3, log(10, value2) FROM numeric_tbl GROUP BY 2,1 HAVING log(10, value2) < 0;
 value3 | log 
--------+-----
(0 rows)

-- select log with group by index having (result)
--Testcase 795:
SELECT value3, log(10, value2) FROM numeric_tbl GROUP BY 1,2 HAVING value3 > 1;
 value3 | log 
--------+-----
(0 rows)

-- select log and as
--Testcase 796:
SELECT log(10, value2) as log1 FROM numeric_tbl;
        log1        
--------------------
 2.0000000000000000
 2.0000000000000000
 2.0000000000000000
 2.3010299956639812
 2.3010299956639812
 2.3010299956639812
(6 rows)

-- ===============================================================================
-- test ln()
-- ===============================================================================
-- select ln as nest function with agg (pushdown, EXPLAIN (COSTS OFF))
--Testcase 797:
EXPLAIN (COSTS OFF)
SELECT sum(value3),ln(sum(value1)) FROM numeric_tbl;
                                                    QUERY PLAN                                                    
------------------------------------------------------------------------------------------------------------------
 Foreign Scan
   Oracle query: SELECT /*e65f7bf7a9005e1e1ca300ce48aadf5e*/ sum("VALUE3"), ln(sum("VALUE1")) FROM  "NUMERIC_TBL"
(2 rows)

-- select ln as nest function with agg (pushdown, result)
--Testcase 798:
SELECT sum(value3),ln(sum(value1)) FROM numeric_tbl;
 sum  |         ln         
------+--------------------
 -7.2 | 1.9740810260220096
(1 row)

-- select ln as nest with log2 (pushdown, EXPLAIN (COSTS OFF))
--Testcase 799:
EXPLAIN (COSTS OFF)
SELECT value1, ln(log(2, value2)) FROM numeric_tbl;
                                             QUERY PLAN                                             
----------------------------------------------------------------------------------------------------
 Foreign Scan on numeric_tbl
   Oracle query: SELECT /*c35678a687054ae56f3a83ca5558704c*/ "VALUE1", "VALUE2" FROM  "NUMERIC_TBL"
(2 rows)

-- select ln as nest with log2 (pushdown, result)
--Testcase 800:
SELECT value1, ln(log(2, value2)) FROM numeric_tbl;
 value1 |         ln         
--------+--------------------
    0.1 | 1.8936925463895654
    0.2 | 1.8936925463895654
    0.3 | 1.8936925463895654
    1.1 | 2.0339022127231237
    2.2 | 2.0339022127231237
    3.3 | 2.0339022127231237
(6 rows)

-- select ln with non pushdown func and explicit constant (EXPLAIN (COSTS OFF))
--Testcase 801:
EXPLAIN (COSTS OFF)
SELECT ln(value2), pi(), 4.1 FROM numeric_tbl;
                                        QUERY PLAN                                        
------------------------------------------------------------------------------------------
 Foreign Scan on numeric_tbl
   Oracle query: SELECT /*942bf85feb96f605a79f40dffa8f6645*/ "VALUE2" FROM  "NUMERIC_TBL"
(2 rows)

-- select ln with non pushdown func and explicit constant (result)
--Testcase 802:
SELECT ln(value2), pi(), 4.1 FROM numeric_tbl;
        ln         |        pi         | ?column? 
-------------------+-------------------+----------
 4.605170185988092 | 3.141592653589793 |      4.1
 4.605170185988092 | 3.141592653589793 |      4.1
 4.605170185988092 | 3.141592653589793 |      4.1
 5.298317366548036 | 3.141592653589793 |      4.1
 5.298317366548036 | 3.141592653589793 |      4.1
 5.298317366548036 | 3.141592653589793 |      4.1
(6 rows)

-- select ln with order by (EXPLAIN (COSTS OFF))
--Testcase 803:
EXPLAIN (COSTS OFF)
SELECT value1, ln(1-value3) FROM numeric_tbl ORDER BY ln(1-value3);
                                                                  QUERY PLAN                                                                   
-----------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on numeric_tbl
   Oracle query: SELECT /*504ba00e08115ee0e28c81454bbb57d1*/ "VALUE1", "VALUE3" FROM  "NUMERIC_TBL" ORDER BY ln((1 - "VALUE3")) ASC NULLS LAST
(2 rows)

-- select ln with order by (result)
--Testcase 804:
SELECT value1, ln(1-value3) FROM numeric_tbl ORDER BY ln(1-value3);
 value1 |         ln          
--------+---------------------
    0.1 | 0.09531017980432493
    0.2 |  0.1823215567939546
    0.3 | 0.26236426446749106
    1.1 |  0.7419373447293773
    2.2 |  1.1631508098056809
    3.3 |  1.4586150226995167
(6 rows)

-- select ln with order by index (result)
--Testcase 805:
SELECT value1, ln(1-value3) FROM numeric_tbl ORDER BY 2,1;
 value1 |         ln          
--------+---------------------
    0.1 | 0.09531017980432493
    0.2 |  0.1823215567939546
    0.3 | 0.26236426446749106
    1.1 |  0.7419373447293773
    2.2 |  1.1631508098056809
    3.3 |  1.4586150226995167
(6 rows)

-- select ln with order by index (result)
--Testcase 806:
SELECT value1, ln(1-value3) FROM numeric_tbl ORDER BY 1,2;
 value1 |         ln          
--------+---------------------
    0.1 | 0.09531017980432493
    0.2 |  0.1823215567939546
    0.3 | 0.26236426446749106
    1.1 |  0.7419373447293773
    2.2 |  1.1631508098056809
    3.3 |  1.4586150226995167
(6 rows)

-- select ln with group by (EXPLAIN (COSTS OFF))
--Testcase 807:
EXPLAIN (COSTS OFF)
SELECT count(value1), ln(1-value3) FROM numeric_tbl GROUP BY ln(1-value3);
                                                                    QUERY PLAN                                                                     
---------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan
   Oracle query: SELECT /*b167e846e8d27d3f7a16f5c07b4cccdf*/ count("VALUE1"), ln((1 - "VALUE3")) FROM  "NUMERIC_TBL" GROUP BY (ln((1 - "VALUE3")))
(2 rows)

-- select ln with group by (result)
--Testcase 808:
SELECT count(value1), ln(1-value3) FROM numeric_tbl GROUP BY ln(1-value3);
 count |         ln          
-------+---------------------
     1 | 0.09531017980432487
     1 | 0.18232155679395462
     1 | 0.26236426446749106
     1 |  0.7419373447293773
     1 |  1.1631508098056809
     1 |  1.4586150226995167
(6 rows)

-- select ln with group by index (result)
--Testcase 809:
SELECT value1, ln(1-value3) FROM numeric_tbl GROUP BY 2,1;
 value1 |         ln          
--------+---------------------
    0.1 | 0.09531017980432487
    0.2 | 0.18232155679395462
    0.3 | 0.26236426446749106
    1.1 |  0.7419373447293773
    2.2 |  1.1631508098056809
    3.3 |  1.4586150226995167
(6 rows)

-- select ln with group by index (result)
--Testcase 810:
SELECT value1, ln(1-value3) FROM numeric_tbl GROUP BY 1,2;
 value1 |         ln          
--------+---------------------
    0.1 | 0.09531017980432487
    0.2 | 0.18232155679395462
    0.3 | 0.26236426446749106
    1.1 |  0.7419373447293773
    2.2 |  1.1631508098056809
    3.3 |  1.4586150226995167
(6 rows)

-- select ln with group by having (EXPLAIN (COSTS OFF))
--Testcase 811:
EXPLAIN (COSTS OFF)
SELECT count(value1), ln(1-value3) FROM numeric_tbl GROUP BY ln(1-value3) HAVING ln(avg(value1)) > 0;
                                                                                    QUERY PLAN                                                                                    
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan
   Oracle query: SELECT /*3953b604b24ff41d77c586db9b47771e*/ count("VALUE1"), ln((1 - "VALUE3")) FROM  "NUMERIC_TBL" GROUP BY (ln((1 - "VALUE3"))) HAVING (ln(avg("VALUE1")) > 0)
(2 rows)

-- select ln with group by having (result)
--Testcase 812:
SELECT count(value1), ln(1-value3) FROM numeric_tbl GROUP BY ln(1-value3) HAVING ln(avg(value1)) > 0;
 count |         ln         
-------+--------------------
     1 | 0.7419373447293773
     1 | 1.1631508098056809
     1 | 1.4586150226995167
(3 rows)

-- select ln with group by index having (result)
--Testcase 813:
SELECT value1, ln(1-value3) FROM numeric_tbl GROUP BY 2,1 HAVING ln(1-value3) < 0;
 value1 | ln 
--------+----
(0 rows)

-- select ln with group by index having (result)
--Testcase 814:
SELECT value1, ln(1-value3) FROM numeric_tbl GROUP BY 1,2 HAVING value1 > 1;
 value1 |         ln         
--------+--------------------
    1.1 | 0.7419373447293773
    2.2 | 1.1631508098056809
    3.3 | 1.4586150226995167
(3 rows)

-- select ln and as
--Testcase 815:
SELECT ln(value1) as ln1 FROM numeric_tbl;
         ln1         
---------------------
 -2.3025850929940455
 -1.6094379124341003
 -1.2039728043259361
 0.09531017980432493
  0.7884573603642703
  1.1939224684724346
(6 rows)

-- select ln (builtin function, EXPLAIN (COSTS OFF))
--Testcase 816:
EXPLAIN (COSTS OFF)
SELECT ln(value1), ln(value2), ln(value3 + 10), ln(0.5) FROM numeric_tbl;
                                                  QUERY PLAN                                                  
--------------------------------------------------------------------------------------------------------------
 Foreign Scan on numeric_tbl
   Oracle query: SELECT /*249d755f0bb51a1ea319951d9816fd9d*/ "VALUE1", "VALUE2", "VALUE3" FROM  "NUMERIC_TBL"
(2 rows)

-- select ln (builtin function, result)
--Testcase 817:
SELECT ln(value1), ln(value2), ln(value3 + 10), ln(0.5) FROM numeric_tbl;
         ln          |        ln         |         ln         |         ln          
---------------------+-------------------+--------------------+---------------------
 -2.3025850929940455 | 4.605170185988092 | 2.2925347571405443 | -0.6931471805599453
 -1.6094379124341003 | 4.605170185988092 | 2.2823823856765264 | -0.6931471805599453
 -1.2039728043259361 | 4.605170185988092 |  2.272125885509337 | -0.6931471805599453
 0.09531017980432493 | 5.298317366548036 |  2.186051276738094 | -0.6931471805599453
  0.7884573603642703 | 5.298317366548036 | 2.0541237336955462 | -0.6931471805599453
  1.1939224684724346 | 5.298317366548036 | 1.9021075263969205 | -0.6931471805599453
(6 rows)

-- select ln (builtin function, not pushdown constraints, EXPLAIN (COSTS OFF))
--Testcase 818:
EXPLAIN (COSTS OFF)
SELECT ln(value1), ln(value2), ln(value3 + 10), ln(0.5) FROM numeric_tbl WHERE to_hex(value2) = '64';
                                                  QUERY PLAN                                                  
--------------------------------------------------------------------------------------------------------------
 Foreign Scan on numeric_tbl
   Filter: (to_hex(value2) = '64'::text)
   Oracle query: SELECT /*249d755f0bb51a1ea319951d9816fd9d*/ "VALUE1", "VALUE2", "VALUE3" FROM  "NUMERIC_TBL"
(3 rows)

-- select ln (builtin function, not pushdown constraints, result)
--Testcase 819:
SELECT ln(value1), ln(value2), ln(value3 + 10), ln(0.5) FROM numeric_tbl WHERE to_hex(value2) = '64';
         ln          |        ln         |         ln         |         ln          
---------------------+-------------------+--------------------+---------------------
 -2.3025850929940455 | 4.605170185988092 | 2.2925347571405443 | -0.6931471805599453
 -1.6094379124341003 | 4.605170185988092 | 2.2823823856765264 | -0.6931471805599453
 -1.2039728043259361 | 4.605170185988092 |  2.272125885509337 | -0.6931471805599453
(3 rows)

-- select ln (builtin function, pushdown constraints, EXPLAIN (COSTS OFF))
--Testcase 820:
EXPLAIN (COSTS OFF)
SELECT ln(value1), ln(value2), ln(value3 + 10), ln(0.5) FROM numeric_tbl WHERE value2 != 200;
                                                              QUERY PLAN                                                              
--------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on numeric_tbl
   Oracle query: SELECT /*edc247d75d9e348a13b241007d963e77*/ "VALUE1", "VALUE2", "VALUE3" FROM  "NUMERIC_TBL" WHERE ("VALUE2" <> 200)
(2 rows)

-- select ln (builtin function, pushdown constraints, result)
--Testcase 821:
SELECT ln(value1), ln(value2), ln(value3 + 10), ln(0.5) FROM numeric_tbl WHERE value2 != 200;
         ln          |        ln         |         ln         |         ln          
---------------------+-------------------+--------------------+---------------------
 -2.3025850929940455 | 4.605170185988092 | 2.2925347571405443 | -0.6931471805599453
 -1.6094379124341003 | 4.605170185988092 | 2.2823823856765264 | -0.6931471805599453
 -1.2039728043259361 | 4.605170185988092 |  2.272125885509337 | -0.6931471805599453
(3 rows)

-- select ln (builtin function, ln in constraints, EXPLAIN (COSTS OFF))
--Testcase 822:
EXPLAIN (COSTS OFF)
SELECT ln(value1), ln(value2), ln(value3 + 10), ln(0.5) FROM numeric_tbl WHERE ln(value1) != 1;
                                                               QUERY PLAN                                                               
----------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on numeric_tbl
   Oracle query: SELECT /*7dbe5066d200d743f6f9c159e7d5c6a1*/ "VALUE1", "VALUE2", "VALUE3" FROM  "NUMERIC_TBL" WHERE (ln("VALUE1") <> 1)
(2 rows)

-- select ln (builtin function, ln in constraints, result)
--Testcase 823:
SELECT ln(value1), ln(value2), ln(value3 + 10), ln(0.5) FROM numeric_tbl WHERE ln(value1) != 1;
         ln          |        ln         |         ln         |         ln          
---------------------+-------------------+--------------------+---------------------
 -2.3025850929940455 | 4.605170185988092 | 2.2925347571405443 | -0.6931471805599453
 -1.6094379124341003 | 4.605170185988092 | 2.2823823856765264 | -0.6931471805599453
 -1.2039728043259361 | 4.605170185988092 |  2.272125885509337 | -0.6931471805599453
 0.09531017980432493 | 5.298317366548036 |  2.186051276738094 | -0.6931471805599453
  0.7884573603642703 | 5.298317366548036 | 2.0541237336955462 | -0.6931471805599453
  1.1939224684724346 | 5.298317366548036 | 1.9021075263969205 | -0.6931471805599453
(6 rows)

-- select ln (builtin function, ln in constraints, EXPLAIN (COSTS OFF))
--Testcase 824:
EXPLAIN (COSTS OFF)
SELECT ln(value1), ln(value2), ln(value3 + 10), ln(0.5) FROM numeric_tbl WHERE ln(0.5) < value1;
                                                                     QUERY PLAN                                                                      
-----------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on numeric_tbl
   Oracle query: SELECT /*c8c7d4b73e8b7afff9c87aec2f9893e8*/ "VALUE1", "VALUE2", "VALUE3" FROM  "NUMERIC_TBL" WHERE (-0.6931471805599453 < "VALUE1")
(2 rows)

-- select ln (builtin function, ln in constraints, result)
--Testcase 825:
SELECT ln(value1), ln(value2), ln(value3 + 10), ln(0.5) FROM numeric_tbl WHERE ln(0.5) < value1;
         ln          |        ln         |         ln         |         ln          
---------------------+-------------------+--------------------+---------------------
 -2.3025850929940455 | 4.605170185988092 | 2.2925347571405443 | -0.6931471805599453
 -1.6094379124341003 | 4.605170185988092 | 2.2823823856765264 | -0.6931471805599453
 -1.2039728043259361 | 4.605170185988092 |  2.272125885509337 | -0.6931471805599453
 0.09531017980432493 | 5.298317366548036 |  2.186051276738094 | -0.6931471805599453
  0.7884573603642703 | 5.298317366548036 | 2.0541237336955462 | -0.6931471805599453
  1.1939224684724346 | 5.298317366548036 | 1.9021075263969205 | -0.6931471805599453
(6 rows)

-- ===============================================================================
-- test floor()
-- ===============================================================================
-- select floor (builtin function, EXPLAIN (COSTS OFF))
--Testcase 826:
EXPLAIN (COSTS OFF)
SELECT floor(value1), floor(value2), floor(value3), floor(value4), floor(1.5) FROM numeric_tbl;
                                                       QUERY PLAN                                                       
------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on numeric_tbl
   Oracle query: SELECT /*3a3e9ce1642025dfd6451e15cf1fadd9*/ "VALUE1", "VALUE2", "VALUE3", "VALUE4" FROM  "NUMERIC_TBL"
(2 rows)

-- select floor (builtin function, result)
--Testcase 827:
SELECT floor(value1), floor(value2), floor(value3), floor(value4), floor(1.5) FROM numeric_tbl;
 floor | floor | floor | floor | floor 
-------+-------+-------+-------+-------
     0 |   100 |    -1 |  -100 |     1
     0 |   100 |    -1 |  -100 |     1
     0 |   100 |    -1 |  -100 |     1
     1 |   200 |    -2 |  -200 |     1
     2 |   200 |    -3 |  -200 |     1
     3 |   200 |    -4 |  -200 |     1
(6 rows)

-- select floor (builtin function, not pushdown constraints, EXPLAIN (COSTS OFF))
--Testcase 828:
EXPLAIN (COSTS OFF)
SELECT floor(value1), floor(value2), floor(value3), floor(value4), floor(1.5) FROM numeric_tbl WHERE to_hex(value2) = '64';
                                                       QUERY PLAN                                                       
------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on numeric_tbl
   Filter: (to_hex(value2) = '64'::text)
   Oracle query: SELECT /*3a3e9ce1642025dfd6451e15cf1fadd9*/ "VALUE1", "VALUE2", "VALUE3", "VALUE4" FROM  "NUMERIC_TBL"
(3 rows)

-- select floor (builtin function, not pushdown constraints, result)
--Testcase 829:
SELECT floor(value1), floor(value2), floor(value3), floor(value4), floor(1.5) FROM numeric_tbl WHERE to_hex(value2) = '64';
 floor | floor | floor | floor | floor 
-------+-------+-------+-------+-------
     0 |   100 |    -1 |  -100 |     1
     0 |   100 |    -1 |  -100 |     1
     0 |   100 |    -1 |  -100 |     1
(3 rows)

-- select floor (builtin function, pushdown constraints, EXPLAIN (COSTS OFF))
--Testcase 830:
EXPLAIN (COSTS OFF)
SELECT floor(value1), floor(value2), floor(value3), floor(value4), floor(1.5) FROM numeric_tbl WHERE value2 != 200;
                                                                   QUERY PLAN                                                                   
------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on numeric_tbl
   Oracle query: SELECT /*ee255a287dc590cc2e754740ed3cd0e9*/ "VALUE1", "VALUE2", "VALUE3", "VALUE4" FROM  "NUMERIC_TBL" WHERE ("VALUE2" <> 200)
(2 rows)

-- select floor (builtin function, pushdown constraints, result)
--Testcase 831:
SELECT floor(value1), floor(value2), floor(value3), floor(value4), floor(1.5) FROM numeric_tbl WHERE value2 != 200;
 floor | floor | floor | floor | floor 
-------+-------+-------+-------+-------
     0 |   100 |    -1 |  -100 |     1
     0 |   100 |    -1 |  -100 |     1
     0 |   100 |    -1 |  -100 |     1
(3 rows)

-- select floor (builtin function, floor in constraints, EXPLAIN (COSTS OFF))
--Testcase 832:
EXPLAIN (COSTS OFF)
SELECT floor(value1), floor(value2), floor(value3), floor(value4), floor(1.5) FROM numeric_tbl WHERE floor(value1) != 1;
                                                                     QUERY PLAN                                                                      
-----------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on numeric_tbl
   Oracle query: SELECT /*4a4ba40d5f0e98ab8eed810d1d82b67a*/ "VALUE1", "VALUE2", "VALUE3", "VALUE4" FROM  "NUMERIC_TBL" WHERE (floor("VALUE1") <> 1)
(2 rows)

-- select floor (builtin function, floor in constraints, result)
--Testcase 833:
SELECT floor(value1), floor(value2), floor(value3), floor(value4), floor(1.5) FROM numeric_tbl WHERE floor(value1) != 1;
 floor | floor | floor | floor | floor 
-------+-------+-------+-------+-------
     0 |   100 |    -1 |  -100 |     1
     0 |   100 |    -1 |  -100 |     1
     0 |   100 |    -1 |  -100 |     1
     2 |   200 |    -3 |  -200 |     1
     3 |   200 |    -4 |  -200 |     1
(5 rows)

-- select floor (builtin function, floor in constraints, EXPLAIN (COSTS OFF))
--Testcase 834:
EXPLAIN (COSTS OFF)
SELECT floor(value1), floor(value2), floor(value3), floor(value4), floor(1.5) FROM numeric_tbl WHERE floor(1.5) > value1;
                                                                 QUERY PLAN                                                                  
---------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on numeric_tbl
   Oracle query: SELECT /*886c3fbac6910e2aa6cbd3ac40b5674c*/ "VALUE1", "VALUE2", "VALUE3", "VALUE4" FROM  "NUMERIC_TBL" WHERE (1 > "VALUE1")
(2 rows)

-- select floor (builtin function, floor in constraints, result)
--Testcase 835:
SELECT floor(value1), floor(value2), floor(value3), floor(value4), floor(1.5) FROM numeric_tbl WHERE floor(1.5) > value1;
 floor | floor | floor | floor | floor 
-------+-------+-------+-------+-------
     0 |   100 |    -1 |  -100 |     1
     0 |   100 |    -1 |  -100 |     1
     0 |   100 |    -1 |  -100 |     1
(3 rows)

-- select floor as nest function with agg (pushdown, EXPLAIN (COSTS OFF))
--Testcase 836:
EXPLAIN (COSTS OFF)
SELECT sum(value3),floor(sum(value3)) FROM numeric_tbl;
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Foreign Scan
   Oracle query: SELECT /*fecbd3f41f80ef915e0140c3c919b65e*/ sum("VALUE3"), floor(sum("VALUE3")) FROM  "NUMERIC_TBL"
(2 rows)

-- select floor as nest function with agg (pushdown, result)
--Testcase 837:
SELECT sum(value3),floor(sum(value3)) FROM numeric_tbl;
 sum  | floor 
------+-------
 -7.2 |    -8
(1 row)

-- select floor as nest with log2 (pushdown, EXPLAIN (COSTS OFF))
--Testcase 838:
EXPLAIN (COSTS OFF)
SELECT floor(log(2, value2)) FROM numeric_tbl;
                                        QUERY PLAN                                        
------------------------------------------------------------------------------------------
 Foreign Scan on numeric_tbl
   Oracle query: SELECT /*942bf85feb96f605a79f40dffa8f6645*/ "VALUE2" FROM  "NUMERIC_TBL"
(2 rows)

-- select floor as nest with log2 (pushdown, result)
--Testcase 839:
SELECT floor(log(2, value2)) FROM numeric_tbl;
 floor 
-------
     6
     6
     6
     7
     7
     7
(6 rows)

-- select floor with non pushdown func and explicit constant (EXPLAIN (COSTS OFF))
--Testcase 840:
EXPLAIN (COSTS OFF)
SELECT floor(value3), pi(), 4.1 FROM numeric_tbl;
                                        QUERY PLAN                                        
------------------------------------------------------------------------------------------
 Foreign Scan on numeric_tbl
   Oracle query: SELECT /*b3d9f3348edc9fa53b73cdc5d271b426*/ "VALUE3" FROM  "NUMERIC_TBL"
(2 rows)

-- select floor with non pushdown func and explicit constant (result)
--Testcase 841:
SELECT floor(value3), pi(), 4.1 FROM numeric_tbl;
 floor |        pi         | ?column? 
-------+-------------------+----------
    -1 | 3.141592653589793 |      4.1
    -1 | 3.141592653589793 |      4.1
    -1 | 3.141592653589793 |      4.1
    -2 | 3.141592653589793 |      4.1
    -3 | 3.141592653589793 |      4.1
    -4 | 3.141592653589793 |      4.1
(6 rows)

-- select floor with order by (EXPLAIN (COSTS OFF))
--Testcase 842:
EXPLAIN (COSTS OFF)
SELECT value1, floor(10 - value1) FROM numeric_tbl ORDER BY floor(10 - value1);
                                                               QUERY PLAN                                                                
-----------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on numeric_tbl
   Oracle query: SELECT /*a1a632a3fa6d062674ebd720525f9b05*/ "VALUE1" FROM  "NUMERIC_TBL" ORDER BY floor((10 - "VALUE1")) ASC NULLS LAST
(2 rows)

-- select floor with order by (result)
--Testcase 843:
SELECT value1, floor(10 - value1) FROM numeric_tbl ORDER BY floor(10 - value1);
 value1 | floor 
--------+-------
    3.3 |     6
    2.2 |     7
    1.1 |     8
    0.2 |     9
    0.1 |     9
    0.3 |     9
(6 rows)

-- select floor with order by index (result)
--Testcase 844:
SELECT value1, floor(10 - value1) FROM numeric_tbl ORDER BY 2,1;
 value1 | floor 
--------+-------
    3.3 |     6
    2.2 |     7
    1.1 |     8
    0.1 |     9
    0.2 |     9
    0.3 |     9
(6 rows)

-- select floor with order by index (result)
--Testcase 845:
SELECT value1, floor(10 - value1) FROM numeric_tbl ORDER BY 1,2;
 value1 | floor 
--------+-------
    0.1 |     9
    0.2 |     9
    0.3 |     9
    1.1 |     8
    2.2 |     7
    3.3 |     6
(6 rows)

-- select floor with group by (EXPLAIN (COSTS OFF))
--Testcase 846:
EXPLAIN (COSTS OFF)
SELECT value1, floor(10 - value1) FROM numeric_tbl GROUP BY value1, floor(10 - value1);
                                                                          QUERY PLAN                                                                          
--------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan
   Oracle query: SELECT /*8f32c4d222941a1fe5a6c1a607835d73*/ "VALUE1", floor((10 - "VALUE1")) FROM  "NUMERIC_TBL" GROUP BY "VALUE1", (floor((10 - "VALUE1")))
(2 rows)

-- select floor with group by (result)
--Testcase 847:
SELECT value1, floor(10 - value1) FROM numeric_tbl GROUP BY value1, floor(10 - value1);
 value1 | floor 
--------+-------
    0.1 |     9
    0.2 |     9
    0.3 |     9
    1.1 |     8
    2.2 |     7
    3.3 |     6
(6 rows)

-- select floor with group by index (result)
--Testcase 848:
SELECT value1, floor(10 - value1) FROM numeric_tbl GROUP BY 2,1;
 value1 | floor 
--------+-------
    0.1 |     9
    0.2 |     9
    0.3 |     9
    1.1 |     8
    2.2 |     7
    3.3 |     6
(6 rows)

-- select floor with group by index (result)
--Testcase 849:
SELECT value1, floor(10 - value1) FROM numeric_tbl GROUP BY 1,2;
 value1 | floor 
--------+-------
    0.1 |     9
    0.2 |     9
    0.3 |     9
    1.1 |     8
    2.2 |     7
    3.3 |     6
(6 rows)

-- select floor with group by having (EXPLAIN (COSTS OFF))
--Testcase 850:
EXPLAIN (COSTS OFF)
SELECT value1, floor(10 - value1) FROM numeric_tbl GROUP BY value1, floor(10 - value1) HAVING floor(avg(value1)) > 0;
                                                                                           QUERY PLAN                                                                                           
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan
   Oracle query: SELECT /*3944fce69b453f4081ce07c141afc195*/ "VALUE1", floor((10 - "VALUE1")) FROM  "NUMERIC_TBL" GROUP BY "VALUE1", (floor((10 - "VALUE1"))) HAVING (floor(avg("VALUE1")) > 0)
(2 rows)

-- select floor with group by having (result)
--Testcase 851:
SELECT value1, floor(10 - value1) FROM numeric_tbl GROUP BY value1, floor(10 - value1) HAVING floor(avg(value1)) > 0;
 value1 | floor 
--------+-------
    1.1 |     8
    2.2 |     7
    3.3 |     6
(3 rows)

-- select floor with group by index having (result)
--Testcase 852:
SELECT value1, floor(10 - value1) FROM numeric_tbl GROUP BY 2,1 HAVING floor(10 - value1) > 0;
 value1 | floor 
--------+-------
    0.1 |     9
    0.2 |     9
    0.3 |     9
    1.1 |     8
    2.2 |     7
    3.3 |     6
(6 rows)

-- select floor with group by index having (result)
--Testcase 853:
SELECT value1, floor(10 - value1) FROM numeric_tbl GROUP BY 1,2 HAVING value1 > 1;
 value1 | floor 
--------+-------
    1.1 |     8
    2.2 |     7
    3.3 |     6
(3 rows)

-- select floor and as
--Testcase 854:
SELECT floor(value3) as floor1 FROM numeric_tbl;
 floor1 
--------
     -1
     -1
     -1
     -2
     -3
     -4
(6 rows)

-- ===============================================================================
-- test cosh()
-- ===============================================================================
-- select cosh (builtin function, EXPLAIN (COSTS OFF))
--Testcase 855:
EXPLAIN (COSTS OFF)
SELECT value1, cosh(value2), cosh(value3), cosh(value4), cosh(0.5) FROM numeric_tbl;
                                                       QUERY PLAN                                                       
------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on numeric_tbl
   Oracle query: SELECT /*3a3e9ce1642025dfd6451e15cf1fadd9*/ "VALUE1", "VALUE2", "VALUE3", "VALUE4" FROM  "NUMERIC_TBL"
(2 rows)

-- select cosh (builtin function, result)
--Testcase 856:
SELECT value1, cosh(value2), cosh(value3), cosh(value4), cosh(0.5) FROM numeric_tbl;
 value1 |          cosh          |        cosh        |          cosh          |        cosh        
--------+------------------------+--------------------+------------------------+--------------------
    0.1 | 1.3440585709080678e+43 | 1.0050041680558035 | 1.3440585709080678e+43 | 1.1276259652063807
    0.2 | 1.3440585709080678e+43 |  1.020066755619076 | 1.3440585709080678e+43 | 1.1276259652063807
    0.3 | 1.3440585709080678e+43 | 1.0453385141288605 | 1.3440585709080678e+43 | 1.1276259652063807
    1.1 | 3.6129868840628745e+86 | 1.6685185538222564 | 3.6129868840628745e+86 | 1.1276259652063807
    2.2 | 3.6129868840628745e+86 |  4.567908328898228 | 3.6129868840628745e+86 | 1.1276259652063807
    3.3 | 3.6129868840628745e+86 | 13.574761044029561 | 3.6129868840628745e+86 | 1.1276259652063807
(6 rows)

-- select cosh (builtin function, not pushdown constraints, EXPLAIN (COSTS OFF))
--Testcase 857:
EXPLAIN (COSTS OFF)
SELECT cosh(value1), cosh(value2), cosh(value3), cosh(value4), cosh(0.5) FROM numeric_tbl WHERE to_hex(value2) = '64';
                                                       QUERY PLAN                                                       
------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on numeric_tbl
   Filter: (to_hex(value2) = '64'::text)
   Oracle query: SELECT /*3a3e9ce1642025dfd6451e15cf1fadd9*/ "VALUE1", "VALUE2", "VALUE3", "VALUE4" FROM  "NUMERIC_TBL"
(3 rows)

-- select cosh (builtin function, not pushdown constraints, result)
--Testcase 858:
SELECT cosh(value1), cosh(value2), cosh(value3), cosh(value4), cosh(0.5) FROM numeric_tbl WHERE to_hex(value2) = '64';
        cosh        |          cosh          |        cosh        |          cosh          |        cosh        
--------------------+------------------------+--------------------+------------------------+--------------------
 1.0050041680558035 | 1.3440585709080678e+43 | 1.0050041680558035 | 1.3440585709080678e+43 | 1.1276259652063807
  1.020066755619076 | 1.3440585709080678e+43 |  1.020066755619076 | 1.3440585709080678e+43 | 1.1276259652063807
 1.0453385141288605 | 1.3440585709080678e+43 | 1.0453385141288605 | 1.3440585709080678e+43 | 1.1276259652063807
(3 rows)

-- select cosh (builtin function, pushdown constraints, EXPLAIN (COSTS OFF))
--Testcase 859:
EXPLAIN (COSTS OFF)
SELECT cosh(value1), cosh(value2), cosh(value3), cosh(value4), cosh(0.5) FROM numeric_tbl WHERE value2 != 200;
                                                                   QUERY PLAN                                                                   
------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on numeric_tbl
   Oracle query: SELECT /*ee255a287dc590cc2e754740ed3cd0e9*/ "VALUE1", "VALUE2", "VALUE3", "VALUE4" FROM  "NUMERIC_TBL" WHERE ("VALUE2" <> 200)
(2 rows)

-- select cosh (builtin function, pushdown constraints, result)
--Testcase 860:
SELECT cosh(value1), cosh(value2), cosh(value3), cosh(value4), cosh(0.5) FROM numeric_tbl WHERE value2 != 200;
        cosh        |          cosh          |        cosh        |          cosh          |        cosh        
--------------------+------------------------+--------------------+------------------------+--------------------
 1.0050041680558035 | 1.3440585709080678e+43 | 1.0050041680558035 | 1.3440585709080678e+43 | 1.1276259652063807
  1.020066755619076 | 1.3440585709080678e+43 |  1.020066755619076 | 1.3440585709080678e+43 | 1.1276259652063807
 1.0453385141288605 | 1.3440585709080678e+43 | 1.0453385141288605 | 1.3440585709080678e+43 | 1.1276259652063807
(3 rows)

-- select cosh (builtin function, cosh in constraints, EXPLAIN (COSTS OFF))
--Testcase 861:
EXPLAIN (COSTS OFF)
SELECT value1, cosh(value2), cosh(value3), cosh(value4), cosh(0.5) FROM numeric_tbl WHERE cosh(value1) != 1;
                                                                     QUERY PLAN                                                                     
----------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on numeric_tbl
   Oracle query: SELECT /*22623e8816342c98cc6ba6a7d8d23b89*/ "VALUE1", "VALUE2", "VALUE3", "VALUE4" FROM  "NUMERIC_TBL" WHERE (cosh("VALUE1") <> 1)
(2 rows)

-- select cosh (builtin function, cosh in constraints, result)
--Testcase 862:
SELECT value1, cosh(value2), cosh(value3), cosh(value4), cosh(0.5) FROM numeric_tbl WHERE cosh(value1) != 1;
 value1 |          cosh          |        cosh        |          cosh          |        cosh        
--------+------------------------+--------------------+------------------------+--------------------
    0.1 | 1.3440585709080678e+43 | 1.0050041680558035 | 1.3440585709080678e+43 | 1.1276259652063807
    0.2 | 1.3440585709080678e+43 |  1.020066755619076 | 1.3440585709080678e+43 | 1.1276259652063807
    0.3 | 1.3440585709080678e+43 | 1.0453385141288605 | 1.3440585709080678e+43 | 1.1276259652063807
    1.1 | 3.6129868840628745e+86 | 1.6685185538222564 | 3.6129868840628745e+86 | 1.1276259652063807
    2.2 | 3.6129868840628745e+86 |  4.567908328898228 | 3.6129868840628745e+86 | 1.1276259652063807
    3.3 | 3.6129868840628745e+86 | 13.574761044029561 | 3.6129868840628745e+86 | 1.1276259652063807
(6 rows)

-- select cosh (builtin function, cosh in constraints, EXPLAIN (COSTS OFF))
--Testcase 863:
EXPLAIN (COSTS OFF)
SELECT cosh(value1), cosh(value2), cosh(value3), cosh(value4), cosh(0.5) FROM numeric_tbl WHERE cosh(0.5) > value1;
                                                                          QUERY PLAN                                                                          
--------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on numeric_tbl
   Oracle query: SELECT /*0f648b52d5b97fe8c9d6793791e15369*/ "VALUE1", "VALUE2", "VALUE3", "VALUE4" FROM  "NUMERIC_TBL" WHERE (1.1276259652063807 > "VALUE1")
(2 rows)

-- select cosh (builtin function, cosh in constraints, result)
--Testcase 864:
SELECT cosh(value1), cosh(value2), cosh(value3), cosh(value4), cosh(0.5) FROM numeric_tbl WHERE cosh(0.5) > value1;
        cosh        |          cosh          |        cosh        |          cosh          |        cosh        
--------------------+------------------------+--------------------+------------------------+--------------------
 1.0050041680558035 | 1.3440585709080678e+43 | 1.0050041680558035 | 1.3440585709080678e+43 | 1.1276259652063807
  1.020066755619076 | 1.3440585709080678e+43 |  1.020066755619076 | 1.3440585709080678e+43 | 1.1276259652063807
 1.0453385141288605 | 1.3440585709080678e+43 | 1.0453385141288605 | 1.3440585709080678e+43 | 1.1276259652063807
 1.6685185538222564 | 3.6129868840628745e+86 | 1.6685185538222564 | 3.6129868840628745e+86 | 1.1276259652063807
(4 rows)

-- select cosh as nest function with agg (pushdown, EXPLAIN (COSTS OFF))
--Testcase 865:
EXPLAIN (COSTS OFF)
SELECT sum(value3),cosh(sum(value3)) FROM numeric_tbl;
                                                     QUERY PLAN                                                     
--------------------------------------------------------------------------------------------------------------------
 Foreign Scan
   Oracle query: SELECT /*1e89075ccc3012f5c18c6cd9b3a63050*/ sum("VALUE3"), cosh(sum("VALUE3")) FROM  "NUMERIC_TBL"
(2 rows)

-- select cosh as nest function with agg (pushdown, result)
--Testcase 866:
SELECT sum(value3),cosh(sum(value3)) FROM numeric_tbl;
 sum  |       cosh        
------+-------------------
 -7.2 | 669.7157554901131
(1 row)

-- select cosh as nest with log2 (pushdown, EXPLAIN (COSTS OFF))
--Testcase 867:
EXPLAIN (COSTS OFF)
SELECT value1, cosh(log(2, value2)) FROM numeric_tbl;
                                             QUERY PLAN                                             
----------------------------------------------------------------------------------------------------
 Foreign Scan on numeric_tbl
   Oracle query: SELECT /*c35678a687054ae56f3a83ca5558704c*/ "VALUE1", "VALUE2" FROM  "NUMERIC_TBL"
(2 rows)

-- select cosh as nest with log2 (pushdown, result)
--Testcase 868:
SELECT value1, cosh(log(2, value2)) FROM numeric_tbl;
 value1 |        cosh        
--------+--------------------
    0.1 |  384.0261711911737
    0.2 |  384.0261711911737
    0.3 |  384.0261711911737
    1.1 | 1043.8898326934716
    2.2 | 1043.8898326934716
    3.3 | 1043.8898326934716
(6 rows)

-- select cosh with non pushdown func and explicit constant (EXPLAIN (COSTS OFF))
--Testcase 869:
EXPLAIN (COSTS OFF)
SELECT value1, cosh(value3), pi(), 4.1 FROM numeric_tbl;
                                             QUERY PLAN                                             
----------------------------------------------------------------------------------------------------
 Foreign Scan on numeric_tbl
   Oracle query: SELECT /*5373ce45d4cdd3cd948843baa7cda0cc*/ "VALUE1", "VALUE3" FROM  "NUMERIC_TBL"
(2 rows)

-- select cosh with non pushdown func and explicit constant (result)
--Testcase 870:
SELECT value1, cosh(value3), pi(), 4.1 FROM numeric_tbl;
 value1 |        cosh        |        pi         | ?column? 
--------+--------------------+-------------------+----------
    0.1 | 1.0050041680558035 | 3.141592653589793 |      4.1
    0.2 |  1.020066755619076 | 3.141592653589793 |      4.1
    0.3 | 1.0453385141288605 | 3.141592653589793 |      4.1
    1.1 | 1.6685185538222564 | 3.141592653589793 |      4.1
    2.2 |  4.567908328898228 | 3.141592653589793 |      4.1
    3.3 | 13.574761044029561 | 3.141592653589793 |      4.1
(6 rows)

-- select cosh with order by (EXPLAIN (COSTS OFF))
--Testcase 871:
EXPLAIN (COSTS OFF)
SELECT value1, cosh(1-value3) FROM numeric_tbl ORDER BY cosh(1-value3);
                                                                   QUERY PLAN                                                                    
-------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on numeric_tbl
   Oracle query: SELECT /*8fe738eab4e584859e7ca2f45699e62d*/ "VALUE1", "VALUE3" FROM  "NUMERIC_TBL" ORDER BY cosh((1 - "VALUE3")) ASC NULLS LAST
(2 rows)

-- select cosh with order by (result)
--Testcase 872:
SELECT value1, cosh(1-value3) FROM numeric_tbl ORDER BY cosh(1-value3);
 value1 |        cosh        
--------+--------------------
    0.1 | 1.6685185538222564
    0.2 | 1.8106555673243747
    0.3 | 1.9709142303266285
    1.1 |  4.144313170410316
    2.2 |  12.28664620054386
    3.3 |  36.85668112930399
(6 rows)

-- select cosh with order by index (result)
--Testcase 873:
SELECT value1, cosh(1-value3) FROM numeric_tbl ORDER BY 2,1;
 value1 |        cosh        
--------+--------------------
    0.1 | 1.6685185538222564
    0.2 | 1.8106555673243747
    0.3 | 1.9709142303266285
    1.1 |  4.144313170410316
    2.2 |  12.28664620054386
    3.3 |  36.85668112930399
(6 rows)

-- select cosh with order by index (result)
--Testcase 874:
SELECT value1, cosh(1-value3) FROM numeric_tbl ORDER BY 1,2;
 value1 |        cosh        
--------+--------------------
    0.1 | 1.6685185538222564
    0.2 | 1.8106555673243747
    0.3 | 1.9709142303266285
    1.1 |  4.144313170410316
    2.2 |  12.28664620054386
    3.3 |  36.85668112930399
(6 rows)

-- select cosh with group by (EXPLAIN (COSTS OFF))
--Testcase 875:
EXPLAIN (COSTS OFF)
SELECT value1, cosh(1-value3) FROM numeric_tbl GROUP BY value1, cosh(1-value3);
                                                                        QUERY PLAN                                                                        
----------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan
   Oracle query: SELECT /*35652cd746943577258094767ff3dd64*/ "VALUE1", cosh((1 - "VALUE3")) FROM  "NUMERIC_TBL" GROUP BY "VALUE1", (cosh((1 - "VALUE3")))
(2 rows)

-- select cosh with group by (result)
--Testcase 876:
SELECT value1, cosh(1-value3) FROM numeric_tbl GROUP BY value1, cosh(1-value3);
 value1 |        cosh        
--------+--------------------
    0.1 | 1.6685185538222562
    0.2 | 1.8106555673243747
    0.3 | 1.9709142303266285
    1.1 | 4.1443131704103155
    2.2 | 12.286646200543858
    3.3 |    36.856681129304
(6 rows)

-- select cosh with group by index (result)
--Testcase 877:
SELECT value1, cosh(1-value3) FROM numeric_tbl GROUP BY 2,1;
 value1 |        cosh        
--------+--------------------
    0.1 | 1.6685185538222562
    0.2 | 1.8106555673243747
    0.3 | 1.9709142303266285
    1.1 | 4.1443131704103155
    2.2 | 12.286646200543858
    3.3 |    36.856681129304
(6 rows)

-- select cosh with group by index (result)
--Testcase 878:
SELECT value1, cosh(1-value3) FROM numeric_tbl GROUP BY 1,2;
 value1 |        cosh        
--------+--------------------
    0.1 | 1.6685185538222562
    0.2 | 1.8106555673243747
    0.3 | 1.9709142303266285
    1.1 | 4.1443131704103155
    2.2 | 12.286646200543858
    3.3 |    36.856681129304
(6 rows)

-- select cosh with group by having (EXPLAIN (COSTS OFF))
--Testcase 879:
EXPLAIN (COSTS OFF)
SELECT value1, cosh(1-value3) FROM numeric_tbl GROUP BY value1, cosh(1-value3) HAVING cosh(avg(value1)) > 0;
                                                                                        QUERY PLAN                                                                                         
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan
   Oracle query: SELECT /*2c0b5176cfcdba75f9f9280d23ce5e00*/ "VALUE1", cosh((1 - "VALUE3")) FROM  "NUMERIC_TBL" GROUP BY "VALUE1", (cosh((1 - "VALUE3"))) HAVING (cosh(avg("VALUE1")) > 0)
(2 rows)

-- select cosh with group by having (result)
--Testcase 880:
SELECT value1, cosh(1-value3) FROM numeric_tbl GROUP BY value1, cosh(1-value3) HAVING cosh(avg(value1)) > 0;
 value1 |        cosh        
--------+--------------------
    0.1 | 1.6685185538222562
    0.2 | 1.8106555673243747
    0.3 | 1.9709142303266285
    1.1 | 4.1443131704103155
    2.2 | 12.286646200543858
    3.3 |    36.856681129304
(6 rows)

-- select cosh with group by index having (result)
--Testcase 881:
SELECT value1, cosh(1-value3) FROM numeric_tbl GROUP BY 2,1 HAVING cosh(1-value3) > 0;
 value1 |        cosh        
--------+--------------------
    0.1 | 1.6685185538222562
    0.2 | 1.8106555673243747
    0.3 | 1.9709142303266285
    1.1 | 4.1443131704103155
    2.2 | 12.286646200543858
    3.3 |    36.856681129304
(6 rows)

-- select cosh with group by index having (result)
--Testcase 882:
SELECT value1, cosh(1-value3) FROM numeric_tbl GROUP BY 1,2 HAVING value1 > 1;
 value1 |        cosh        
--------+--------------------
    1.1 | 4.1443131704103155
    2.2 | 12.286646200543858
    3.3 |    36.856681129304
(3 rows)

-- select cosh and as
--Testcase 883:
SELECT value1, cosh(value3) as sin1 FROM numeric_tbl;
 value1 |        sin1        
--------+--------------------
    0.1 | 1.0050041680558035
    0.2 |  1.020066755619076
    0.3 | 1.0453385141288605
    1.1 | 1.6685185538222564
    2.2 |  4.567908328898228
    3.3 | 13.574761044029561
(6 rows)

-- ===============================================================================
-- test sinh()
-- ===============================================================================
-- select sinh (builtin function, EXPLAIN (COSTS OFF))
--Testcase 884:
EXPLAIN (COSTS OFF)
SELECT value1, sinh(value2), sinh(value3), sinh(value4), sinh(0.5) FROM numeric_tbl;
                                                       QUERY PLAN                                                       
------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on numeric_tbl
   Oracle query: SELECT /*3a3e9ce1642025dfd6451e15cf1fadd9*/ "VALUE1", "VALUE2", "VALUE3", "VALUE4" FROM  "NUMERIC_TBL"
(2 rows)

-- select sinh (builtin function, result)
--Testcase 885:
SELECT value1, sinh(value2), sinh(value3), sinh(value4), sinh(0.5) FROM numeric_tbl;
 value1 |          sinh          |         sinh         |          sinh           |        sinh        
--------+------------------------+----------------------+-------------------------+--------------------
    0.1 | 1.3440585709080678e+43 | -0.10016675001984403 | -1.3440585709080678e+43 | 0.5210953054937474
    0.2 | 1.3440585709080678e+43 | -0.20133600254109402 | -1.3440585709080678e+43 | 0.5210953054937474
    0.3 | 1.3440585709080678e+43 |  -0.3045202934471426 | -1.3440585709080678e+43 | 0.5210953054937474
    1.1 | 3.6129868840628745e+86 |   -1.335647470124177 | -3.6129868840628745e+86 | 0.5210953054937474
    2.2 | 3.6129868840628745e+86 |   -4.457105170535894 | -3.6129868840628745e+86 | 0.5210953054937474
    3.3 | 3.6129868840628745e+86 |  -13.537877876628322 | -3.6129868840628745e+86 | 0.5210953054937474
(6 rows)

-- select sinh (builtin function, not pushdown constraints, EXPLAIN (COSTS OFF))
--Testcase 886:
EXPLAIN (COSTS OFF)
SELECT sinh(value1), sinh(value2), sinh(value3), sinh(value4), sinh(0.5) FROM numeric_tbl WHERE to_hex(value2) = '64';
                                                       QUERY PLAN                                                       
------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on numeric_tbl
   Filter: (to_hex(value2) = '64'::text)
   Oracle query: SELECT /*3a3e9ce1642025dfd6451e15cf1fadd9*/ "VALUE1", "VALUE2", "VALUE3", "VALUE4" FROM  "NUMERIC_TBL"
(3 rows)

-- select sinh (builtin function, not pushdown constraints, result)
--Testcase 887:
SELECT sinh(value1), sinh(value2), sinh(value3), sinh(value4), sinh(0.5) FROM numeric_tbl WHERE to_hex(value2) = '64';
        sinh         |          sinh          |         sinh         |          sinh           |        sinh        
---------------------+------------------------+----------------------+-------------------------+--------------------
 0.10016675001984403 | 1.3440585709080678e+43 | -0.10016675001984403 | -1.3440585709080678e+43 | 0.5210953054937474
 0.20133600254109402 | 1.3440585709080678e+43 | -0.20133600254109402 | -1.3440585709080678e+43 | 0.5210953054937474
  0.3045202934471426 | 1.3440585709080678e+43 |  -0.3045202934471426 | -1.3440585709080678e+43 | 0.5210953054937474
(3 rows)

-- select sinh (builtin function, pushdown constraints, EXPLAIN (COSTS OFF))
--Testcase 888:
EXPLAIN (COSTS OFF)
SELECT sinh(value1), sinh(value2), sinh(value3), sinh(value4), sinh(0.5) FROM numeric_tbl WHERE value2 != 200;
                                                                   QUERY PLAN                                                                   
------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on numeric_tbl
   Oracle query: SELECT /*ee255a287dc590cc2e754740ed3cd0e9*/ "VALUE1", "VALUE2", "VALUE3", "VALUE4" FROM  "NUMERIC_TBL" WHERE ("VALUE2" <> 200)
(2 rows)

-- select sinh (builtin function, pushdown constraints, result)
--Testcase 889:
SELECT sinh(value1), sinh(value2), sinh(value3), sinh(value4), sinh(0.5) FROM numeric_tbl WHERE value2 != 200;
        sinh         |          sinh          |         sinh         |          sinh           |        sinh        
---------------------+------------------------+----------------------+-------------------------+--------------------
 0.10016675001984403 | 1.3440585709080678e+43 | -0.10016675001984403 | -1.3440585709080678e+43 | 0.5210953054937474
 0.20133600254109402 | 1.3440585709080678e+43 | -0.20133600254109402 | -1.3440585709080678e+43 | 0.5210953054937474
  0.3045202934471426 | 1.3440585709080678e+43 |  -0.3045202934471426 | -1.3440585709080678e+43 | 0.5210953054937474
(3 rows)

-- select sinh (builtin function, sinh in constraints, EXPLAIN (COSTS OFF))
--Testcase 890:
EXPLAIN (COSTS OFF)
SELECT value1, sinh(value2), sinh(value3), sinh(value4), sinh(0.5) FROM numeric_tbl WHERE sinh(value1) != 1;
                                                                     QUERY PLAN                                                                     
----------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on numeric_tbl
   Oracle query: SELECT /*568580f67f4959267358e561fef1d32c*/ "VALUE1", "VALUE2", "VALUE3", "VALUE4" FROM  "NUMERIC_TBL" WHERE (sinh("VALUE1") <> 1)
(2 rows)

-- select sinh (builtin function, sinh in constraints, result)
--Testcase 891:
SELECT value1, sinh(value2), sinh(value3), sinh(value4), sinh(0.5) FROM numeric_tbl WHERE sinh(value1) != 1;
 value1 |          sinh          |         sinh         |          sinh           |        sinh        
--------+------------------------+----------------------+-------------------------+--------------------
    0.1 | 1.3440585709080678e+43 | -0.10016675001984403 | -1.3440585709080678e+43 | 0.5210953054937474
    0.2 | 1.3440585709080678e+43 | -0.20133600254109402 | -1.3440585709080678e+43 | 0.5210953054937474
    0.3 | 1.3440585709080678e+43 |  -0.3045202934471426 | -1.3440585709080678e+43 | 0.5210953054937474
    1.1 | 3.6129868840628745e+86 |   -1.335647470124177 | -3.6129868840628745e+86 | 0.5210953054937474
    2.2 | 3.6129868840628745e+86 |   -4.457105170535894 | -3.6129868840628745e+86 | 0.5210953054937474
    3.3 | 3.6129868840628745e+86 |  -13.537877876628322 | -3.6129868840628745e+86 | 0.5210953054937474
(6 rows)

-- select sinh (builtin function, sinh in constraints, EXPLAIN (COSTS OFF))
--Testcase 892:
EXPLAIN (COSTS OFF)
SELECT sinh(value1), sinh(value2), sinh(value3), sinh(value4), sinh(0.5) FROM numeric_tbl WHERE sinh(0.5) > value1;
                                                                          QUERY PLAN                                                                          
--------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on numeric_tbl
   Oracle query: SELECT /*2306e4ed3c1a7929b73bf1cc074239a4*/ "VALUE1", "VALUE2", "VALUE3", "VALUE4" FROM  "NUMERIC_TBL" WHERE (0.5210953054937474 > "VALUE1")
(2 rows)

-- select sinh (builtin function, sinh in constraints, result)
--Testcase 893:
SELECT sinh(value1), sinh(value2), sinh(value3), sinh(value4), sinh(0.5) FROM numeric_tbl WHERE sinh(0.5) > value1;
        sinh         |          sinh          |         sinh         |          sinh           |        sinh        
---------------------+------------------------+----------------------+-------------------------+--------------------
 0.10016675001984403 | 1.3440585709080678e+43 | -0.10016675001984403 | -1.3440585709080678e+43 | 0.5210953054937474
 0.20133600254109402 | 1.3440585709080678e+43 | -0.20133600254109402 | -1.3440585709080678e+43 | 0.5210953054937474
  0.3045202934471426 | 1.3440585709080678e+43 |  -0.3045202934471426 | -1.3440585709080678e+43 | 0.5210953054937474
(3 rows)

-- select sinh as nest function with agg (pushdown, EXPLAIN (COSTS OFF))
--Testcase 894:
EXPLAIN (COSTS OFF)
SELECT sum(value3),sinh(sum(value3)) FROM numeric_tbl;
                                                     QUERY PLAN                                                     
--------------------------------------------------------------------------------------------------------------------
 Foreign Scan
   Oracle query: SELECT /*86dc0d6ac5ac308e02c1630a69a6ba64*/ sum("VALUE3"), sinh(sum("VALUE3")) FROM  "NUMERIC_TBL"
(2 rows)

-- select sinh as nest function with agg (pushdown, result)
--Testcase 895:
SELECT sum(value3),sinh(sum(value3)) FROM numeric_tbl;
 sum  |        sinh        
------+--------------------
 -7.2 | -669.7150089043047
(1 row)

-- select sinh as nest with log2 (pushdown, EXPLAIN (COSTS OFF))
--Testcase 896:
EXPLAIN (COSTS OFF)
SELECT value1, sinh(log(2, value2)) FROM numeric_tbl;
                                             QUERY PLAN                                             
----------------------------------------------------------------------------------------------------
 Foreign Scan on numeric_tbl
   Oracle query: SELECT /*c35678a687054ae56f3a83ca5558704c*/ "VALUE1", "VALUE2" FROM  "NUMERIC_TBL"
(2 rows)

-- select sinh as nest with log2 (pushdown, result)
--Testcase 897:
SELECT value1, sinh(log(2, value2)) FROM numeric_tbl;
 value1 |        sinh        
--------+--------------------
    0.1 | 384.02486919436956
    0.2 | 384.02486919436956
    0.3 | 384.02486919436956
    1.1 | 1043.8893537156148
    2.2 | 1043.8893537156148
    3.3 | 1043.8893537156148
(6 rows)

-- select sinh with non pushdown func and explicit constant (EXPLAIN (COSTS OFF))
--Testcase 898:
EXPLAIN (COSTS OFF)
SELECT value1, sinh(value3), pi(), 4.1 FROM numeric_tbl;
                                             QUERY PLAN                                             
----------------------------------------------------------------------------------------------------
 Foreign Scan on numeric_tbl
   Oracle query: SELECT /*5373ce45d4cdd3cd948843baa7cda0cc*/ "VALUE1", "VALUE3" FROM  "NUMERIC_TBL"
(2 rows)

-- select sinh with non pushdown func and explicit constant (result)
--Testcase 899:
SELECT value1, sinh(value3), pi(), 4.1 FROM numeric_tbl;
 value1 |         sinh         |        pi         | ?column? 
--------+----------------------+-------------------+----------
    0.1 | -0.10016675001984403 | 3.141592653589793 |      4.1
    0.2 | -0.20133600254109402 | 3.141592653589793 |      4.1
    0.3 |  -0.3045202934471426 | 3.141592653589793 |      4.1
    1.1 |   -1.335647470124177 | 3.141592653589793 |      4.1
    2.2 |   -4.457105170535894 | 3.141592653589793 |      4.1
    3.3 |  -13.537877876628322 | 3.141592653589793 |      4.1
(6 rows)

-- select sinh with order by (EXPLAIN (COSTS OFF))
--Testcase 900:
EXPLAIN (COSTS OFF)
SELECT value1, sinh(1-value3) FROM numeric_tbl ORDER BY sinh(1-value3);
                                                                   QUERY PLAN                                                                    
-------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on numeric_tbl
   Oracle query: SELECT /*aea1471ca0e28e8ca868d760b70bce46*/ "VALUE1", "VALUE3" FROM  "NUMERIC_TBL" ORDER BY sinh((1 - "VALUE3")) ASC NULLS LAST
(2 rows)

-- select sinh with order by (result)
--Testcase 901:
SELECT value1, sinh(1-value3) FROM numeric_tbl ORDER BY sinh(1-value3);
 value1 |        sinh        
--------+--------------------
    0.1 |  1.335647470124177
    0.2 | 1.5094613554121725
    0.3 |  1.698382437292616
    1.1 |  4.021856742157334
    2.2 | 12.245883996565492
    3.3 | 36.843112570291794
(6 rows)

-- select sinh with order by index (result)
--Testcase 902:
SELECT value1, sinh(1-value3) FROM numeric_tbl ORDER BY 2,1;
 value1 |        sinh        
--------+--------------------
    0.1 |  1.335647470124177
    0.2 | 1.5094613554121725
    0.3 |  1.698382437292616
    1.1 |  4.021856742157334
    2.2 | 12.245883996565492
    3.3 | 36.843112570291794
(6 rows)

-- select sinh with order by index (result)
--Testcase 903:
SELECT value1, sinh(1-value3) FROM numeric_tbl ORDER BY 1,2;
 value1 |        sinh        
--------+--------------------
    0.1 |  1.335647470124177
    0.2 | 1.5094613554121725
    0.3 |  1.698382437292616
    1.1 |  4.021856742157334
    2.2 | 12.245883996565492
    3.3 | 36.843112570291794
(6 rows)

-- select sinh with group by (EXPLAIN (COSTS OFF))
--Testcase 904:
EXPLAIN (COSTS OFF)
SELECT value1, sinh(1-value3) FROM numeric_tbl GROUP BY value1, sinh(1-value3);
                                                                        QUERY PLAN                                                                        
----------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan
   Oracle query: SELECT /*9ee837bf5b355310536a446f9166af8f*/ "VALUE1", sinh((1 - "VALUE3")) FROM  "NUMERIC_TBL" GROUP BY "VALUE1", (sinh((1 - "VALUE3")))
(2 rows)

-- select sinh with group by (result)
--Testcase 905:
SELECT value1, sinh(1-value3) FROM numeric_tbl GROUP BY value1, sinh(1-value3);
 value1 |        sinh        
--------+--------------------
    0.1 | 1.3356474701241767
    0.2 | 1.5094613554121727
    0.3 | 1.6983824372926157
    1.1 |  4.021856742157334
    2.2 |  12.24588399656549
    3.3 |   36.8431125702918
(6 rows)

-- select sinh with group by index (result)
--Testcase 906:
SELECT value1, sinh(1-value3) FROM numeric_tbl GROUP BY 2,1;
 value1 |        sinh        
--------+--------------------
    0.1 | 1.3356474701241767
    0.2 | 1.5094613554121727
    0.3 | 1.6983824372926157
    1.1 |  4.021856742157334
    2.2 |  12.24588399656549
    3.3 |   36.8431125702918
(6 rows)

-- select sinh with group by index (result)
--Testcase 907:
SELECT value1, sinh(1-value3) FROM numeric_tbl GROUP BY 1,2;
 value1 |        sinh        
--------+--------------------
    0.1 | 1.3356474701241767
    0.2 | 1.5094613554121727
    0.3 | 1.6983824372926157
    1.1 |  4.021856742157334
    2.2 |  12.24588399656549
    3.3 |   36.8431125702918
(6 rows)

-- select sinh with group by having (EXPLAIN (COSTS OFF))
--Testcase 908:
EXPLAIN (COSTS OFF)
SELECT value1, sinh(1-value3) FROM numeric_tbl GROUP BY value1, sinh(1-value3) HAVING sinh(avg(value1)) > 0;
                                                                                        QUERY PLAN                                                                                         
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan
   Oracle query: SELECT /*787ad5aaeec393f74985b980130eea81*/ "VALUE1", sinh((1 - "VALUE3")) FROM  "NUMERIC_TBL" GROUP BY "VALUE1", (sinh((1 - "VALUE3"))) HAVING (sinh(avg("VALUE1")) > 0)
(2 rows)

-- select sinh with group by having (result)
--Testcase 909:
SELECT value1, sinh(1-value3) FROM numeric_tbl GROUP BY value1, sinh(1-value3) HAVING sinh(avg(value1)) > 0;
 value1 |        sinh        
--------+--------------------
    0.1 | 1.3356474701241767
    0.2 | 1.5094613554121727
    0.3 | 1.6983824372926157
    1.1 |  4.021856742157334
    2.2 |  12.24588399656549
    3.3 |   36.8431125702918
(6 rows)

-- select sinh with group by index having (result)
--Testcase 910:
SELECT value1, sinh(1-value3) FROM numeric_tbl GROUP BY 2,1 HAVING sinh(1-value3) > 0;
 value1 |        sinh        
--------+--------------------
    0.1 | 1.3356474701241767
    0.2 | 1.5094613554121727
    0.3 | 1.6983824372926157
    1.1 |  4.021856742157334
    2.2 |  12.24588399656549
    3.3 |   36.8431125702918
(6 rows)

-- select sinh with group by index having (result)
--Testcase 911:
SELECT value1, sinh(1-value3) FROM numeric_tbl GROUP BY 1,2 HAVING value1 > 1;
 value1 |       sinh        
--------+-------------------
    1.1 | 4.021856742157334
    2.2 | 12.24588399656549
    3.3 |  36.8431125702918
(3 rows)

-- select sinh and as
--Testcase 912:
SELECT value1, sinh(value3) as sin1 FROM numeric_tbl;
 value1 |         sin1         
--------+----------------------
    0.1 | -0.10016675001984403
    0.2 | -0.20133600254109402
    0.3 |  -0.3045202934471426
    1.1 |   -1.335647470124177
    2.2 |   -4.457105170535894
    3.3 |  -13.537877876628322
(6 rows)

-- ===============================================================================
-- test tanh()
-- ===============================================================================
-- select tanh (builtin function, EXPLAIN (COSTS OFF))
--Testcase 913:
EXPLAIN (COSTS OFF)
SELECT value1, tanh(value2), tanh(value3), tanh(value4), tanh(0.5) FROM numeric_tbl;
                                                       QUERY PLAN                                                       
------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on numeric_tbl
   Oracle query: SELECT /*3a3e9ce1642025dfd6451e15cf1fadd9*/ "VALUE1", "VALUE2", "VALUE3", "VALUE4" FROM  "NUMERIC_TBL"
(2 rows)

-- select tanh (builtin function, result)
--Testcase 914:
SELECT value1, tanh(value2), tanh(value3), tanh(value4), tanh(0.5) FROM numeric_tbl;
 value1 | tanh |         tanh         | tanh |        tanh         
--------+------+----------------------+------+---------------------
    0.1 |    1 | -0.09966799462495582 |   -1 | 0.46211715726000974
    0.2 |    1 |   -0.197375320224904 |   -1 | 0.46211715726000974
    0.3 |    1 |  -0.2913126124515909 |   -1 | 0.46211715726000974
    1.1 |    1 |  -0.8004990217606297 |   -1 | 0.46211715726000974
    2.2 |    1 |  -0.9757431300314515 |   -1 | 0.46211715726000974
    3.3 |    1 |  -0.9972829600991421 |   -1 | 0.46211715726000974
(6 rows)

-- select tanh (builtin function, not pushdown constraints, EXPLAIN (COSTS OFF))
--Testcase 915:
EXPLAIN (COSTS OFF)
SELECT tanh(value1), tanh(value2), tanh(value3), tanh(value4), tanh(0.5) FROM numeric_tbl WHERE to_hex(value2) = '64';
                                                       QUERY PLAN                                                       
------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on numeric_tbl
   Filter: (to_hex(value2) = '64'::text)
   Oracle query: SELECT /*3a3e9ce1642025dfd6451e15cf1fadd9*/ "VALUE1", "VALUE2", "VALUE3", "VALUE4" FROM  "NUMERIC_TBL"
(3 rows)

-- select tanh (builtin function, not pushdown constraints, result)
--Testcase 916:
SELECT tanh(value1), tanh(value2), tanh(value3), tanh(value4), tanh(0.5) FROM numeric_tbl WHERE to_hex(value2) = '64';
        tanh         | tanh |         tanh         | tanh |        tanh         
---------------------+------+----------------------+------+---------------------
 0.09966799462495582 |    1 | -0.09966799462495582 |   -1 | 0.46211715726000974
   0.197375320224904 |    1 |   -0.197375320224904 |   -1 | 0.46211715726000974
  0.2913126124515909 |    1 |  -0.2913126124515909 |   -1 | 0.46211715726000974
(3 rows)

-- select tanh (builtin function, pushdown constraints, EXPLAIN (COSTS OFF))
--Testcase 917:
EXPLAIN (COSTS OFF)
SELECT tanh(value1), tanh(value2), tanh(value3), tanh(value4), tanh(0.5) FROM numeric_tbl WHERE value2 != 200;
                                                                   QUERY PLAN                                                                   
------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on numeric_tbl
   Oracle query: SELECT /*ee255a287dc590cc2e754740ed3cd0e9*/ "VALUE1", "VALUE2", "VALUE3", "VALUE4" FROM  "NUMERIC_TBL" WHERE ("VALUE2" <> 200)
(2 rows)

-- select tanh (builtin function, pushdown constraints, result)
--Testcase 918:
SELECT tanh(value1), tanh(value2), tanh(value3), tanh(value4), tanh(0.5) FROM numeric_tbl WHERE value2 != 200;
        tanh         | tanh |         tanh         | tanh |        tanh         
---------------------+------+----------------------+------+---------------------
 0.09966799462495582 |    1 | -0.09966799462495582 |   -1 | 0.46211715726000974
   0.197375320224904 |    1 |   -0.197375320224904 |   -1 | 0.46211715726000974
  0.2913126124515909 |    1 |  -0.2913126124515909 |   -1 | 0.46211715726000974
(3 rows)

-- select tanh (builtin function, tanh in constraints, EXPLAIN (COSTS OFF))
--Testcase 919:
EXPLAIN (COSTS OFF)
SELECT value1, tanh(value2), tanh(value3), tanh(value4), tanh(0.5) FROM numeric_tbl WHERE tanh(value1) != 1;
                                                                     QUERY PLAN                                                                     
----------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on numeric_tbl
   Oracle query: SELECT /*3c687e1fe5ff7c666051527068fcbb93*/ "VALUE1", "VALUE2", "VALUE3", "VALUE4" FROM  "NUMERIC_TBL" WHERE (tanh("VALUE1") <> 1)
(2 rows)

-- select tanh (builtin function, tanh in constraints, result)
--Testcase 920:
SELECT value1, tanh(value2), tanh(value3), tanh(value4), tanh(0.5) FROM numeric_tbl WHERE tanh(value1) != 1;
 value1 | tanh |         tanh         | tanh |        tanh         
--------+------+----------------------+------+---------------------
    0.1 |    1 | -0.09966799462495582 |   -1 | 0.46211715726000974
    0.2 |    1 |   -0.197375320224904 |   -1 | 0.46211715726000974
    0.3 |    1 |  -0.2913126124515909 |   -1 | 0.46211715726000974
    1.1 |    1 |  -0.8004990217606297 |   -1 | 0.46211715726000974
    2.2 |    1 |  -0.9757431300314515 |   -1 | 0.46211715726000974
    3.3 |    1 |  -0.9972829600991421 |   -1 | 0.46211715726000974
(6 rows)

-- select tanh (builtin function, tanh in constraints, EXPLAIN (COSTS OFF))
--Testcase 921:
EXPLAIN (COSTS OFF)
SELECT tanh(value1), tanh(value2), tanh(value3), tanh(value4), tanh(0.5) FROM numeric_tbl WHERE tanh(0.5) > value1;
                                                                          QUERY PLAN                                                                           
---------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on numeric_tbl
   Oracle query: SELECT /*a1929d11b452d9c67e5d1954ddd3d74e*/ "VALUE1", "VALUE2", "VALUE3", "VALUE4" FROM  "NUMERIC_TBL" WHERE (0.46211715726000974 > "VALUE1")
(2 rows)

-- select tanh (builtin function, tanh in constraints, result)
--Testcase 922:
SELECT tanh(value1), tanh(value2), tanh(value3), tanh(value4), tanh(0.5) FROM numeric_tbl WHERE tanh(0.5) > value1;
        tanh         | tanh |         tanh         | tanh |        tanh         
---------------------+------+----------------------+------+---------------------
 0.09966799462495582 |    1 | -0.09966799462495582 |   -1 | 0.46211715726000974
   0.197375320224904 |    1 |   -0.197375320224904 |   -1 | 0.46211715726000974
  0.2913126124515909 |    1 |  -0.2913126124515909 |   -1 | 0.46211715726000974
(3 rows)

-- select tanh as nest function with agg (pushdown, EXPLAIN (COSTS OFF))
--Testcase 923:
EXPLAIN (COSTS OFF)
SELECT sum(value3),tanh(sum(value3)) FROM numeric_tbl;
                                                     QUERY PLAN                                                     
--------------------------------------------------------------------------------------------------------------------
 Foreign Scan
   Oracle query: SELECT /*ed8c2c06da8b317ac471b48da1483f3d*/ sum("VALUE3"), tanh(sum("VALUE3")) FROM  "NUMERIC_TBL"
(2 rows)

-- select tanh as nest function with agg (pushdown, result)
--Testcase 924:
SELECT sum(value3),tanh(sum(value3)) FROM numeric_tbl;
 sum  |        tanh         
------+---------------------
 -7.2 | -0.9999988852198828
(1 row)

-- select tanh as nest with log2 (pushdown, EXPLAIN (COSTS OFF))
--Testcase 925:
EXPLAIN (COSTS OFF)
SELECT value1, tanh(log(2, value2)) FROM numeric_tbl;
                                             QUERY PLAN                                             
----------------------------------------------------------------------------------------------------
 Foreign Scan on numeric_tbl
   Oracle query: SELECT /*c35678a687054ae56f3a83ca5558704c*/ "VALUE1", "VALUE2" FROM  "NUMERIC_TBL"
(2 rows)

-- select tanh as nest with log2 (pushdown, result)
--Testcase 926:
SELECT value1, tanh(log(2, value2)) FROM numeric_tbl;
 value1 |        tanh        
--------+--------------------
    0.1 | 0.9999966096143914
    0.2 | 0.9999966096143914
    0.3 | 0.9999966096143914
    1.1 | 0.9999995411605308
    2.2 | 0.9999995411605308
    3.3 | 0.9999995411605308
(6 rows)

-- select tanh with non pushdown func and explicit constant (EXPLAIN (COSTS OFF))
--Testcase 927:
EXPLAIN (COSTS OFF)
SELECT value1, tanh(value3), pi(), 4.1 FROM numeric_tbl;
                                             QUERY PLAN                                             
----------------------------------------------------------------------------------------------------
 Foreign Scan on numeric_tbl
   Oracle query: SELECT /*5373ce45d4cdd3cd948843baa7cda0cc*/ "VALUE1", "VALUE3" FROM  "NUMERIC_TBL"
(2 rows)

-- select tanh with non pushdown func and explicit constant (result)
--Testcase 928:
SELECT value1, tanh(value3), pi(), 4.1 FROM numeric_tbl;
 value1 |         tanh         |        pi         | ?column? 
--------+----------------------+-------------------+----------
    0.1 | -0.09966799462495582 | 3.141592653589793 |      4.1
    0.2 |   -0.197375320224904 | 3.141592653589793 |      4.1
    0.3 |  -0.2913126124515909 | 3.141592653589793 |      4.1
    1.1 |  -0.8004990217606297 | 3.141592653589793 |      4.1
    2.2 |  -0.9757431300314515 | 3.141592653589793 |      4.1
    3.3 |  -0.9972829600991421 | 3.141592653589793 |      4.1
(6 rows)

-- select tanh with order by (EXPLAIN (COSTS OFF))
--Testcase 929:
EXPLAIN (COSTS OFF)
SELECT value1, tanh(1-value3) FROM numeric_tbl ORDER BY tanh(1-value3);
                                                                   QUERY PLAN                                                                    
-------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on numeric_tbl
   Oracle query: SELECT /*e7c0d19ec83c06099c47dfe317950c2f*/ "VALUE1", "VALUE3" FROM  "NUMERIC_TBL" ORDER BY tanh((1 - "VALUE3")) ASC NULLS LAST
(2 rows)

-- select tanh with order by (result)
--Testcase 930:
SELECT value1, tanh(1-value3) FROM numeric_tbl ORDER BY tanh(1-value3);
 value1 |        tanh        
--------+--------------------
    0.1 | 0.8004990217606297
    0.2 | 0.8336546070121552
    0.3 | 0.8617231593133063
    1.1 | 0.9704519366134539
    2.2 | 0.9966823978396512
    3.3 | 0.9996318561900731
(6 rows)

-- select tanh with order by index (result)
--Testcase 931:
SELECT value1, tanh(1-value3) FROM numeric_tbl ORDER BY 2,1;
 value1 |        tanh        
--------+--------------------
    0.1 | 0.8004990217606297
    0.2 | 0.8336546070121552
    0.3 | 0.8617231593133063
    1.1 | 0.9704519366134539
    2.2 | 0.9966823978396512
    3.3 | 0.9996318561900731
(6 rows)

-- select tanh with order by index (result)
--Testcase 932:
SELECT value1, tanh(1-value3) FROM numeric_tbl ORDER BY 1,2;
 value1 |        tanh        
--------+--------------------
    0.1 | 0.8004990217606297
    0.2 | 0.8336546070121552
    0.3 | 0.8617231593133063
    1.1 | 0.9704519366134539
    2.2 | 0.9966823978396512
    3.3 | 0.9996318561900731
(6 rows)

-- select tanh with group by (EXPLAIN (COSTS OFF))
--Testcase 933:
EXPLAIN (COSTS OFF)
SELECT value1, tanh(1-value3) FROM numeric_tbl GROUP BY value1, tanh(1-value3);
                                                                        QUERY PLAN                                                                        
----------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan
   Oracle query: SELECT /*598bf37a1dd7498c55041eebde918d78*/ "VALUE1", tanh((1 - "VALUE3")) FROM  "NUMERIC_TBL" GROUP BY "VALUE1", (tanh((1 - "VALUE3")))
(2 rows)

-- select tanh with group by (result)
--Testcase 934:
SELECT value1, tanh(1-value3) FROM numeric_tbl GROUP BY value1, tanh(1-value3);
 value1 |        tanh        
--------+--------------------
    0.1 | 0.8004990217606297
    0.2 | 0.8336546070121552
    0.3 | 0.8617231593133063
    1.1 | 0.9704519366134539
    2.2 | 0.9966823978396512
    3.3 | 0.9996318561900731
(6 rows)

-- select tanh with group by index (result)
--Testcase 935:
SELECT value1, tanh(1-value3) FROM numeric_tbl GROUP BY 2,1;
 value1 |        tanh        
--------+--------------------
    0.1 | 0.8004990217606297
    0.2 | 0.8336546070121552
    0.3 | 0.8617231593133063
    1.1 | 0.9704519366134539
    2.2 | 0.9966823978396512
    3.3 | 0.9996318561900731
(6 rows)

-- select tanh with group by index (result)
--Testcase 936:
SELECT value1, tanh(1-value3) FROM numeric_tbl GROUP BY 1,2;
 value1 |        tanh        
--------+--------------------
    0.1 | 0.8004990217606297
    0.2 | 0.8336546070121552
    0.3 | 0.8617231593133063
    1.1 | 0.9704519366134539
    2.2 | 0.9966823978396512
    3.3 | 0.9996318561900731
(6 rows)

-- select tanh with group by having (EXPLAIN (COSTS OFF))
--Testcase 937:
EXPLAIN (COSTS OFF)
SELECT value1, tanh(1-value3) FROM numeric_tbl GROUP BY value1, tanh(1-value3) HAVING tanh(avg(value1)) > 0;
                                                                                        QUERY PLAN                                                                                         
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan
   Oracle query: SELECT /*1bdc895bf1d72754b46f43c26659687b*/ "VALUE1", tanh((1 - "VALUE3")) FROM  "NUMERIC_TBL" GROUP BY "VALUE1", (tanh((1 - "VALUE3"))) HAVING (tanh(avg("VALUE1")) > 0)
(2 rows)

-- select tanh with group by having (result)
--Testcase 938:
SELECT value1, tanh(1-value3) FROM numeric_tbl GROUP BY value1, tanh(1-value3) HAVING tanh(avg(value1)) > 0;
 value1 |        tanh        
--------+--------------------
    0.1 | 0.8004990217606297
    0.2 | 0.8336546070121552
    0.3 | 0.8617231593133063
    1.1 | 0.9704519366134539
    2.2 | 0.9966823978396512
    3.3 | 0.9996318561900731
(6 rows)

-- select tanh with group by index having (result)
--Testcase 939:
SELECT value1, tanh(1-value3) FROM numeric_tbl GROUP BY 2,1 HAVING tanh(1-value3) > 0;
 value1 |        tanh        
--------+--------------------
    0.1 | 0.8004990217606297
    0.2 | 0.8336546070121552
    0.3 | 0.8617231593133063
    1.1 | 0.9704519366134539
    2.2 | 0.9966823978396512
    3.3 | 0.9996318561900731
(6 rows)

-- select tanh with group by index having (result)
--Testcase 940:
SELECT value1, tanh(1-value3) FROM numeric_tbl GROUP BY 1,2 HAVING value1 > 1;
 value1 |        tanh        
--------+--------------------
    1.1 | 0.9704519366134539
    2.2 | 0.9966823978396512
    3.3 | 0.9996318561900731
(3 rows)

-- select tanh and as
--Testcase 941:
SELECT value1, tanh(value3) as sin1 FROM numeric_tbl;
 value1 |         sin1         
--------+----------------------
    0.1 | -0.09966799462495582
    0.2 |   -0.197375320224904
    0.3 |  -0.2913126124515909
    1.1 |  -0.8004990217606297
    2.2 |  -0.9757431300314515
    3.3 |  -0.9972829600991421
(6 rows)

-- ===============================================================================
-- test width_bucket
-- ===============================================================================
-- select width_bucket (builtin function, EXPLAIN (COSTS OFF))
--Testcase 942:
EXPLAIN (COSTS OFF)
SELECT width_bucket(value5, value6, value7, value8), width_bucket(value5, value6, value7, value8), width_bucket(value5, value6, value7, value8), width_bucket(value5, value6, value7, 2), width_bucket(value5, value6, value7, value8) FROM numeric_tbl;
                                                       QUERY PLAN                                                       
------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on numeric_tbl
   Oracle query: SELECT /*155bc57c6a44220082fd9a947470e093*/ "VALUE5", "VALUE6", "VALUE7", "VALUE8" FROM  "NUMERIC_TBL"
(2 rows)

-- select width_bucket (builtin function, result)
--Testcase 943:
SELECT width_bucket(value5, value6, value7, value8), width_bucket(value5, value6, value7, value8), width_bucket(value5, value6, value7, value8), width_bucket(value5, value6, value7, 2), width_bucket(value5, value6, value7, value8) FROM numeric_tbl;
 width_bucket | width_bucket | width_bucket | width_bucket | width_bucket 
--------------+--------------+--------------+--------------+--------------
            0 |            0 |            0 |            0 |            0
            0 |            0 |            0 |            0 |            0
            0 |            0 |            0 |            0 |            0
            0 |            0 |            0 |            0 |            0
            0 |            0 |            0 |            0 |            0
            0 |            0 |            0 |            0 |            0
(6 rows)

-- select width_bucket (builtin function, not pushdown constraints, EXPLAIN (COSTS OFF))
--Testcase 944:
EXPLAIN (COSTS OFF)
SELECT width_bucket(value5, value6, value7, value8), width_bucket(value5, value6, value7, value8), width_bucket(value5, value6, value7, value8), width_bucket(value5, value6, value7, 2), width_bucket(value5, value6, value7, value8) FROM numeric_tbl WHERE to_hex(value2) = '64';
                                                            QUERY PLAN                                                            
----------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on numeric_tbl
   Filter: (to_hex(value2) = '64'::text)
   Oracle query: SELECT /*fe22cb42f507cf0505c3cd49d00851f1*/ "VALUE2", "VALUE5", "VALUE6", "VALUE7", "VALUE8" FROM  "NUMERIC_TBL"
(3 rows)

-- select width_bucket (builtin function, not pushdown constraints, result)
--Testcase 945:
SELECT width_bucket(value5, value6, value7, value8), width_bucket(value5, value6, value7, value8), width_bucket(value5, value6, value7, value8), width_bucket(value5, value6, value7, 2), width_bucket(value5, value6, value7, value8) FROM numeric_tbl WHERE to_hex(value2) = '64';
 width_bucket | width_bucket | width_bucket | width_bucket | width_bucket 
--------------+--------------+--------------+--------------+--------------
            0 |            0 |            0 |            0 |            0
            0 |            0 |            0 |            0 |            0
            0 |            0 |            0 |            0 |            0
(3 rows)

-- select width_bucket (builtin function, pushdown constraints, EXPLAIN (COSTS OFF))
--Testcase 946:
EXPLAIN (COSTS OFF)
SELECT width_bucket(value5, value6, value7, value8), width_bucket(value5, value6, value7, value8), width_bucket(value5, value6, value7, value8), width_bucket(value5, value6, value7, 2), width_bucket(value5, value6, value7, value8) FROM numeric_tbl WHERE value2 != 200;
                                                                   QUERY PLAN                                                                   
------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on numeric_tbl
   Oracle query: SELECT /*f6482fbcca6e8dfd6c203be17f9d4d83*/ "VALUE5", "VALUE6", "VALUE7", "VALUE8" FROM  "NUMERIC_TBL" WHERE ("VALUE2" <> 200)
(2 rows)

-- select width_bucket (builtin function, pushdown constraints, result)
--Testcase 947:
SELECT width_bucket(value5, value6, value7, value8), width_bucket(value5, value6, value7, value8), width_bucket(value5, value6, value7, value8), width_bucket(value5, value6, value7, 2), width_bucket(value5, value6, value7, value8) FROM numeric_tbl WHERE value2 != 200;
 width_bucket | width_bucket | width_bucket | width_bucket | width_bucket 
--------------+--------------+--------------+--------------+--------------
            0 |            0 |            0 |            0 |            0
            0 |            0 |            0 |            0 |            0
            0 |            0 |            0 |            0 |            0
(3 rows)

-- select width_bucket (builtin function, width_bucket in constraints, EXPLAIN (COSTS OFF))
--Testcase 948:
EXPLAIN (COSTS OFF)
SELECT width_bucket(value5, value6, value7, value8), width_bucket(value5, value6, value7, value8), width_bucket(value5, value6, value7, value8), width_bucket(value5, value6, value7, 2), width_bucket(value5, value6, value7, value8) FROM numeric_tbl WHERE width_bucket(value5, value6, value7, value8) != 1;
                                                                                        QUERY PLAN                                                                                        
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on numeric_tbl
   Oracle query: SELECT /*2c3781272645f801e552068497401f28*/ "VALUE5", "VALUE6", "VALUE7", "VALUE8" FROM  "NUMERIC_TBL" WHERE (width_bucket("VALUE5", "VALUE6", "VALUE7", "VALUE8") <> 1)
(2 rows)

-- select width_bucket (builtin function, width_bucket in constraints, result)
--Testcase 949:
SELECT width_bucket(value5, value6, value7, value8), width_bucket(value5, value6, value7, value8), width_bucket(value5, value6, value7, value8), width_bucket(value5, value6, value7, 2), width_bucket(value5, value6, value7, value8) FROM numeric_tbl WHERE width_bucket(value5, value6, value7, value8) != 1;
 width_bucket | width_bucket | width_bucket | width_bucket | width_bucket 
--------------+--------------+--------------+--------------+--------------
            0 |            0 |            0 |            0 |            0
            0 |            0 |            0 |            0 |            0
            0 |            0 |            0 |            0 |            0
            0 |            0 |            0 |            0 |            0
            0 |            0 |            0 |            0 |            0
            0 |            0 |            0 |            0 |            0
(6 rows)

-- select width_bucket (builtin function, width_bucket in constraints, EXPLAIN (COSTS OFF))
--Testcase 950:
EXPLAIN (COSTS OFF)
SELECT width_bucket(value5, value6, value7, value8), width_bucket(value5, value6, value7, value8), width_bucket(value5, value6, value7, value8), width_bucket(value5, value6, value7, 2), width_bucket(value5, value6, value7, value8) FROM numeric_tbl WHERE width_bucket(value5, value6, value7, value8) > value1;
                                                                                           QUERY PLAN                                                                                           
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on numeric_tbl
   Oracle query: SELECT /*fff36e372302de351654b98f4fab0be7*/ "VALUE5", "VALUE6", "VALUE7", "VALUE8" FROM  "NUMERIC_TBL" WHERE (width_bucket("VALUE5", "VALUE6", "VALUE7", "VALUE8") > "VALUE1")
(2 rows)

-- select width_bucket (builtin function, width_bucket in constraints, result)
--Testcase 951:
SELECT width_bucket(value5, value6, value7, value8), width_bucket(value5, value6, value7, value8), width_bucket(value5, value6, value7, value8), width_bucket(value5, value6, value7, 2), width_bucket(value5, value6, value7, value8) FROM numeric_tbl WHERE width_bucket(value5, value6, value7, value8) > value1;
 width_bucket | width_bucket | width_bucket | width_bucket | width_bucket 
--------------+--------------+--------------+--------------+--------------
(0 rows)

-- select width_bucket as nest function with agg (pushdown, EXPLAIN (COSTS OFF))
--Testcase 952:
EXPLAIN (COSTS OFF)
SELECT sum(value3),width_bucket(value5, value6, value7, value8) FROM numeric_tbl GROUP BY value5, value6, value7, value8;
                                                                                                                 QUERY PLAN                                                                                                                  
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan
   Oracle query: SELECT /*daf6fee02b602d246c88477730fff998*/ sum("VALUE3"), width_bucket("VALUE5", "VALUE6", "VALUE7", "VALUE8"), "VALUE5", "VALUE6", "VALUE7", "VALUE8" FROM  "NUMERIC_TBL" GROUP BY "VALUE5", "VALUE6", "VALUE7", "VALUE8"
(2 rows)

-- select width_bucket as nest function with agg (pushdown, result)
--Testcase 953:
SELECT sum(value3),width_bucket(value5, value6, value7, value8) FROM numeric_tbl GROUP BY value5, value6, value7, value8;
 sum  | width_bucket 
------+--------------
 -0.1 |            0
 -0.2 |            0
 -0.3 |            0
 -1.1 |            0
 -2.2 |            0
 -3.3 |            0
(6 rows)

-- select width_bucket as nest with log2 (pushdown, EXPLAIN (COSTS OFF))
--Testcase 954:
EXPLAIN (COSTS OFF)
SELECT width_bucket(value5, value6, value7, value8) FROM numeric_tbl;
                                                       QUERY PLAN                                                       
------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on numeric_tbl
   Oracle query: SELECT /*155bc57c6a44220082fd9a947470e093*/ "VALUE5", "VALUE6", "VALUE7", "VALUE8" FROM  "NUMERIC_TBL"
(2 rows)

-- select width_bucket as nest with log2 (pushdown, result)
--Testcase 955:
SELECT width_bucket(value5, value6, value7, value8) FROM numeric_tbl;
 width_bucket 
--------------
            0
            0
            0
            0
            0
            0
(6 rows)

-- select width_bucket with non pushdown func and explicit constant (EXPLAIN (COSTS OFF))
--Testcase 956:
EXPLAIN (COSTS OFF)
SELECT width_bucket(value5, value6, value7, value8), pi(), 4.1 FROM numeric_tbl;
                                                       QUERY PLAN                                                       
------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on numeric_tbl
   Oracle query: SELECT /*155bc57c6a44220082fd9a947470e093*/ "VALUE5", "VALUE6", "VALUE7", "VALUE8" FROM  "NUMERIC_TBL"
(2 rows)

-- select width_bucket with non pushdown func and explicit constant (result)
--Testcase 957:
SELECT width_bucket(value5, value6, value7, value8), pi(), 4.1 FROM numeric_tbl;
 width_bucket |        pi         | ?column? 
--------------+-------------------+----------
            0 | 3.141592653589793 |      4.1
            0 | 3.141592653589793 |      4.1
            0 | 3.141592653589793 |      4.1
            0 | 3.141592653589793 |      4.1
            0 | 3.141592653589793 |      4.1
            0 | 3.141592653589793 |      4.1
(6 rows)

-- select width_bucket with order by (EXPLAIN (COSTS OFF))
--Testcase 958:
EXPLAIN (COSTS OFF)
SELECT value1, width_bucket(value5, value6, value7, value8) FROM numeric_tbl ORDER BY width_bucket(value5, value6, value7, value8);
                                                                                                  QUERY PLAN                                                                                                   
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on numeric_tbl
   Oracle query: SELECT /*217d90e197c71fcc7271fc87442cde28*/ "VALUE1", "VALUE5", "VALUE6", "VALUE7", "VALUE8" FROM  "NUMERIC_TBL" ORDER BY width_bucket("VALUE5", "VALUE6", "VALUE7", "VALUE8") ASC NULLS LAST
(2 rows)

-- select width_bucket with order by (result)
--Testcase 959:
SELECT value1, width_bucket(value5, value6, value7, value8) FROM numeric_tbl ORDER BY width_bucket(value5, value6, value7, value8);
 value1 | width_bucket 
--------+--------------
    0.1 |            0
    0.2 |            0
    3.3 |            0
    1.1 |            0
    2.2 |            0
    0.3 |            0
(6 rows)

-- select width_bucket with order by index (result)
--Testcase 960:
SELECT value1, width_bucket(value5, value6, value7, value8) FROM numeric_tbl ORDER BY 2,1;
 value1 | width_bucket 
--------+--------------
    0.1 |            0
    0.2 |            0
    0.3 |            0
    1.1 |            0
    2.2 |            0
    3.3 |            0
(6 rows)

-- select width_bucket with order by index (result)
--Testcase 961:
SELECT value1, width_bucket(value5, value6, value7, value8) FROM numeric_tbl ORDER BY 1,2;
 value1 | width_bucket 
--------+--------------
    0.1 |            0
    0.2 |            0
    0.3 |            0
    1.1 |            0
    2.2 |            0
    3.3 |            0
(6 rows)

-- select width_bucket with group by (EXPLAIN (COSTS OFF))
--Testcase 962:
EXPLAIN (COSTS OFF)
SELECT value1, width_bucket(value5, value6, value7, value8) FROM numeric_tbl GROUP BY value1, width_bucket(value5, value6, value7, value8);
                                                                                                        QUERY PLAN                                                                                                        
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan
   Oracle query: SELECT /*81bf62ff08ba424692ecf4cfa28781b3*/ "VALUE1", width_bucket("VALUE5", "VALUE6", "VALUE7", "VALUE8") FROM  "NUMERIC_TBL" GROUP BY "VALUE1", (width_bucket("VALUE5", "VALUE6", "VALUE7", "VALUE8"))
(2 rows)

-- select width_bucket with group by (result)
--Testcase 963:
SELECT value1, width_bucket(value5, value6, value7, value8) FROM numeric_tbl GROUP BY value1, width_bucket(value5, value6, value7, value8);
 value1 | width_bucket 
--------+--------------
    0.1 |            0
    0.2 |            0
    0.3 |            0
    1.1 |            0
    2.2 |            0
    3.3 |            0
(6 rows)

-- select width_bucket with group by index (result)
--Testcase 964:
SELECT value1, width_bucket(value5, value6, value7, value8) FROM numeric_tbl GROUP BY 2,1;
 value1 | width_bucket 
--------+--------------
    0.1 |            0
    0.2 |            0
    0.3 |            0
    1.1 |            0
    2.2 |            0
    3.3 |            0
(6 rows)

-- select width_bucket with group by index (result)
--Testcase 965:
SELECT value1, width_bucket(value5, value6, value7, value8) FROM numeric_tbl GROUP BY 1,2;
 value1 | width_bucket 
--------+--------------
    0.1 |            0
    0.2 |            0
    0.3 |            0
    1.1 |            0
    2.2 |            0
    3.3 |            0
(6 rows)

-- select width_bucket with group by having (EXPLAIN (COSTS OFF))
--Testcase 966:
EXPLAIN (COSTS OFF)
SELECT value1, width_bucket(value5, value6, value7, value8) FROM numeric_tbl GROUP BY value1, width_bucket(value5, value6, value7, value8) HAVING width_bucket(value5, value6, value7, value8) > 0;
                                                                                                                                        QUERY PLAN                                                                                                                                         
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan
   Oracle query: SELECT /*b469d993592db7e1e27d33352cd42102*/ "VALUE1", width_bucket("VALUE5", "VALUE6", "VALUE7", "VALUE8") FROM  "NUMERIC_TBL" WHERE (width_bucket("VALUE5", "VALUE6", "VALUE7", "VALUE8") > 0) GROUP BY "VALUE1", (width_bucket("VALUE5", "VALUE6", "VALUE7", "VALUE8"))
(2 rows)

-- select width_bucket with group by having (result)
--Testcase 967:
SELECT value1, width_bucket(value5, value6, value7, value8) FROM numeric_tbl GROUP BY value1, width_bucket(value5, value6, value7, value8) HAVING width_bucket(value5, value6, value7, value8) > 0;
 value1 | width_bucket 
--------+--------------
(0 rows)

-- select width_bucket with group by index having (result)
--Testcase 968:
SELECT value1, width_bucket(value5, value6, value7, value8) FROM numeric_tbl GROUP BY 2,1 HAVING width_bucket(value5, value6, value7, value8) > 0;
 value1 | width_bucket 
--------+--------------
(0 rows)

-- select width_bucket with group by index having (result)
--Testcase 969:
SELECT value1, width_bucket(value5, value6, value7, value8) FROM numeric_tbl GROUP BY 1,2 HAVING value1 > 1;
 value1 | width_bucket 
--------+--------------
    1.1 |            0
    2.2 |            0
    3.3 |            0
(3 rows)

-- select width_bucket and as
--Testcase 970:
SELECT width_bucket(value5, value6, value7, value8) as floor1 FROM numeric_tbl;
 floor1 
--------
      0
      0
      0
      0
      0
      0
(6 rows)

-- ===============================================================================
-- test initcap
-- ===============================================================================
-- select initcap (stub function, EXPLAIN (COSTS OFF))
--Testcase 971:
EXPLAIN (COSTS OFF)
SELECT initcap(str3), initcap(str2) FROM numeric_tbl;
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Foreign Scan on numeric_tbl
   Oracle query: SELECT /*7c05352aa08dce3df909a5cdcc33021f*/ "STR2", "STR3" FROM  "NUMERIC_TBL"
(2 rows)

-- select initcap (stub function, result)
--Testcase 972:
SELECT initcap(str3), initcap(str2) FROM numeric_tbl;
      initcap      |  initcap  
-------------------+-----------
 This Is           |    Abc   
 The Test String   |    Abc   
 Containing Space  |    Abc   
 Between The Words |    Abc   
 Reserved String   |    Abc   
 Reserved String2  |    Abc   
(6 rows)

-- select initcap (stub function, not pushdown constraints, EXPLAIN (COSTS OFF))
--Testcase 973:
EXPLAIN (COSTS OFF)
SELECT value1, initcap(str3) FROM numeric_tbl WHERE to_hex(value2) = '64';
                                                 QUERY PLAN                                                 
------------------------------------------------------------------------------------------------------------
 Foreign Scan on numeric_tbl
   Filter: (to_hex(value2) = '64'::text)
   Oracle query: SELECT /*44520415f36d871eaffb99872810003b*/ "VALUE1", "VALUE2", "STR3" FROM  "NUMERIC_TBL"
(3 rows)

-- select initcap (stub function, not pushdown constraints, result)
--Testcase 974:
SELECT value1, initcap(str3) FROM numeric_tbl WHERE to_hex(value2) = '64';
 value1 |     initcap      
--------+------------------
    0.1 | This Is
    0.2 | The Test String
    0.3 | Containing Space
(3 rows)

-- select initcap (stub function, pushdown constraints, EXPLAIN (COSTS OFF))
--Testcase 975:
EXPLAIN (COSTS OFF)
SELECT value1, initcap(str3) FROM numeric_tbl WHERE value2 != 200;
                                                        QUERY PLAN                                                        
--------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on numeric_tbl
   Oracle query: SELECT /*d29833b664099865a618f2ad7a106e7f*/ "VALUE1", "STR3" FROM  "NUMERIC_TBL" WHERE ("VALUE2" <> 200)
(2 rows)

-- select initcap (stub function, pushdown constraints, result)
--Testcase 976:
SELECT value1, initcap(str3) FROM numeric_tbl WHERE value2 != 200;
 value1 |     initcap      
--------+------------------
    0.1 | This Is
    0.2 | The Test String
    0.3 | Containing Space
(3 rows)

-- select initcap with non pushdown func and explicit constant (EXPLAIN (COSTS OFF))
--Testcase 977:
EXPLAIN (COSTS OFF)
SELECT initcap(str3), pi(), 4.1 FROM numeric_tbl;
                                       QUERY PLAN                                       
----------------------------------------------------------------------------------------
 Foreign Scan on numeric_tbl
   Oracle query: SELECT /*5bcc688fc1d569a133fe742ecdc62e5b*/ "STR3" FROM  "NUMERIC_TBL"
(2 rows)

-- select initcap with non pushdown func and explicit constant (result)
--Testcase 978:
SELECT initcap(str3), pi(), 4.1 FROM numeric_tbl;
      initcap      |        pi         | ?column? 
-------------------+-------------------+----------
 This Is           | 3.141592653589793 |      4.1
 The Test String   | 3.141592653589793 |      4.1
 Containing Space  | 3.141592653589793 |      4.1
 Between The Words | 3.141592653589793 |      4.1
 Reserved String   | 3.141592653589793 |      4.1
 Reserved String2  | 3.141592653589793 |      4.1
(6 rows)

-- select initcap with order by (EXPLAIN (COSTS OFF))
--Testcase 979:
EXPLAIN (COSTS OFF)
SELECT value1, initcap(str3) FROM numeric_tbl ORDER BY initcap(str3);
                                               QUERY PLAN                                               
--------------------------------------------------------------------------------------------------------
 Sort
   Sort Key: (initcap(str3))
   ->  Foreign Scan on numeric_tbl
         Oracle query: SELECT /*347a235f494f261092f08da148a7a71c*/ "VALUE1", "STR3" FROM  "NUMERIC_TBL"
(4 rows)

-- select initcap with order by (result)
--Testcase 980:
SELECT value1, initcap(str3) FROM numeric_tbl ORDER BY initcap(str3);
 value1 |      initcap      
--------+-------------------
    1.1 | Between The Words
    0.3 | Containing Space
    2.2 | Reserved String
    3.3 | Reserved String2
    0.2 | The Test String
    0.1 | This Is
(6 rows)

-- select initcap with order by index (result)
--Testcase 981:
SELECT value1, initcap(str3) FROM numeric_tbl ORDER BY 2,1;
 value1 |      initcap      
--------+-------------------
    1.1 | Between The Words
    0.3 | Containing Space
    2.2 | Reserved String
    3.3 | Reserved String2
    0.2 | The Test String
    0.1 | This Is
(6 rows)

-- select initcap with order by index (result)
--Testcase 982:
SELECT value1, initcap(str3) FROM numeric_tbl ORDER BY 1,2;
 value1 |      initcap      
--------+-------------------
    0.1 | This Is
    0.2 | The Test String
    0.3 | Containing Space
    1.1 | Between The Words
    2.2 | Reserved String
    3.3 | Reserved String2
(6 rows)

-- select initcap with group by (EXPLAIN (COSTS OFF))
--Testcase 983:
EXPLAIN (COSTS OFF)
SELECT count(value1), initcap(str3) FROM numeric_tbl GROUP BY initcap(str3);
                                                                 QUERY PLAN                                                                  
---------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan
   Oracle query: SELECT /*306ef8efe59d51aa31d5afb3e382ea58*/ count("VALUE1"), initcap("STR3") FROM  "NUMERIC_TBL" GROUP BY (initcap("STR3"))
(2 rows)

-- select initcap with group by (result)
--Testcase 984:
SELECT count(value1), initcap(str3) FROM numeric_tbl GROUP BY initcap(str3);
 count |      initcap      
-------+-------------------
     1 | This Is
     1 | The Test String
     1 | Containing Space
     1 | Between The Words
     1 | Reserved String
     1 | Reserved String2
(6 rows)

-- select initcap with group by index (result)
--Testcase 985:
SELECT value1, initcap(str3) FROM numeric_tbl GROUP BY 2,1;
 value1 |      initcap      
--------+-------------------
    0.1 | This Is
    0.2 | The Test String
    0.3 | Containing Space
    1.1 | Between The Words
    2.2 | Reserved String
    3.3 | Reserved String2
(6 rows)

-- select initcap with group by having (EXPLAIN (COSTS OFF))
--Testcase 986:
EXPLAIN (COSTS OFF)
SELECT count(value1), initcap(str3) FROM numeric_tbl GROUP BY initcap(str3), str1 HAVING initcap(str3) IS NOT NULL;
                                                                                           QUERY PLAN                                                                                            
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan
   Oracle query: SELECT /*c21f5d1cc2e4790331a2f48f46295766*/ count("VALUE1"), initcap("STR3"), "STR1" FROM  "NUMERIC_TBL" WHERE (initcap("STR3") IS NOT NULL) GROUP BY (initcap("STR3")), "STR1"
(2 rows)

-- select initcap with group by having (result)
--Testcase 987:
SELECT count(value1), initcap(str3) FROM numeric_tbl GROUP BY initcap(str3), str1 HAVING initcap(str3) IS NOT NULL;
 count |      initcap      
-------+-------------------
     1 | This Is
     1 | The Test String
     1 | Containing Space
     1 | Between The Words
     1 | Reserved String
     1 | Reserved String2
(6 rows)

-- select initcap with group by index having (result)
--Testcase 988:
SELECT value1, initcap(str3) FROM numeric_tbl GROUP BY 1,2 HAVING value1 > 1;
 value1 |      initcap      
--------+-------------------
    1.1 | Between The Words
    2.2 | Reserved String
    3.3 | Reserved String2
(3 rows)

-- ===============================================================================
-- test to_timestamp()
-- ===============================================================================
-- select to_timestamp (stub function, EXPLAIN (COSTS OFF))
--Testcase 989:
EXPLAIN (COSTS OFF)
SELECT to_timestamp(str4, 'YYYY-MM-DD HH:MI:SS'), to_timestamp(str4, 'YYYY-MM-DD HH:MI:SS'), to_timestamp(str4, 'YYYY-MM-DD HH:MI:SS') FROM numeric_tbl;
                                       QUERY PLAN                                       
----------------------------------------------------------------------------------------
 Foreign Scan on numeric_tbl
   Oracle query: SELECT /*44b3add5e16b253bbdfd4d00db679b7c*/ "STR4" FROM  "NUMERIC_TBL"
(2 rows)

-- select to_timestamp (stub function, result)
--Testcase 990:
SELECT to_timestamp(str4, 'YYYY-MM-DD HH:MI:SS'), to_timestamp(str4, 'YYYY-MM-DD HH:MI:SS'), to_timestamp(str4, 'YYYY-MM-DD HH:MI:SS') FROM numeric_tbl;
         to_timestamp         |         to_timestamp         |         to_timestamp         
------------------------------+------------------------------+------------------------------
 Fri Mar 31 09:30:20 2017 PDT | Fri Mar 31 09:30:20 2017 PDT | Fri Mar 31 09:30:20 2017 PDT
 Fri Mar 31 09:30:20 2017 PDT | Fri Mar 31 09:30:20 2017 PDT | Fri Mar 31 09:30:20 2017 PDT
 Fri Mar 31 09:30:20 2017 PDT | Fri Mar 31 09:30:20 2017 PDT | Fri Mar 31 09:30:20 2017 PDT
 Fri Mar 31 09:30:20 2017 PDT | Fri Mar 31 09:30:20 2017 PDT | Fri Mar 31 09:30:20 2017 PDT
 Fri Mar 31 09:30:20 2017 PDT | Fri Mar 31 09:30:20 2017 PDT | Fri Mar 31 09:30:20 2017 PDT
 Fri Mar 31 09:30:20 2017 PDT | Fri Mar 31 09:30:20 2017 PDT | Fri Mar 31 09:30:20 2017 PDT
(6 rows)

-- select to_timestamp (stub function, not pushdown constraints, EXPLAIN (COSTS OFF))
--Testcase 991:
EXPLAIN (COSTS OFF)
SELECT id, to_timestamp(str4, 'YYYY-MM-DD HH:MI:SS') FROM numeric_tbl WHERE to_hex(value2) = '64';
                                               QUERY PLAN                                               
--------------------------------------------------------------------------------------------------------
 Foreign Scan on numeric_tbl
   Filter: (to_hex(value2) = '64'::text)
   Oracle query: SELECT /*e9ffda4ca5da7d4599010efc578e9dc2*/ "ID", "VALUE2", "STR4" FROM  "NUMERIC_TBL"
(3 rows)

-- select to_timestamp (stub function, not pushdown constraints, EXPLAIN (COSTS OFF))
--Testcase 992:
SELECT id, to_timestamp(str4, 'YYYY-MM-DD HH:MI:SS') FROM numeric_tbl WHERE to_hex(value2) = '64';
 id |         to_timestamp         
----+------------------------------
  0 | Fri Mar 31 09:30:20 2017 PDT
  1 | Fri Mar 31 09:30:20 2017 PDT
  2 | Fri Mar 31 09:30:20 2017 PDT
(3 rows)

-- select to_timestamp (stub function, to_timestamp in constraints, EXPLAIN (COSTS OFF))
--Testcase 993:
EXPLAIN (COSTS OFF)
SELECT id, to_timestamp(str4, 'YYYY-MM-DD HH:MI:SS') FROM numeric_tbl WHERE to_timestamp(str4, 'YYYY-MM-DD HH:MI:SS') > to_timestamp('2016-03-31 9:30:20', 'YYYY-MM-DD HH:MI:SS');
                                                                                                  QUERY PLAN                                                                                                  
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on numeric_tbl
   Oracle query: SELECT /*e905008ef448a2cc780562cba4907d80*/ "ID", "STR4" FROM  "NUMERIC_TBL" WHERE (to_timestamp("STR4", 'YYYY-MM-DD HH:MI:SS') > to_timestamp('2016-03-31 9:30:20', 'YYYY-MM-DD HH:MI:SS'))
(2 rows)

-- select to_timestamp (stub function, to_timestamp in constraints, result)
--Testcase 994:
SELECT id, to_timestamp(str4, 'YYYY-MM-DD HH:MI:SS') FROM numeric_tbl WHERE to_timestamp(str4, 'YYYY-MM-DD HH:MI:SS') > to_timestamp('2016-03-31 9:30:20', 'YYYY-MM-DD HH:MI:SS');
 id |         to_timestamp         
----+------------------------------
  0 | Fri Mar 31 09:30:20 2017 PDT
  1 | Fri Mar 31 09:30:20 2017 PDT
  2 | Fri Mar 31 09:30:20 2017 PDT
  3 | Fri Mar 31 09:30:20 2017 PDT
  4 | Fri Mar 31 09:30:20 2017 PDT
  5 | Fri Mar 31 09:30:20 2017 PDT
(6 rows)

-- select to_timestamp with non pushdown func and explicit constant (EXPLAIN (COSTS OFF))
--Testcase 995:
EXPLAIN (COSTS OFF)
SELECT to_timestamp(str4, 'YYYY-MM-DD HH:MI:SS'), pi(), 4.1 FROM numeric_tbl;
                                       QUERY PLAN                                       
----------------------------------------------------------------------------------------
 Foreign Scan on numeric_tbl
   Oracle query: SELECT /*44b3add5e16b253bbdfd4d00db679b7c*/ "STR4" FROM  "NUMERIC_TBL"
(2 rows)

-- select to_timestamp with non pushdown func and explicit constant (result)
--Testcase 996:
SELECT to_timestamp(str4, 'YYYY-MM-DD HH:MI:SS'), pi(), 4.1 FROM numeric_tbl;
         to_timestamp         |        pi         | ?column? 
------------------------------+-------------------+----------
 Fri Mar 31 09:30:20 2017 PDT | 3.141592653589793 |      4.1
 Fri Mar 31 09:30:20 2017 PDT | 3.141592653589793 |      4.1
 Fri Mar 31 09:30:20 2017 PDT | 3.141592653589793 |      4.1
 Fri Mar 31 09:30:20 2017 PDT | 3.141592653589793 |      4.1
 Fri Mar 31 09:30:20 2017 PDT | 3.141592653589793 |      4.1
 Fri Mar 31 09:30:20 2017 PDT | 3.141592653589793 |      4.1
(6 rows)

-- select to_timestamp with order by (EXPLAIN (COSTS OFF))
--Testcase 997:
EXPLAIN (COSTS OFF)
SELECT value1, to_timestamp(str4, 'YYYY-MM-DD HH:MI:SS') FROM numeric_tbl ORDER BY to_timestamp(str4, 'YYYY-MM-DD HH:MI:SS'), 1 DESC;
                                                                                           QUERY PLAN                                                                                            
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on numeric_tbl
   Oracle query: SELECT /*f50af519c49f5ff95ab8d4006db708ca*/ "VALUE1", "STR4" FROM  "NUMERIC_TBL" ORDER BY to_timestamp("STR4", 'YYYY-MM-DD HH:MI:SS') ASC NULLS LAST, "VALUE1" DESC NULLS FIRST
(2 rows)

-- select to_timestamp with order by (result)
--Testcase 998:
SELECT value1, to_timestamp(str4, 'YYYY-MM-DD HH:MI:SS') FROM numeric_tbl ORDER BY to_timestamp(str4, 'YYYY-MM-DD HH:MI:SS'), 1 DESC;
 value1 |         to_timestamp         
--------+------------------------------
    3.3 | Fri Mar 31 09:30:20 2017 PDT
    2.2 | Fri Mar 31 09:30:20 2017 PDT
    1.1 | Fri Mar 31 09:30:20 2017 PDT
    0.3 | Fri Mar 31 09:30:20 2017 PDT
    0.2 | Fri Mar 31 09:30:20 2017 PDT
    0.1 | Fri Mar 31 09:30:20 2017 PDT
(6 rows)

-- select to_timestamp with group by (EXPLAIN (COSTS OFF))
--Testcase 999:
EXPLAIN (COSTS OFF)
SELECT count(value1), to_timestamp(str4, 'YYYY-MM-DD HH:MI:SS') FROM numeric_tbl GROUP BY to_timestamp(str4, 'YYYY-MM-DD HH:MI:SS');
                                                                                             QUERY PLAN                                                                                              
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan
   Oracle query: SELECT /*c3eb67562e3d8f43514fe52206e294d3*/ count("VALUE1"), to_timestamp("STR4", 'YYYY-MM-DD HH:MI:SS') FROM  "NUMERIC_TBL" GROUP BY (to_timestamp("STR4", 'YYYY-MM-DD HH:MI:SS'))
(2 rows)

-- select to_timestamp with group by (result)
--Testcase 1000:
SELECT count(value1), to_timestamp(str4, 'YYYY-MM-DD HH:MI:SS') FROM numeric_tbl GROUP BY to_timestamp(str4, 'YYYY-MM-DD HH:MI:SS');
 count |         to_timestamp         
-------+------------------------------
     6 | Fri Mar 31 09:30:20 2017 PDT
(1 row)

-- select to_timestamp with group by index (result)
--Testcase 1001:
SELECT value1, to_timestamp(str4, 'YYYY-MM-DD HH:MI:SS') FROM numeric_tbl GROUP BY 2,1;
 value1 |         to_timestamp         
--------+------------------------------
    0.1 | Fri Mar 31 09:30:20 2017 PDT
    0.2 | Fri Mar 31 09:30:20 2017 PDT
    0.3 | Fri Mar 31 09:30:20 2017 PDT
    1.1 | Fri Mar 31 09:30:20 2017 PDT
    2.2 | Fri Mar 31 09:30:20 2017 PDT
    3.3 | Fri Mar 31 09:30:20 2017 PDT
(6 rows)

-- select to_timestamp with group by having (EXPLAIN (COSTS OFF))
--Testcase 1002:
EXPLAIN (COSTS OFF)
SELECT count(value1), to_timestamp(str4, 'YYYY-MM-DD HH:MI:SS') FROM numeric_tbl GROUP BY to_timestamp(str4, 'YYYY-MM-DD HH:MI:SS'), str1 HAVING to_timestamp(str4, 'YYYY-MM-DD HH:MI:SS') > to_timestamp('2016-03-31 9:30:20', 'YYYY-MM-DD HH:MI:SS');
                                                                                                                                                             QUERY PLAN                                                                                                                                                              
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan
   Oracle query: SELECT /*64d0c00fbb3acff8d9d336d0691ddd41*/ count("VALUE1"), to_timestamp("STR4", 'YYYY-MM-DD HH:MI:SS'), "STR1" FROM  "NUMERIC_TBL" WHERE (to_timestamp("STR4", 'YYYY-MM-DD HH:MI:SS') > to_timestamp('2016-03-31 9:30:20', 'YYYY-MM-DD HH:MI:SS')) GROUP BY (to_timestamp("STR4", 'YYYY-MM-DD HH:MI:SS')), "STR1"
(2 rows)

-- select to_timestamp with group by having (result)
--Testcase 1003:
SELECT count(value1), to_timestamp(str4, 'YYYY-MM-DD HH:MI:SS') FROM numeric_tbl GROUP BY to_timestamp(str4, 'YYYY-MM-DD HH:MI:SS'), str1 HAVING to_timestamp(str4, 'YYYY-MM-DD HH:MI:SS') > to_timestamp('2016-03-31 9:30:20', 'YYYY-MM-DD HH:MI:SS');
 count |         to_timestamp         
-------+------------------------------
     6 | Fri Mar 31 09:30:20 2017 PDT
(1 row)

-- select to_timestamp with group by index having (result)
--Testcase 1004:
SELECT value1, to_timestamp(str4, 'YYYY-MM-DD HH:MI:SS') FROM numeric_tbl GROUP BY 1,2 HAVING value1 > 1;
 value1 |         to_timestamp         
--------+------------------------------
    1.1 | Fri Mar 31 09:30:20 2017 PDT
    2.2 | Fri Mar 31 09:30:20 2017 PDT
    3.3 | Fri Mar 31 09:30:20 2017 PDT
(3 rows)

-- ===============================================================================
-- test trunc()
-- ===============================================================================
-- select trunc (builtin function, EXPLAIN (COSTS OFF))
--Testcase 1005:
EXPLAIN (COSTS OFF)
SELECT trunc(value6), trunc(value7), trunc(value5), trunc(value1) FROM numeric_tbl;
                                                       QUERY PLAN                                                       
------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on numeric_tbl
   Oracle query: SELECT /*15a48d985baa46390dbea0afe4a533f8*/ "VALUE1", "VALUE5", "VALUE6", "VALUE7" FROM  "NUMERIC_TBL"
(2 rows)

-- select trunc (buitin function, result)
--Testcase 1006:
SELECT trunc(value6), trunc(value7), trunc(value5), trunc(value1) FROM numeric_tbl;
 trunc | trunc | trunc | trunc 
-------+-------+-------+-------
     1 |     5 |     0 |     0
     2 |     6 |     0 |     0
     3 |     7 |     0 |     0
     4 |     8 |     0 |     1
     5 |     9 |     0 |     2
     6 |    10 |     0 |     3
(6 rows)

-- select trunc (builtin function, not pushdown constraints, EXPLAIN (COSTS OFF))
--Testcase 1007:
EXPLAIN (COSTS OFF)
SELECT trunc(value6), trunc(value7), trunc(value5), trunc(value1) FROM numeric_tbl WHERE to_hex(value2) != '64';
                                                            QUERY PLAN                                                            
----------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on numeric_tbl
   Filter: (to_hex(value2) <> '64'::text)
   Oracle query: SELECT /*025a6c700ceec6c91644b5b666646075*/ "VALUE1", "VALUE2", "VALUE5", "VALUE6", "VALUE7" FROM  "NUMERIC_TBL"
(3 rows)

-- select trunc (builtin function, not pushdown constraints, result)
--Testcase 1008:
SELECT trunc(value6), trunc(value7), trunc(value5), trunc(value1) FROM numeric_tbl WHERE to_hex(value2) != '64';
 trunc | trunc | trunc | trunc 
-------+-------+-------+-------
     4 |     8 |     0 |     1
     5 |     9 |     0 |     2
     6 |    10 |     0 |     3
(3 rows)

-- select trunc (builtin function, pushdown constraints, EXPLAIN (COSTS OFF))
--Testcase 1009:
EXPLAIN (COSTS OFF)
SELECT trunc(value6), trunc(value7), trunc(value5), trunc(value1) FROM numeric_tbl WHERE value2 != 200;
                                                                   QUERY PLAN                                                                   
------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on numeric_tbl
   Oracle query: SELECT /*3e3e6b1764118e6d8cd889e3fc8cdb6c*/ "VALUE1", "VALUE5", "VALUE6", "VALUE7" FROM  "NUMERIC_TBL" WHERE ("VALUE2" <> 200)
(2 rows)

-- select trunc (builtin function, pushdown constraints, result)
--Testcase 1010:
SELECT trunc(value6), trunc(value7), trunc(value5), trunc(value1) FROM numeric_tbl WHERE value2 != 200;
 trunc | trunc | trunc | trunc 
-------+-------+-------+-------
     1 |     5 |     0 |     0
     2 |     6 |     0 |     0
     3 |     7 |     0 |     0
(3 rows)

-- ===============================================================================
-- test translate()
-- ===============================================================================
-- select translate (stub function, EXPLAIN (COSTS OFF))
--Testcase 1011:
EXPLAIN (COSTS OFF)
SELECT translate(str3, 'abc', '123'),translate(str1, 'abc', '123') FROM numeric_tbl;
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Foreign Scan on numeric_tbl
   Oracle query: SELECT /*6149e17d5587c5011a873f39752ae1e4*/ "STR1", "STR3" FROM  "NUMERIC_TBL"
(2 rows)

-- select translate (stub function, result)
--Testcase 1012:
SELECT translate(str3, 'abc', '123'),translate(str1, 'abc', '123') FROM numeric_tbl;
     translate     | translate 
-------------------+-----------
 This is           | ---XYZ---
 the test string   | ---XYZ---
 3ont1ining sp13e  | ---XYZ---
 2etween the words | ---XYZ---
 reserved string   | ---XYZ---
 reserved string2  | ---XYZ---
(6 rows)

-- select translate (stub function, not pushdown constraints, EXPLAIN (COSTS OFF))
--Testcase 1013:
EXPLAIN (COSTS OFF)
SELECT value1, translate(str3, 'abc', '123') FROM numeric_tbl WHERE to_hex(value2) = '64';
                                                 QUERY PLAN                                                 
------------------------------------------------------------------------------------------------------------
 Foreign Scan on numeric_tbl
   Filter: (to_hex(value2) = '64'::text)
   Oracle query: SELECT /*44520415f36d871eaffb99872810003b*/ "VALUE1", "VALUE2", "STR3" FROM  "NUMERIC_TBL"
(3 rows)

-- select translate (stub function, not pushdown constraints, result)
--Testcase 1014:
SELECT value1, translate(str3, 'abc', '123') FROM numeric_tbl WHERE to_hex(value2) = '64';
 value1 |    translate     
--------+------------------
    0.1 | This is
    0.2 | the test string
    0.3 | 3ont1ining sp13e
(3 rows)

-- select translate (stub function, pushdown constraints, EXPLAIN (COSTS OFF))
--Testcase 1015:
EXPLAIN (COSTS OFF)
SELECT value1, translate(str3, 'abc', '123') FROM numeric_tbl WHERE value2 != 200;
                                                        QUERY PLAN                                                        
--------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on numeric_tbl
   Oracle query: SELECT /*d29833b664099865a618f2ad7a106e7f*/ "VALUE1", "STR3" FROM  "NUMERIC_TBL" WHERE ("VALUE2" <> 200)
(2 rows)

-- select translate (stub function, pushdown constraints, result)
--Testcase 1016:
SELECT value1, translate(str3, 'abc', '123') FROM numeric_tbl WHERE value2 != 200;
 value1 |    translate     
--------+------------------
    0.1 | This is
    0.2 | the test string
    0.3 | 3ont1ining sp13e
(3 rows)

-- select translate with non pushdown func and explicit constant (EXPLAIN (COSTS OFF))
--Testcase 1017:
EXPLAIN (COSTS OFF)
SELECT translate(str3, 'abc', '123'), pi(), 4.1 FROM numeric_tbl;
                                       QUERY PLAN                                       
----------------------------------------------------------------------------------------
 Foreign Scan on numeric_tbl
   Oracle query: SELECT /*5bcc688fc1d569a133fe742ecdc62e5b*/ "STR3" FROM  "NUMERIC_TBL"
(2 rows)

-- select translate with non pushdown func and explicit constant (result)
--Testcase 1018:
SELECT translate(str3, 'abc', '123'), pi(), 4.1 FROM numeric_tbl;
     translate     |        pi         | ?column? 
-------------------+-------------------+----------
 This is           | 3.141592653589793 |      4.1
 the test string   | 3.141592653589793 |      4.1
 3ont1ining sp13e  | 3.141592653589793 |      4.1
 2etween the words | 3.141592653589793 |      4.1
 reserved string   | 3.141592653589793 |      4.1
 reserved string2  | 3.141592653589793 |      4.1
(6 rows)

-- select translate with order by (EXPLAIN (COSTS OFF))
--Testcase 1019:
EXPLAIN (COSTS OFF)
SELECT value1, translate(str3, 'abc', '123') FROM numeric_tbl ORDER BY translate(str3, 'abc', '123');
                                               QUERY PLAN                                               
--------------------------------------------------------------------------------------------------------
 Sort
   Sort Key: (translate(str3, 'abc'::text, '123'::text))
   ->  Foreign Scan on numeric_tbl
         Oracle query: SELECT /*347a235f494f261092f08da148a7a71c*/ "VALUE1", "STR3" FROM  "NUMERIC_TBL"
(4 rows)

-- select translate with order by (result)
--Testcase 1020:
SELECT value1, translate(str3, 'abc', '123') FROM numeric_tbl ORDER BY translate(str3, 'abc', '123');
 value1 |     translate     
--------+-------------------
    1.1 | 2etween the words
    0.3 | 3ont1ining sp13e
    2.2 | reserved string
    3.3 | reserved string2
    0.2 | the test string
    0.1 | This is
(6 rows)

-- select translate with order by index (result)
--Testcase 1021:
SELECT value1, translate(str3, 'abc', '123') FROM numeric_tbl ORDER BY 2,1;
 value1 |     translate     
--------+-------------------
    1.1 | 2etween the words
    0.3 | 3ont1ining sp13e
    2.2 | reserved string
    3.3 | reserved string2
    0.2 | the test string
    0.1 | This is
(6 rows)

-- select translate with order by index (result)
--Testcase 1022:
SELECT value1, translate(str3, 'abc', '123') FROM numeric_tbl ORDER BY 1,2;
 value1 |     translate     
--------+-------------------
    0.1 | This is
    0.2 | the test string
    0.3 | 3ont1ining sp13e
    1.1 | 2etween the words
    2.2 | reserved string
    3.3 | reserved string2
(6 rows)

-- select translate with group by (EXPLAIN (COSTS OFF))
--Testcase 1023:
EXPLAIN (COSTS OFF)
SELECT count(value1), translate(str3, 'abc', '123') FROM numeric_tbl GROUP BY translate(str3, 'abc', '123');
                                                                                 QUERY PLAN                                                                                  
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan
   Oracle query: SELECT /*75e12d967696f1d29f60f2fbd8077e8a*/ count("VALUE1"), translate("STR3", 'abc', '123') FROM  "NUMERIC_TBL" GROUP BY (translate("STR3", 'abc', '123'))
(2 rows)

-- select translate with group by (result)
--Testcase 1024:
SELECT count(value1), translate(str3, 'abc', '123') FROM numeric_tbl GROUP BY translate(str3, 'abc', '123');
 count |     translate     
-------+-------------------
     1 | This is
     1 | the test string
     1 | 3ont1ining sp13e
     1 | 2etween the words
     1 | reserved string
     1 | reserved string2
(6 rows)

-- select translate with group by index (result)
--Testcase 1025:
SELECT value1, translate(str3, 'abc', '123') FROM numeric_tbl GROUP BY 2,1;
 value1 |     translate     
--------+-------------------
    0.1 | This is
    0.2 | the test string
    0.3 | 3ont1ining sp13e
    1.1 | 2etween the words
    2.2 | reserved string
    3.3 | reserved string2
(6 rows)

-- select translate with group by having (EXPLAIN (COSTS OFF))
--Testcase 1026:
EXPLAIN (COSTS OFF)
SELECT count(value1), translate(str3, 'abc', '123') FROM numeric_tbl GROUP BY translate(str3, 'abc', '123'), str2 HAVING translate(str3, 'abc', '123') IS NOT NULL;
                                                                                                                   QUERY PLAN                                                                                                                    
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan
   Oracle query: SELECT /*49e3f7853d3a4fd64b5a0984c5c375b9*/ count("VALUE1"), translate("STR3", 'abc', '123'), "STR2" FROM  "NUMERIC_TBL" WHERE (translate("STR3", 'abc', '123') IS NOT NULL) GROUP BY (translate("STR3", 'abc', '123')), "STR2"
(2 rows)

-- select translate with group by having (result)
--Testcase 1027:
SELECT count(value1), translate(str3, 'abc', '123') FROM numeric_tbl GROUP BY translate(str3, 'abc', '123'), str2 HAVING translate(str3, 'abc', '123') IS NOT NULL;
 count |     translate     
-------+-------------------
     1 | This is
     1 | the test string
     1 | 3ont1ining sp13e
     1 | 2etween the words
     1 | reserved string
     1 | reserved string2
(6 rows)

-- select translate with group by index having (result)
--Testcase 1028:
SELECT value1, translate(str3, 'abc', '123') FROM numeric_tbl GROUP BY 1,2 HAVING value1 > 1;
 value1 |     translate     
--------+-------------------
    1.1 | 2etween the words
    2.2 | reserved string
    3.3 | reserved string2
(3 rows)

-- ===============================================================================
-- test to_char()
-- ===============================================================================
-- select to_char (stub function, EXPLAIN (COSTS OFF))
--Testcase 1029:
EXPLAIN (COSTS OFF)
SELECT to_char(value2, '999'), to_char(value2, '999'), to_char(value2, '999') FROM numeric_tbl;
                                        QUERY PLAN                                        
------------------------------------------------------------------------------------------
 Foreign Scan on numeric_tbl
   Oracle query: SELECT /*942bf85feb96f605a79f40dffa8f6645*/ "VALUE2" FROM  "NUMERIC_TBL"
(2 rows)

-- select to_char (stub function, result)
--Testcase 1030:
SELECT to_char(value2, '999'), to_char(value2, '999'), to_char(value2, '999') FROM numeric_tbl;
 to_char | to_char | to_char 
---------+---------+---------
  100    |  100    |  100
  100    |  100    |  100
  100    |  100    |  100
  200    |  200    |  200
  200    |  200    |  200
  200    |  200    |  200
(6 rows)

-- select to_char (stub function, not pushdown constraints, EXPLAIN (COSTS OFF))
--Testcase 1031:
EXPLAIN (COSTS OFF)
SELECT id, to_char(value2, '999') FROM numeric_tbl WHERE to_hex(value2) = '64';
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Foreign Scan on numeric_tbl
   Filter: (to_hex(value2) = '64'::text)
   Oracle query: SELECT /*791ff7984adf770acb4c373eb4f2f46a*/ "ID", "VALUE2" FROM  "NUMERIC_TBL"
(3 rows)

-- select to_char (stub function, not pushdown constraints, EXPLAIN (COSTS OFF))
--Testcase 1032:
SELECT id, to_char(value2, '999') FROM numeric_tbl WHERE to_hex(value2) = '64';
 id | to_char 
----+---------
  0 |  100
  1 |  100
  2 |  100
(3 rows)

-- select to_char (stub function, to_char in constraints, EXPLAIN (COSTS OFF))
--Testcase 1033:
EXPLAIN (COSTS OFF)
SELECT id, to_char(value2, '999') FROM numeric_tbl WHERE to_char(value2, '999') > to_char(value4, '999');
                                                QUERY PLAN                                                
----------------------------------------------------------------------------------------------------------
 Foreign Scan on numeric_tbl
   Filter: (to_char(value2, '999'::text) > to_char(value4, '999'::text))
   Oracle query: SELECT /*44edee95a14dde47e34fb0bdf13ed9ce*/ "ID", "VALUE2", "VALUE4" FROM  "NUMERIC_TBL"
(3 rows)

-- select to_char (stub function, to_char in constraints, result)
--Testcase 1034:
SELECT id, to_char(value2, '999') FROM numeric_tbl WHERE to_char(value2, '999') > to_char(value4, '999');
 id | to_char 
----+---------
(0 rows)

-- select to_char with non pushdown func and explicit constant (EXPLAIN (COSTS OFF))
--Testcase 1035:
EXPLAIN (COSTS OFF)
SELECT to_char(value2, '999'), pi(), 4.1 FROM numeric_tbl;
                                        QUERY PLAN                                        
------------------------------------------------------------------------------------------
 Foreign Scan on numeric_tbl
   Oracle query: SELECT /*942bf85feb96f605a79f40dffa8f6645*/ "VALUE2" FROM  "NUMERIC_TBL"
(2 rows)

-- select to_char with non pushdown func and explicit constant (result)
--Testcase 1036:
SELECT to_char(value2, '999'), pi(), 4.1 FROM numeric_tbl;
 to_char |        pi         | ?column? 
---------+-------------------+----------
  100    | 3.141592653589793 |      4.1
  100    | 3.141592653589793 |      4.1
  100    | 3.141592653589793 |      4.1
  200    | 3.141592653589793 |      4.1
  200    | 3.141592653589793 |      4.1
  200    | 3.141592653589793 |      4.1
(6 rows)

-- select to_char with order by (EXPLAIN (COSTS OFF))
--Testcase 1037:
EXPLAIN (COSTS OFF)
SELECT value1, to_char(value2, '999') FROM numeric_tbl ORDER BY to_char(value2, '999'), 1 DESC;
                                                QUERY PLAN                                                
----------------------------------------------------------------------------------------------------------
 Sort
   Sort Key: (to_char(value2, '999'::text)), value1 DESC
   ->  Foreign Scan on numeric_tbl
         Oracle query: SELECT /*c35678a687054ae56f3a83ca5558704c*/ "VALUE1", "VALUE2" FROM  "NUMERIC_TBL"
(4 rows)

-- select to_char with order by (result)
--Testcase 1038:
SELECT value1, to_char(value2, '999') FROM numeric_tbl ORDER BY to_char(value2, '999'), 1 DESC;
 value1 | to_char 
--------+---------
    0.3 |  100
    0.2 |  100
    0.1 |  100
    3.3 |  200
    2.2 |  200
    1.1 |  200
(6 rows)

-- select to_char with group by (EXPLAIN (COSTS OFF))
--Testcase 1039:
EXPLAIN (COSTS OFF)
SELECT count(value1), to_char(value2, '999') FROM numeric_tbl GROUP BY to_char(value2, '999');
                                                                          QUERY PLAN                                                                           
---------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan
   Oracle query: SELECT /*bfe3b30ce5d5ec874fbe5ffae4740160*/ count("VALUE1"), to_char("VALUE2", '999') FROM  "NUMERIC_TBL" GROUP BY (to_char("VALUE2", '999'))
(2 rows)

-- select to_char with group by (result)
--Testcase 1040:
SELECT count(value1), to_char(value2, '999') FROM numeric_tbl GROUP BY to_char(value2, '999');
 count | to_char 
-------+---------
     3 |  100
     3 |  200
(2 rows)

-- select to_char with group by index (result)
--Testcase 1041:
SELECT value1, to_char(value2, '999') FROM numeric_tbl GROUP BY 2,1;
 value1 | to_char 
--------+---------
    0.1 |  100
    0.2 |  100
    0.3 |  100
    1.1 |  200
    2.2 |  200
    3.3 |  200
(6 rows)

-- select to_char with group by having (EXPLAIN (COSTS OFF))
--Testcase 1042:
EXPLAIN (COSTS OFF)
SELECT count(value1), to_char(value2, '999') FROM numeric_tbl GROUP BY value4, to_char(value2, '999'), str1 HAVING to_char(value2, '999') > to_char(value4, '999');
                                                            QUERY PLAN                                                            
----------------------------------------------------------------------------------------------------------------------------------
 GroupAggregate
   Group Key: value4, (to_char(value2, '999'::text)), str1
   ->  Sort
         Sort Key: value4, (to_char(value2, '999'::text)), str1
         ->  Foreign Scan on numeric_tbl
               Filter: (to_char(value2, '999'::text) > to_char(value4, '999'::text))
               Oracle query: SELECT /*8508bbd240603b8c6eb97efbf8ea1f1c*/ "VALUE1", "VALUE2", "VALUE4", "STR1" FROM  "NUMERIC_TBL"
(7 rows)

-- select to_char with group by having (result)
--Testcase 1043:
SELECT count(value1), to_char(value2, '999') FROM numeric_tbl GROUP BY value4, to_char(value2, '999'), str1 HAVING to_char(value2, '999') > to_char(value4, '999');
 count | to_char 
-------+---------
(0 rows)

-- select to_char with group by index having (result)
--Testcase 1044:
SELECT value1, to_char(value2, '999') FROM numeric_tbl GROUP BY 1,2 HAVING value1 > 1;
 value1 | to_char 
--------+---------
    1.1 |  200
    2.2 |  200
    3.3 |  200
(3 rows)

-- ===============================================================================
-- test to_date()
-- ===============================================================================
-- select to_date (stub function, EXPLAIN (COSTS OFF))
--Testcase 1045:
EXPLAIN (COSTS OFF)
SELECT to_date(str4, 'YYYY-MM-DD HH:MI:SS'), to_date(str4, 'YYYY-MM-DD HH:MI:SS'), to_date(str4, 'YYYY-MM-DD HH:MI:SS') FROM numeric_tbl;
                                       QUERY PLAN                                       
----------------------------------------------------------------------------------------
 Foreign Scan on numeric_tbl
   Oracle query: SELECT /*44b3add5e16b253bbdfd4d00db679b7c*/ "STR4" FROM  "NUMERIC_TBL"
(2 rows)

-- select to_date (stub function, result)
--Testcase 1046:
SELECT to_date(str4, 'YYYY-MM-DD HH:MI:SS'), to_date(str4, 'YYYY-MM-DD HH:MI:SS'), to_date(str4, 'YYYY-MM-DD HH:MI:SS') FROM numeric_tbl;
  to_date   |  to_date   |  to_date   
------------+------------+------------
 03-31-2017 | 03-31-2017 | 03-31-2017
 03-31-2017 | 03-31-2017 | 03-31-2017
 03-31-2017 | 03-31-2017 | 03-31-2017
 03-31-2017 | 03-31-2017 | 03-31-2017
 03-31-2017 | 03-31-2017 | 03-31-2017
 03-31-2017 | 03-31-2017 | 03-31-2017
(6 rows)

-- select to_date (stub function, not pushdown constraints, EXPLAIN (COSTS OFF))
--Testcase 1047:
EXPLAIN (COSTS OFF)
SELECT id, to_date(str4, 'YYYY-MM-DD HH:MI:SS') FROM numeric_tbl WHERE to_hex(value2) = '64';
                                               QUERY PLAN                                               
--------------------------------------------------------------------------------------------------------
 Foreign Scan on numeric_tbl
   Filter: (to_hex(value2) = '64'::text)
   Oracle query: SELECT /*e9ffda4ca5da7d4599010efc578e9dc2*/ "ID", "VALUE2", "STR4" FROM  "NUMERIC_TBL"
(3 rows)

-- select to_date (stub function, not pushdown constraints, EXPLAIN (COSTS OFF))
--Testcase 1048:
SELECT id, to_date(str4, 'YYYY-MM-DD HH:MI:SS') FROM numeric_tbl WHERE to_hex(value2) = '64';
 id |  to_date   
----+------------
  0 | 03-31-2017
  1 | 03-31-2017
  2 | 03-31-2017
(3 rows)

-- select to_date (stub function, to_date in constraints, EXPLAIN (COSTS OFF))
--Testcase 1049:
EXPLAIN (COSTS OFF)
SELECT id, to_date(str4, 'YYYY-MM-DD HH:MI:SS') FROM numeric_tbl WHERE to_date(str4, 'YYYY-MM-DD HH:MI:SS') > to_date('2016-03-31 9:30:20', 'YYYY-MM-DD HH:MI:SS');
                                                                                             QUERY PLAN                                                                                             
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on numeric_tbl
   Oracle query: SELECT /*2b923073eda1fdc44dcef7b6fb8dfcac*/ "ID", "STR4" FROM  "NUMERIC_TBL" WHERE (to_date("STR4", 'YYYY-MM-DD HH:MI:SS') > to_date('2016-03-31 9:30:20', 'YYYY-MM-DD HH:MI:SS'))
(2 rows)

-- select to_date (stub function, to_date in constraints, result)
--Testcase 1050:
SELECT id, to_date(str4, 'YYYY-MM-DD HH:MI:SS') FROM numeric_tbl WHERE to_date(str4, 'YYYY-MM-DD HH:MI:SS') > to_date('2016-03-31 9:30:20', 'YYYY-MM-DD HH:MI:SS');
 id |  to_date   
----+------------
  0 | 03-31-2017
  1 | 03-31-2017
  2 | 03-31-2017
  3 | 03-31-2017
  4 | 03-31-2017
  5 | 03-31-2017
(6 rows)

-- select to_date with non pushdown func and explicit constant (EXPLAIN (COSTS OFF))
--Testcase 1051:
EXPLAIN (COSTS OFF)
SELECT to_date(str4, 'YYYY-MM-DD HH:MI:SS'), pi(), 4.1 FROM numeric_tbl;
                                       QUERY PLAN                                       
----------------------------------------------------------------------------------------
 Foreign Scan on numeric_tbl
   Oracle query: SELECT /*44b3add5e16b253bbdfd4d00db679b7c*/ "STR4" FROM  "NUMERIC_TBL"
(2 rows)

-- select to_date with non pushdown func and explicit constant (result)
--Testcase 1052:
SELECT to_date(str4, 'YYYY-MM-DD HH:MI:SS'), pi(), 4.1 FROM numeric_tbl;
  to_date   |        pi         | ?column? 
------------+-------------------+----------
 03-31-2017 | 3.141592653589793 |      4.1
 03-31-2017 | 3.141592653589793 |      4.1
 03-31-2017 | 3.141592653589793 |      4.1
 03-31-2017 | 3.141592653589793 |      4.1
 03-31-2017 | 3.141592653589793 |      4.1
 03-31-2017 | 3.141592653589793 |      4.1
(6 rows)

-- select to_date with order by (EXPLAIN (COSTS OFF))
--Testcase 1053:
EXPLAIN (COSTS OFF)
SELECT value1, to_date(str4, 'YYYY-MM-DD HH:MI:SS') FROM numeric_tbl ORDER BY to_date(str4, 'YYYY-MM-DD HH:MI:SS'), 1 DESC;
                                                                                         QUERY PLAN                                                                                         
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on numeric_tbl
   Oracle query: SELECT /*025dcb4ea888244ef940f81e3013acb1*/ "VALUE1", "STR4" FROM  "NUMERIC_TBL" ORDER BY to_date("STR4", 'YYYY-MM-DD HH:MI:SS') ASC NULLS LAST, "VALUE1" DESC NULLS FIRST
(2 rows)

-- select to_date with order by (result)
--Testcase 1054:
SELECT value1, to_date(str4, 'YYYY-MM-DD HH:MI:SS') FROM numeric_tbl ORDER BY to_date(str4, 'YYYY-MM-DD HH:MI:SS'), 1 DESC;
 value1 |  to_date   
--------+------------
    3.3 | 03-31-2017
    2.2 | 03-31-2017
    1.1 | 03-31-2017
    0.3 | 03-31-2017
    0.2 | 03-31-2017
    0.1 | 03-31-2017
(6 rows)

-- select to_date with group by (EXPLAIN (COSTS OFF))
--Testcase 1055:
EXPLAIN (COSTS OFF)
SELECT count(value1), to_date(str4, 'YYYY-MM-DD HH:MI:SS') FROM numeric_tbl GROUP BY to_date(str4, 'YYYY-MM-DD HH:MI:SS');
                                                                                        QUERY PLAN                                                                                         
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan
   Oracle query: SELECT /*86e6daaa33326cdda3b30e980695de31*/ count("VALUE1"), to_date("STR4", 'YYYY-MM-DD HH:MI:SS') FROM  "NUMERIC_TBL" GROUP BY (to_date("STR4", 'YYYY-MM-DD HH:MI:SS'))
(2 rows)

-- select to_date with group by (result)
--Testcase 1056:
SELECT count(value1), to_date(str4, 'YYYY-MM-DD HH:MI:SS') FROM numeric_tbl GROUP BY to_date(str4, 'YYYY-MM-DD HH:MI:SS');
 count |  to_date   
-------+------------
     6 | 03-31-2017
(1 row)

-- select to_date with group by index (result)
--Testcase 1057:
SELECT value1, to_date(str4, 'YYYY-MM-DD HH:MI:SS') FROM numeric_tbl GROUP BY 2,1;
 value1 |  to_date   
--------+------------
    0.1 | 03-31-2017
    0.2 | 03-31-2017
    0.3 | 03-31-2017
    1.1 | 03-31-2017
    2.2 | 03-31-2017
    3.3 | 03-31-2017
(6 rows)

-- select to_date with group by having (EXPLAIN (COSTS OFF))
--Testcase 1058:
EXPLAIN (COSTS OFF)
SELECT count(value1), to_date(str4, 'YYYY-MM-DD HH:MI:SS') FROM numeric_tbl GROUP BY to_date(str4, 'YYYY-MM-DD HH:MI:SS'), str1 HAVING to_date(str4, 'YYYY-MM-DD HH:MI:SS') > to_date('2016-03-31 9:30:20', 'YYYY-MM-DD HH:MI:SS');
                                                                                                                                                   QUERY PLAN                                                                                                                                                    
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan
   Oracle query: SELECT /*e457a112820a7ebd8b8501e6f8ed9a26*/ count("VALUE1"), to_date("STR4", 'YYYY-MM-DD HH:MI:SS'), "STR1" FROM  "NUMERIC_TBL" WHERE (to_date("STR4", 'YYYY-MM-DD HH:MI:SS') > to_date('2016-03-31 9:30:20', 'YYYY-MM-DD HH:MI:SS')) GROUP BY (to_date("STR4", 'YYYY-MM-DD HH:MI:SS')), "STR1"
(2 rows)

-- select to_date with group by having (result)
--Testcase 1059:
SELECT count(value1), to_date(str4, 'YYYY-MM-DD HH:MI:SS') FROM numeric_tbl GROUP BY to_date(str4, 'YYYY-MM-DD HH:MI:SS'), str1 HAVING to_date(str4, 'YYYY-MM-DD HH:MI:SS') > to_date('2016-03-31 9:30:20', 'YYYY-MM-DD HH:MI:SS');
 count |  to_date   
-------+------------
     6 | 03-31-2017
(1 row)

-- select to_date with group by index having (result)
--Testcase 1060:
SELECT value1, to_date(str4, 'YYYY-MM-DD HH:MI:SS') FROM numeric_tbl GROUP BY 1,2 HAVING value1 > 1;
 value1 |  to_date   
--------+------------
    1.1 | 03-31-2017
    2.2 | 03-31-2017
    3.3 | 03-31-2017
(3 rows)

-- ===============================================================================
-- test to_number()
-- ===============================================================================
-- select to_number (stub function, EXPLAIN (COSTS OFF))
--Testcase 1061:
EXPLAIN (COSTS OFF)
SELECT to_number(str5, '99G999D9S'), to_number(str5, '99G999D9S'), to_number(str5, '99G999D9S') FROM numeric_tbl;
                                       QUERY PLAN                                       
----------------------------------------------------------------------------------------
 Foreign Scan on numeric_tbl
   Oracle query: SELECT /*eda37d47ebc56d46859814e9ec202376*/ "STR5" FROM  "NUMERIC_TBL"
(2 rows)

-- select to_number (stub function, result)
--Testcase 1062:
SELECT to_number(str5, '99G999D9S'), to_number(str5, '99G999D9S'), to_number(str5, '99G999D9S') FROM numeric_tbl;
 to_number | to_number | to_number 
-----------+-----------+-----------
  -12345.6 |  -12345.6 |  -12345.6
  -12345.6 |  -12345.6 |  -12345.6
  -12345.6 |  -12345.6 |  -12345.6
  -12345.6 |  -12345.6 |  -12345.6
  -12345.6 |  -12345.6 |  -12345.6
  -12345.6 |  -12345.6 |  -12345.6
(6 rows)

-- select to_number (stub function, not pushdown constraints, EXPLAIN (COSTS OFF))
--Testcase 1063:
EXPLAIN (COSTS OFF)
SELECT id, to_number(str5, '99G999D9S') FROM numeric_tbl WHERE to_hex(value2) = '64';
                                               QUERY PLAN                                               
--------------------------------------------------------------------------------------------------------
 Foreign Scan on numeric_tbl
   Filter: (to_hex(value2) = '64'::text)
   Oracle query: SELECT /*3529d5fd2387140113e6806260182dae*/ "ID", "VALUE2", "STR5" FROM  "NUMERIC_TBL"
(3 rows)

-- select to_number (stub function, not pushdown constraints, EXPLAIN (COSTS OFF))
--Testcase 1064:
SELECT id, to_number(str5, '99G999D9S') FROM numeric_tbl WHERE to_hex(value2) = '64';
 id | to_number 
----+-----------
  0 |  -12345.6
  1 |  -12345.6
  2 |  -12345.6
(3 rows)

-- select to_number (stub function, to_number in constraints, EXPLAIN (COSTS OFF))
--Testcase 1065:
EXPLAIN (COSTS OFF)
SELECT id, to_number(str5, '99G999D9S') FROM numeric_tbl WHERE to_number(str5, '99G999D9S') < 0;
                                                               QUERY PLAN                                                                
-----------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on numeric_tbl
   Oracle query: SELECT /*5b88310846607c3a137b326a9f54047b*/ "ID", "STR5" FROM  "NUMERIC_TBL" WHERE (to_number("STR5", '99G999D9S') < 0)
(2 rows)

-- select to_number (stub function, to_number in constraints, result)
--Testcase 1066:
SELECT id, to_number(str5, '99G999D9S') FROM numeric_tbl WHERE to_number(str5, '99G999D9S') < 0;
 id | to_number 
----+-----------
  0 |  -12345.6
  1 |  -12345.6
  2 |  -12345.6
  3 |  -12345.6
  4 |  -12345.6
  5 |  -12345.6
(6 rows)

-- select to_number with non pushdown func and explicit constant (EXPLAIN (COSTS OFF))
--Testcase 1067:
EXPLAIN (COSTS OFF)
SELECT to_number(str5, '99G999D9S'), pi(), 4.1 FROM numeric_tbl;
                                       QUERY PLAN                                       
----------------------------------------------------------------------------------------
 Foreign Scan on numeric_tbl
   Oracle query: SELECT /*eda37d47ebc56d46859814e9ec202376*/ "STR5" FROM  "NUMERIC_TBL"
(2 rows)

-- select to_number with non pushdown func and explicit constant (result)
--Testcase 1068:
SELECT to_number(str5, '99G999D9S'), pi(), 4.1 FROM numeric_tbl;
 to_number |        pi         | ?column? 
-----------+-------------------+----------
  -12345.6 | 3.141592653589793 |      4.1
  -12345.6 | 3.141592653589793 |      4.1
  -12345.6 | 3.141592653589793 |      4.1
  -12345.6 | 3.141592653589793 |      4.1
  -12345.6 | 3.141592653589793 |      4.1
  -12345.6 | 3.141592653589793 |      4.1
(6 rows)

-- select to_number with order by (EXPLAIN (COSTS OFF))
--Testcase 1069:
EXPLAIN (COSTS OFF)
SELECT value1, to_number(str5, '99G999D9S') FROM numeric_tbl ORDER BY to_number(str5, '99G999D9S'), 1 DESC;
                                                                                     QUERY PLAN                                                                                     
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on numeric_tbl
   Oracle query: SELECT /*71c370223fb66b117587a5410dabcc83*/ "VALUE1", "STR5" FROM  "NUMERIC_TBL" ORDER BY to_number("STR5", '99G999D9S') ASC NULLS LAST, "VALUE1" DESC NULLS FIRST
(2 rows)

-- select to_number with order by (result)
--Testcase 1070:
SELECT value1, to_number(str5, '99G999D9S') FROM numeric_tbl ORDER BY to_number(str5, '99G999D9S'), 1 DESC;
 value1 | to_number 
--------+-----------
    3.3 |  -12345.6
    2.2 |  -12345.6
    1.1 |  -12345.6
    0.3 |  -12345.6
    0.2 |  -12345.6
    0.1 |  -12345.6
(6 rows)

-- select to_number with group by (EXPLAIN (COSTS OFF))
--Testcase 1071:
EXPLAIN (COSTS OFF)
SELECT count(value1), to_number(str5, '99G999D9S') FROM numeric_tbl GROUP BY to_number(str5, '99G999D9S');
                                                                                QUERY PLAN                                                                                 
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan
   Oracle query: SELECT /*6c2251d666f9db54528ad8bead8e9779*/ count("VALUE1"), to_number("STR5", '99G999D9S') FROM  "NUMERIC_TBL" GROUP BY (to_number("STR5", '99G999D9S'))
(2 rows)

-- select to_number with group by (result)
--Testcase 1072:
SELECT count(value1), to_number(str5, '99G999D9S') FROM numeric_tbl GROUP BY to_number(str5, '99G999D9S');
 count | to_number 
-------+-----------
     6 |  -12345.6
(1 row)

-- select to_number with group by index (result)
--Testcase 1073:
SELECT value1, to_number(str5, '99G999D9S') FROM numeric_tbl GROUP BY 2,1;
 value1 | to_number 
--------+-----------
    0.1 |  -12345.6
    0.2 |  -12345.6
    0.3 |  -12345.6
    1.1 |  -12345.6
    2.2 |  -12345.6
    3.3 |  -12345.6
(6 rows)

-- select to_number with group by having (EXPLAIN (COSTS OFF))
--Testcase 1074:
EXPLAIN (COSTS OFF)
SELECT count(value1), to_number(str5, '99G999D9S') FROM numeric_tbl GROUP BY to_number(str5, '99G999D9S'), str1 HAVING to_number(str5, '99G999D9S') < 0;
                                                                                                              QUERY PLAN                                                                                                              
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan
   Oracle query: SELECT /*b0433b7ad9a89f67b4764e5f6e90bfa7*/ count("VALUE1"), to_number("STR5", '99G999D9S'), "STR1" FROM  "NUMERIC_TBL" WHERE (to_number("STR5", '99G999D9S') < 0) GROUP BY (to_number("STR5", '99G999D9S')), "STR1"
(2 rows)

-- select to_number with group by having (result)
--Testcase 1075:
SELECT count(value1), to_number(str5, '99G999D9S') FROM numeric_tbl GROUP BY to_number(str5, '99G999D9S'), str1 HAVING to_number(str5, '99G999D9S') < 0;
 count | to_number 
-------+-----------
     6 |  -12345.6
(1 row)

-- select to_number with group by index having (explain)
--Testcase 1076:
EXPLAIN (COSTS OFF)
SELECT value1, to_number(str5, '99G999D9S') FROM numeric_tbl GROUP BY 1,2 HAVING value1 > 1;;
                                                                                            QUERY PLAN                                                                                             
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan
   Oracle query: SELECT /*01ae9072358999c88cd739eb18f18dd7*/ "VALUE1", to_number("STR5", '99G999D9S') FROM  "NUMERIC_TBL" WHERE ("VALUE1" > 1) GROUP BY "VALUE1", (to_number("STR5", '99G999D9S'))
(2 rows)

-- select to_number with group by index having (result)
--Testcase 1077:
SELECT value1, to_number(str5, '99G999D9S') FROM numeric_tbl GROUP BY 1,2 HAVING value1 > 1;;
 value1 | to_number 
--------+-----------
    1.1 |  -12345.6
    2.2 |  -12345.6
    3.3 |  -12345.6
(3 rows)

-- End test for Numeric
--
-- test for date/time function
--
-- ADD_MONTHS()
-- select add_months (stub function, explain)
--Testcase 1078:
EXPLAIN (COSTS OFF)
SELECT add_months(c2, 10), add_months(c2, '10') FROM time_tbl;
                                    QUERY PLAN                                     
-----------------------------------------------------------------------------------
 Foreign Scan on time_tbl
   Oracle query: SELECT /*a50e2ec7624cc0c1ab90cca911a60b5a*/ "C2" FROM  "TIME_TBL"
(2 rows)

-- select add_months (stub function, result)
--Testcase 1079:
SELECT add_months(c2, 10), add_months(c2, '10') FROM time_tbl;
ERROR:  stub add_months(date, integer) is called
CONTEXT:  PL/pgSQL function add_months(date,integer) line 3 at RAISE
-- select add_months (stub function, explain)
--Testcase 1080:
EXPLAIN (COSTS OFF)
SELECT add_months(c2, -10), add_months('01-Aug-03', '10') FROM time_tbl;
                                    QUERY PLAN                                     
-----------------------------------------------------------------------------------
 Foreign Scan on time_tbl
   Oracle query: SELECT /*a50e2ec7624cc0c1ab90cca911a60b5a*/ "C2" FROM  "TIME_TBL"
(2 rows)

-- select add_months (stub function, result)
--Testcase 1081:
SELECT add_months(c2, -10), add_months('01-Aug-03', '10') FROM time_tbl;
ERROR:  stub add_months(date, integer) is called
CONTEXT:  PL/pgSQL function add_months(date,integer) line 3 at RAISE
-- CURRENT_DATE()
-- select oracle_current_date (stub function, explain)
--Testcase 1082:
EXPLAIN (COSTS OFF)
SELECT oracle_current_date() FROM time_tbl;
                                    QUERY PLAN                                     
-----------------------------------------------------------------------------------
 Foreign Scan on time_tbl
   Oracle query: SELECT /*0e506c6af6345b33c1443508d5c649a5*/ NULL FROM  "TIME_TBL"
(2 rows)

-- select oracle_current_date with months_between to make stable result (stub function, result)
--Testcase 1083:
SELECT months_between(oracle_current_date(), oracle_current_date()) FROM time_tbl GROUP BY 1;
 months_between 
----------------
              0
(1 row)

-- select oracle_current_date (stub function, not pushdown constraints, explain)
--Testcase 1084:
EXPLAIN (COSTS OFF)
SELECT oracle_current_date() FROM time_tbl WHERE to_hex(id) > '0';
                                    QUERY PLAN                                     
-----------------------------------------------------------------------------------
 Foreign Scan on time_tbl
   Filter: (to_hex(id) > '0'::text)
   Oracle query: SELECT /*acd0094b8b944bd7932b93133f07515d*/ "ID" FROM  "TIME_TBL"
(3 rows)

-- select oracle_current_date with months_between to make stable result (stub function, result)
--Testcase 1085:
SELECT months_between(oracle_current_date(), oracle_current_date()) FROM time_tbl WHERE to_hex(id) > '0' GROUP BY 1;
ERROR:  stub oracle_current_date() is called
CONTEXT:  PL/pgSQL function oracle_current_date() line 3 at RAISE
-- select oracle_current_date (stub function, pushdown constraints, explain)
--Testcase 1086:
EXPLAIN (COSTS OFF)
SELECT oracle_current_date() FROM time_tbl WHERE id = 1;
                                             QUERY PLAN                                             
----------------------------------------------------------------------------------------------------
 Foreign Scan on time_tbl
   Oracle query: SELECT /*8790c434535e1af8c9795e2c39f24bde*/ NULL FROM  "TIME_TBL" WHERE ("ID" = 1)
(2 rows)

-- select oracle_current_date with months_between to make stable result (stub function, result)
--Testcase 1087:
SELECT months_between(oracle_current_date(), oracle_current_date()) FROM time_tbl WHERE id = 1 GROUP BY 1;
 months_between 
----------------
              0
(1 row)

-- select oracle_current_date (stub function, oracle_current_date in constraints, explain)
--Testcase 1088:
EXPLAIN (COSTS OFF)
SELECT oracle_current_date() FROM time_tbl WHERE oracle_current_date() > '2000-01-01';
                                                                     QUERY PLAN                                                                     
----------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on time_tbl
   Oracle query: SELECT /*89b3f2e1460ac6f086105eb71006c2a4*/ NULL FROM  "TIME_TBL" WHERE (current_date > (CAST ('2000-01-01 00:00:00 AD' AS DATE)))
(2 rows)

-- select oracle_current_date with months_between to make stable result (stub function, result)
--Testcase 1089:
SELECT months_between(oracle_current_date(), oracle_current_date()) FROM time_tbl WHERE oracle_current_date() > '2000-01-01' GROUP BY 1;
 months_between 
----------------
              0
(1 row)

-- oracle_current_date in constrains (stub function, explain)
--Testcase 1090:
EXPLAIN (COSTS OFF)
SELECT c1 FROM time_tbl WHERE oracle_current_date() > '2000-01-01';
                                                                     QUERY PLAN                                                                     
----------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on time_tbl
   Oracle query: SELECT /*816821f65da96a7a61e2d82b6d61f18d*/ "C1" FROM  "TIME_TBL" WHERE (current_date > (CAST ('2000-01-01 00:00:00 AD' AS DATE)))
(2 rows)

-- oracle_current_date in constrains (stub function, result)
--Testcase 1091:
SELECT c1 FROM time_tbl WHERE oracle_current_date() > '2000-01-01';
                 c1                  
-------------------------------------
 Sat Jan 02 02:10:30.123456 2021 PST
 Fri Jan 01 18:12:12.654321 2021 PST
 Sat Jan 09 23:12:12.112233 2021 PST
 Fri Jan 15 02:59:59.654321 2021 PST
 Thu Jan 28 10:59:59.000102 2021 PST
(5 rows)

-- oracle_current_date as parameter of add_moths(stub function, explain)
--Testcase 1092:
EXPLAIN (COSTS OFF)
SELECT c1 FROM time_tbl WHERE add_months(oracle_current_date(), 31) > '2000-01-01';
                                                                             QUERY PLAN                                                                             
--------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on time_tbl
   Oracle query: SELECT /*190d2a3963fcb830883e5b4de11ce555*/ "C1" FROM  "TIME_TBL" WHERE (add_months(current_date, 31) > (CAST ('2000-01-01 00:00:00 AD' AS DATE)))
(2 rows)

-- oracle_current_date as parameter of add_months(stub function, result)
--Testcase 1093:
SELECT c1 FROM time_tbl WHERE add_months(oracle_current_date(), 31) > '2000-01-01';
                 c1                  
-------------------------------------
 Sat Jan 02 02:10:30.123456 2021 PST
 Fri Jan 01 18:12:12.654321 2021 PST
 Sat Jan 09 23:12:12.112233 2021 PST
 Fri Jan 15 02:59:59.654321 2021 PST
 Thu Jan 28 10:59:59.000102 2021 PST
(5 rows)

-- select oracle_current_date and agg (pushdown, explain)
--Testcase 1094:
EXPLAIN (COSTS OFF)
SELECT oracle_current_date(), sum(id) FROM time_tbl;
                                              QUERY PLAN                                              
------------------------------------------------------------------------------------------------------
 Foreign Scan
   Oracle query: SELECT /*1eb9d266987bdb0c38ca55a76f29176d*/ current_date, sum("ID") FROM  "TIME_TBL"
(2 rows)

-- select oracle_current_date with months_between to make stable result (stub function, result)
--Testcase 1095:
SELECT months_between(oracle_current_date(), oracle_current_date()), sum(id) FROM time_tbl GROUP BY 1;
 months_between | sum 
----------------+-----
              0 |  10
(1 row)

-- select oracle_current_date with order by (explain)
--Testcase 1096:
EXPLAIN (COSTS OFF)
SELECT oracle_current_date(), c1 FROM time_tbl ORDER BY c1;
                                                          QUERY PLAN                                                          
------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on time_tbl
   Oracle query: SELECT /*dcb863518eac902c304229b774fa9bd5*/ current_date, "C1" FROM  "TIME_TBL" ORDER BY "C1" ASC NULLS LAST
(2 rows)

-- select oracle_current_date with months_between to make stable result (stub function, result)
--Testcase 1097:
SELECT months_between(oracle_current_date(), oracle_current_date()), c1 FROM time_tbl ORDER BY c1;
 months_between |                 c1                  
----------------+-------------------------------------
              0 | Fri Jan 01 18:12:12.654321 2021 PST
              0 | Sat Jan 02 02:10:30.123456 2021 PST
              0 | Sat Jan 09 23:12:12.112233 2021 PST
              0 | Fri Jan 15 02:59:59.654321 2021 PST
              0 | Thu Jan 28 10:59:59.000102 2021 PST
(5 rows)

-- select oracle_current_date with order by index (explain)
--Testcase 1098:
EXPLAIN (COSTS OFF)
SELECT oracle_current_date(), c1 FROM time_tbl ORDER BY 2;
                                                          QUERY PLAN                                                          
------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on time_tbl
   Oracle query: SELECT /*dcb863518eac902c304229b774fa9bd5*/ current_date, "C1" FROM  "TIME_TBL" ORDER BY "C1" ASC NULLS LAST
(2 rows)

-- select oracle_current_date with months_between to make stable result (stub function, result)
--Testcase 1099:
SELECT months_between(oracle_current_date(), oracle_current_date()), c1 FROM time_tbl ORDER BY 2;
 months_between |                 c1                  
----------------+-------------------------------------
              0 | Fri Jan 01 18:12:12.654321 2021 PST
              0 | Sat Jan 02 02:10:30.123456 2021 PST
              0 | Sat Jan 09 23:12:12.112233 2021 PST
              0 | Fri Jan 15 02:59:59.654321 2021 PST
              0 | Thu Jan 28 10:59:59.000102 2021 PST
(5 rows)

-- oracle_current_date constraints with order by (explain)
--Testcase 1100:
EXPLAIN (COSTS OFF)
SELECT c1 FROM time_tbl WHERE add_months(oracle_current_date(), 31) > '2000-01-01' ORDER BY c1;
                                                                                           QUERY PLAN                                                                                            
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on time_tbl
   Oracle query: SELECT /*0e6c52dfe83580e426416f231c10dca3*/ "C1" FROM  "TIME_TBL" WHERE (add_months(current_date, 31) > (CAST ('2000-01-01 00:00:00 AD' AS DATE))) ORDER BY "C1" ASC NULLS LAST
(2 rows)

-- oracle_current_date constraints with order by (result)
--Testcase 1101:
SELECT c1 FROM time_tbl WHERE add_months(oracle_current_date(), 31) > '2000-01-01' ORDER BY c1;
                 c1                  
-------------------------------------
 Fri Jan 01 18:12:12.654321 2021 PST
 Sat Jan 02 02:10:30.123456 2021 PST
 Sat Jan 09 23:12:12.112233 2021 PST
 Fri Jan 15 02:59:59.654321 2021 PST
 Thu Jan 28 10:59:59.000102 2021 PST
(5 rows)

-- select oracle_current_date with group by (explain)
--Testcase 1102:
EXPLAIN (COSTS OFF)
SELECT oracle_current_date(), c1 FROM time_tbl GROUP BY c1;
                                                  QUERY PLAN                                                   
---------------------------------------------------------------------------------------------------------------
 Foreign Scan
   Oracle query: SELECT /*54668758999d7c19914c17b3e9944ef2*/ current_date, "C1" FROM  "TIME_TBL" GROUP BY "C1"
(2 rows)

-- select oracle_current_date with months_between to make stable result (stub function, result)
--Testcase 1103:
SELECT months_between(oracle_current_date(), oracle_current_date()), c1 FROM time_tbl GROUP BY c1;
 months_between |                 c1                  
----------------+-------------------------------------
              0 | Fri Jan 01 18:12:12.654321 2021 PST
              0 | Sat Jan 02 02:10:30.123456 2021 PST
              0 | Sat Jan 09 23:12:12.112233 2021 PST
              0 | Fri Jan 15 02:59:59.654321 2021 PST
              0 | Thu Jan 28 10:59:59.000102 2021 PST
(5 rows)

-- select oracle_current_date with group by index (explain)
--Testcase 1104:
EXPLAIN (COSTS OFF)
SELECT oracle_current_date(), c1 FROM time_tbl GROUP BY 2;
                                                  QUERY PLAN                                                   
---------------------------------------------------------------------------------------------------------------
 Foreign Scan
   Oracle query: SELECT /*54668758999d7c19914c17b3e9944ef2*/ current_date, "C1" FROM  "TIME_TBL" GROUP BY "C1"
(2 rows)

-- select oracle_current_date with months_between to make stable result (stub function, result)
--Testcase 1105:
SELECT months_between(oracle_current_date(), oracle_current_date()), c1 FROM time_tbl GROUP BY 2;
 months_between |                 c1                  
----------------+-------------------------------------
              0 | Fri Jan 01 18:12:12.654321 2021 PST
              0 | Sat Jan 02 02:10:30.123456 2021 PST
              0 | Sat Jan 09 23:12:12.112233 2021 PST
              0 | Fri Jan 15 02:59:59.654321 2021 PST
              0 | Thu Jan 28 10:59:59.000102 2021 PST
(5 rows)

-- select oracle_current_date with group by having (explain)
--Testcase 1106:
EXPLAIN (COSTS OFF)
SELECT oracle_current_date(), c1 FROM time_tbl GROUP BY oracle_current_date(), c1 HAVING oracle_current_date() > '2000-01-01';
                                                                                           QUERY PLAN                                                                                            
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan
   Oracle query: SELECT /*ceb39868ebc5ae688ea349854e193496*/ current_date, "C1" FROM  "TIME_TBL" GROUP BY (current_date), "C1" HAVING (current_date > (CAST ('2000-01-01 00:00:00 AD' AS DATE)))
(2 rows)

-- select oracle_current_date with months_between to make stable result (stub function, result)
--Testcase 1107:
SELECT months_between(oracle_current_date(), oracle_current_date()), c1 FROM time_tbl GROUP BY oracle_current_date(), c1 HAVING oracle_current_date() > '2000-01-01';
 months_between |                 c1                  
----------------+-------------------------------------
              0 | Fri Jan 01 18:12:12.654321 2021 PST
              0 | Sat Jan 02 02:10:30.123456 2021 PST
              0 | Sat Jan 09 23:12:12.112233 2021 PST
              0 | Fri Jan 15 02:59:59.654321 2021 PST
              0 | Thu Jan 28 10:59:59.000102 2021 PST
(5 rows)

-- select oracle_current_date with group by index having (explain)
--Testcase 1108:
EXPLAIN (COSTS OFF)
SELECT oracle_current_date(), c1 FROM time_tbl GROUP BY 2,1 HAVING oracle_current_date() > '2000-01-01';
                                                                                           QUERY PLAN                                                                                            
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan
   Oracle query: SELECT /*2912859e9eb7fa969df3829f000a5090*/ current_date, "C1" FROM  "TIME_TBL" GROUP BY "C1", (current_date) HAVING (current_date > (CAST ('2000-01-01 00:00:00 AD' AS DATE)))
(2 rows)

-- select oracle_current_date with months_between to make stable result (stub function, result)
--Testcase 1109:
SELECT months_between(oracle_current_date(), oracle_current_date()), c1 FROM time_tbl GROUP BY 2,1 HAVING oracle_current_date() > '2000-01-01';
 months_between |                 c1                  
----------------+-------------------------------------
              0 | Fri Jan 01 18:12:12.654321 2021 PST
              0 | Sat Jan 02 02:10:30.123456 2021 PST
              0 | Sat Jan 09 23:12:12.112233 2021 PST
              0 | Fri Jan 15 02:59:59.654321 2021 PST
              0 | Thu Jan 28 10:59:59.000102 2021 PST
(5 rows)

-- oracle_current_date constraints with group by (explain)
--Testcase 1110:
EXPLAIN (COSTS OFF)
SELECT c1 FROM time_tbl WHERE add_months(oracle_current_date(), 31) > '2000-01-01' GROUP BY c1;
                                                                                    QUERY PLAN                                                                                    
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan
   Oracle query: SELECT /*7de85c07a6f8c041164437bf8d4ec0e4*/ "C1" FROM  "TIME_TBL" WHERE (add_months(current_date, 31) > (CAST ('2000-01-01 00:00:00 AD' AS DATE))) GROUP BY "C1"
(2 rows)

-- oracle_current_date constraints with group by (result)
--Testcase 1111:
SELECT c1 FROM time_tbl WHERE add_months(oracle_current_date(), 31) > '2000-01-01' GROUP BY c1;
                 c1                  
-------------------------------------
 Fri Jan 01 18:12:12.654321 2021 PST
 Sat Jan 02 02:10:30.123456 2021 PST
 Sat Jan 09 23:12:12.112233 2021 PST
 Fri Jan 15 02:59:59.654321 2021 PST
 Thu Jan 28 10:59:59.000102 2021 PST
(5 rows)

-- select oracle_current_date with alias (explain)
--Testcase 1112:
EXPLAIN (COSTS OFF)
SELECT oracle_current_date() as oracle_current_date1 FROM time_tbl;
                                    QUERY PLAN                                     
-----------------------------------------------------------------------------------
 Foreign Scan on time_tbl
   Oracle query: SELECT /*0e506c6af6345b33c1443508d5c649a5*/ NULL FROM  "TIME_TBL"
(2 rows)

-- CURRENT_TIMESTAMP
-- oracle_current_timestamp constraints (explain)
--Testcase 1113:
EXPLAIN (COSTS OFF)
SELECT oracle_current_timestamp() FROM time_tbl;
                                    QUERY PLAN                                     
-----------------------------------------------------------------------------------
 Foreign Scan on time_tbl
   Oracle query: SELECT /*0e506c6af6345b33c1443508d5c649a5*/ NULL FROM  "TIME_TBL"
(2 rows)

-- oracle_current_timestamp constraints (result)
--Testcase 1114:
SELECT oracle_current_timestamp() - oracle_current_timestamp() FROM time_tbl;
ERROR:  stub oracle_current_timestamp() is called
CONTEXT:  PL/pgSQL function oracle_current_timestamp() line 3 at RAISE
-- select oracle_current_timestamp (stub function, not pushdown constraints, explain)
--Testcase 1115:
EXPLAIN (COSTS OFF)
SELECT oracle_current_timestamp() - oracle_current_timestamp() FROM time_tbl WHERE to_hex(id) > '0';
                                    QUERY PLAN                                     
-----------------------------------------------------------------------------------
 Foreign Scan on time_tbl
   Filter: (to_hex(id) > '0'::text)
   Oracle query: SELECT /*acd0094b8b944bd7932b93133f07515d*/ "ID" FROM  "TIME_TBL"
(3 rows)

-- select oracle_current_timestamp (stub function, not pushdown constraints, result)
--Testcase 1116:
SELECT oracle_current_timestamp() - oracle_current_timestamp() FROM time_tbl WHERE to_hex(id) > '0';
ERROR:  stub oracle_current_timestamp() is called
CONTEXT:  PL/pgSQL function oracle_current_timestamp() line 3 at RAISE
-- select oracle_current_timestamp (stub function, pushdown constraints, explain)
--Testcase 1117:
EXPLAIN (COSTS OFF)
SELECT oracle_current_timestamp() FROM time_tbl WHERE id = 1;
                                             QUERY PLAN                                             
----------------------------------------------------------------------------------------------------
 Foreign Scan on time_tbl
   Oracle query: SELECT /*8790c434535e1af8c9795e2c39f24bde*/ NULL FROM  "TIME_TBL" WHERE ("ID" = 1)
(2 rows)

-- select oracle_current_timestamp (stub function, pushdown constraints, result)
--Testcase 1118:
SELECT oracle_current_timestamp() - oracle_current_timestamp() FROM time_tbl WHERE id = 1;
ERROR:  stub oracle_current_timestamp() is called
CONTEXT:  PL/pgSQL function oracle_current_timestamp() line 3 at RAISE
-- select oracle_current_timestamp (stub function, oracle_current_timestamp in constraints, explain)
--Testcase 1119:
EXPLAIN (COSTS OFF)
SELECT oracle_current_timestamp() FROM time_tbl WHERE oracle_current_timestamp() > '2000-01-01 00:00:00'::timestamp;
                                                                             QUERY PLAN                                                                              
---------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on time_tbl
   Oracle query: SELECT /*fdd744b5021d0140d6a9dcd0236314cb*/ NULL FROM  "TIME_TBL" WHERE (current_timestamp > (CAST ('2000-01-01 00:00:00.000000 AD' AS TIMESTAMP)))
(2 rows)

-- select oracle_current_timestamp (stub function, oracle_current_timestamp in constraints, result)
--Testcase 1120:
SELECT oracle_current_timestamp() - oracle_current_timestamp() FROM time_tbl WHERE oracle_current_timestamp() > '2000-01-01 00:00:00'::timestamp;
ERROR:  stub oracle_current_timestamp() is called
CONTEXT:  PL/pgSQL function oracle_current_timestamp() line 3 at RAISE
-- oracle_current_timestamp in constrains (stub function, explain)
--Testcase 1121:
EXPLAIN (COSTS OFF)
SELECT c1 FROM time_tbl WHERE oracle_current_timestamp() > '2000-01-01 00:00:00'::timestamp;
                                                                             QUERY PLAN                                                                              
---------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on time_tbl
   Oracle query: SELECT /*6e026ac9f5f4994bef79ce52225cdacd*/ "C1" FROM  "TIME_TBL" WHERE (current_timestamp > (CAST ('2000-01-01 00:00:00.000000 AD' AS TIMESTAMP)))
(2 rows)

-- oracle_current_timestamp in constrains (stub function, result)
--Testcase 1122:
SELECT c1 FROM time_tbl WHERE oracle_current_timestamp() > '2000-01-01 00:00:00'::timestamp;
                 c1                  
-------------------------------------
 Sat Jan 02 02:10:30.123456 2021 PST
 Fri Jan 01 18:12:12.654321 2021 PST
 Sat Jan 09 23:12:12.112233 2021 PST
 Fri Jan 15 02:59:59.654321 2021 PST
 Thu Jan 28 10:59:59.000102 2021 PST
(5 rows)

-- select oracle_current_timestamp and agg (pushdown, explain)
--Testcase 1123:
EXPLAIN (COSTS OFF)
SELECT oracle_current_timestamp(), sum(id) FROM time_tbl;
                                                QUERY PLAN                                                 
-----------------------------------------------------------------------------------------------------------
 Foreign Scan
   Oracle query: SELECT /*b6d8b219c8953a05957234c9e635cd0b*/ current_timestamp, sum("ID") FROM  "TIME_TBL"
(2 rows)

-- select oracle_current_timestamp and agg (pushdown, result)
--Testcase 1124:
SELECT oracle_current_timestamp() - oracle_current_timestamp(), sum(id) FROM time_tbl;
 ?column? | sum 
----------+-----
 @ 0      |  10
(1 row)

-- select oracle_current_timestamp with order by (explain)
--Testcase 1125:
EXPLAIN (COSTS OFF)
SELECT oracle_current_timestamp(), c1 FROM time_tbl ORDER BY oracle_current_timestamp();
                                       QUERY PLAN                                        
-----------------------------------------------------------------------------------------
 Sort
   Sort Key: (oracle_current_timestamp())
   ->  Foreign Scan on time_tbl
         Oracle query: SELECT /*d42989c7c58669f31483b6d9f2df380d*/ "C1" FROM  "TIME_TBL"
(4 rows)

-- select oracle_current_timestamp with order by (result)
--Testcase 1126:
SELECT oracle_current_timestamp() - oracle_current_timestamp(), c1 FROM time_tbl ORDER BY oracle_current_timestamp();
ERROR:  stub oracle_current_timestamp() is called
CONTEXT:  PL/pgSQL function oracle_current_timestamp() line 3 at RAISE
-- select oracle_current_timestamp with order by index (explain)
--Testcase 1127:
EXPLAIN (COSTS OFF)
SELECT oracle_current_timestamp(), c1 FROM time_tbl ORDER BY 1;
                                       QUERY PLAN                                        
-----------------------------------------------------------------------------------------
 Sort
   Sort Key: (oracle_current_timestamp())
   ->  Foreign Scan on time_tbl
         Oracle query: SELECT /*d42989c7c58669f31483b6d9f2df380d*/ "C1" FROM  "TIME_TBL"
(4 rows)

-- select oracle_current_timestamp with order by index (result)
--Testcase 1128:
SELECT oracle_current_timestamp() - oracle_current_timestamp(), c1 FROM time_tbl ORDER BY 1;
ERROR:  stub oracle_current_timestamp() is called
CONTEXT:  PL/pgSQL function oracle_current_timestamp() line 3 at RAISE
-- select oracle_current_timestamp with group by (explain)
--Testcase 1129:
EXPLAIN (COSTS OFF)
SELECT oracle_current_timestamp(), c1 FROM time_tbl GROUP BY c1;
                                                     QUERY PLAN                                                     
--------------------------------------------------------------------------------------------------------------------
 Foreign Scan
   Oracle query: SELECT /*598eaf0b6e0da7fc04f3bea7b172ad0b*/ current_timestamp, "C1" FROM  "TIME_TBL" GROUP BY "C1"
(2 rows)

-- select oracle_current_timestamp with group by (result)
--Testcase 1130:
SELECT oracle_current_timestamp() - oracle_current_timestamp(), c1 FROM time_tbl GROUP BY c1;
 ?column? |                 c1                  
----------+-------------------------------------
 @ 0      | Fri Jan 01 18:12:12.654321 2021 PST
 @ 0      | Sat Jan 02 02:10:30.123456 2021 PST
 @ 0      | Sat Jan 09 23:12:12.112233 2021 PST
 @ 0      | Fri Jan 15 02:59:59.654321 2021 PST
 @ 0      | Thu Jan 28 10:59:59.000102 2021 PST
(5 rows)

-- select oracle_current_timestamp with group by index (explain)
--Testcase 1131:
EXPLAIN (COSTS OFF)
SELECT oracle_current_timestamp(), c1 FROM time_tbl GROUP BY 2;
                                                     QUERY PLAN                                                     
--------------------------------------------------------------------------------------------------------------------
 Foreign Scan
   Oracle query: SELECT /*598eaf0b6e0da7fc04f3bea7b172ad0b*/ current_timestamp, "C1" FROM  "TIME_TBL" GROUP BY "C1"
(2 rows)

-- select oracle_current_timestamp with group by index (result)
--Testcase 1132:
SELECT oracle_current_timestamp() - oracle_current_timestamp(), c1 FROM time_tbl GROUP BY 2;
 ?column? |                 c1                  
----------+-------------------------------------
 @ 0      | Fri Jan 01 18:12:12.654321 2021 PST
 @ 0      | Sat Jan 02 02:10:30.123456 2021 PST
 @ 0      | Sat Jan 09 23:12:12.112233 2021 PST
 @ 0      | Fri Jan 15 02:59:59.654321 2021 PST
 @ 0      | Thu Jan 28 10:59:59.000102 2021 PST
(5 rows)

-- select oracle_current_timestamp with group by having (explain)
--Testcase 1133:
EXPLAIN (COSTS OFF)
SELECT oracle_current_timestamp(), c1 FROM time_tbl GROUP BY oracle_current_timestamp(),c1 HAVING oracle_current_timestamp() > '2000-01-01 00:00:00'::timestamp;
                                                                                                         QUERY PLAN                                                                                                         
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan
   Oracle query: SELECT /*6892716cdd5e3f59424c93d0d4c68850*/ current_timestamp, "C1" FROM  "TIME_TBL" GROUP BY (current_timestamp), "C1" HAVING (current_timestamp > (CAST ('2000-01-01 00:00:00.000000 AD' AS TIMESTAMP)))
(2 rows)

-- select oracle_current_timestamp with group by having (result)
--Testcase 1134:
SELECT oracle_current_timestamp() - oracle_current_timestamp(), c1 FROM time_tbl GROUP BY oracle_current_timestamp(),c1 HAVING oracle_current_timestamp() > '2000-01-01 00:00:00'::timestamp;
 ?column? |                 c1                  
----------+-------------------------------------
 @ 0      | Fri Jan 01 18:12:12.654321 2021 PST
 @ 0      | Sat Jan 02 02:10:30.123456 2021 PST
 @ 0      | Sat Jan 09 23:12:12.112233 2021 PST
 @ 0      | Fri Jan 15 02:59:59.654321 2021 PST
 @ 0      | Thu Jan 28 10:59:59.000102 2021 PST
(5 rows)

-- select oracle_current_timestamp with group by index having (explain)
--Testcase 1135:
EXPLAIN (COSTS OFF)
SELECT oracle_current_timestamp(), c1 FROM time_tbl GROUP BY 2,1 HAVING oracle_current_timestamp() > '2000-01-01 00:00:00'::timestamp;
                                                                                                         QUERY PLAN                                                                                                         
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan
   Oracle query: SELECT /*2c2176ebf088be90219d80434d621652*/ current_timestamp, "C1" FROM  "TIME_TBL" GROUP BY "C1", (current_timestamp) HAVING (current_timestamp > (CAST ('2000-01-01 00:00:00.000000 AD' AS TIMESTAMP)))
(2 rows)

-- select oracle_current_timestamp with group by index having (result)
--Testcase 1136:
SELECT oracle_current_timestamp() - oracle_current_timestamp(), c1 FROM time_tbl GROUP BY 2,1 HAVING oracle_current_timestamp() > '2000-01-01 00:00:00'::timestamp;
 ?column? |                 c1                  
----------+-------------------------------------
 @ 0      | Fri Jan 01 18:12:12.654321 2021 PST
 @ 0      | Sat Jan 02 02:10:30.123456 2021 PST
 @ 0      | Sat Jan 09 23:12:12.112233 2021 PST
 @ 0      | Fri Jan 15 02:59:59.654321 2021 PST
 @ 0      | Thu Jan 28 10:59:59.000102 2021 PST
(5 rows)

-- select oracle_current_timestamp with alias (explain)
--Testcase 1137:
EXPLAIN (COSTS OFF)
SELECT oracle_current_timestamp() as oracle_current_timestamp1 FROM time_tbl;
                                    QUERY PLAN                                     
-----------------------------------------------------------------------------------
 Foreign Scan on time_tbl
   Oracle query: SELECT /*0e506c6af6345b33c1443508d5c649a5*/ NULL FROM  "TIME_TBL"
(2 rows)

-- select oracle_current_timestamp with alias (result)
--Testcase 1138:
SELECT (oracle_current_timestamp() - oracle_current_timestamp()) as oracle_current_timestamp_diff FROM time_tbl;
ERROR:  stub oracle_current_timestamp() is called
CONTEXT:  PL/pgSQL function oracle_current_timestamp() line 3 at RAISE
-- LOCALTIMESTAMP, LOCALTIMESTAMP()
-- select oracle_localtimestamp (stub function, explain)
--Testcase 1139:
EXPLAIN (COSTS OFF)
SELECT oracle_localtimestamp() FROM time_tbl;
                                    QUERY PLAN                                     
-----------------------------------------------------------------------------------
 Foreign Scan on time_tbl
   Oracle query: SELECT /*0e506c6af6345b33c1443508d5c649a5*/ NULL FROM  "TIME_TBL"
(2 rows)

-- select oracle_localtimestamp (stub function, result)
-- result is different from expected one
--Testcase 1140:
SELECT oracle_localtimestamp() - oracle_localtimestamp() FROM time_tbl;
ERROR:  stub oracle_localtimestamp() is called
CONTEXT:  PL/pgSQL function oracle_localtimestamp() line 3 at RAISE
-- select oracle_localtimestamp (stub function, not pushdown constraints, explain)
--Testcase 1141:
EXPLAIN (COSTS OFF)
SELECT oracle_localtimestamp() FROM time_tbl WHERE to_hex(id) > '0';
                                    QUERY PLAN                                     
-----------------------------------------------------------------------------------
 Foreign Scan on time_tbl
   Filter: (to_hex(id) > '0'::text)
   Oracle query: SELECT /*acd0094b8b944bd7932b93133f07515d*/ "ID" FROM  "TIME_TBL"
(3 rows)

-- select oracle_localtimestamp (stub function, not pushdown constraints, result)
--Testcase 1142:
SELECT oracle_localtimestamp() - oracle_localtimestamp() FROM time_tbl WHERE to_hex(id) > '0';
ERROR:  stub oracle_localtimestamp() is called
CONTEXT:  PL/pgSQL function oracle_localtimestamp() line 3 at RAISE
-- select oracle_localtimestamp (stub function, pushdown constraints, explain)
--Testcase 1143:
EXPLAIN (COSTS OFF)
SELECT oracle_localtimestamp() FROM time_tbl WHERE id = 1;
                                             QUERY PLAN                                             
----------------------------------------------------------------------------------------------------
 Foreign Scan on time_tbl
   Oracle query: SELECT /*8790c434535e1af8c9795e2c39f24bde*/ NULL FROM  "TIME_TBL" WHERE ("ID" = 1)
(2 rows)

-- select oracle_localtimestamp (stub function, pushdown constraints, result)
--Testcase 1144:
SELECT oracle_localtimestamp() - oracle_localtimestamp() FROM time_tbl WHERE id = 1;
ERROR:  stub oracle_localtimestamp() is called
CONTEXT:  PL/pgSQL function oracle_localtimestamp() line 3 at RAISE
-- select oracle_localtimestamp (stub function, oracle_localtimestamp in constraints, explain)
--Testcase 1145:
EXPLAIN (COSTS OFF)
SELECT oracle_localtimestamp() FROM time_tbl WHERE oracle_localtimestamp() > '2000-01-01 00:00:00'::timestamp;
                                                                            QUERY PLAN                                                                            
------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on time_tbl
   Oracle query: SELECT /*8704b3f67aa2d640d2b2a9ef78aa434b*/ NULL FROM  "TIME_TBL" WHERE (localtimestamp > (CAST ('2000-01-01 00:00:00.000000 AD' AS TIMESTAMP)))
(2 rows)

-- select oracle_localtimestamp (stub function, oracle_localtimestamp in constraints, result)
--Testcase 1146:
SELECT oracle_localtimestamp() - oracle_localtimestamp() FROM time_tbl WHERE oracle_localtimestamp() > '2000-01-01 00:00:00'::timestamp;
ERROR:  stub oracle_localtimestamp() is called
CONTEXT:  PL/pgSQL function oracle_localtimestamp() line 3 at RAISE
-- oracle_localtimestamp in constrains (stub function, explain)
--Testcase 1147:
EXPLAIN (COSTS OFF)
SELECT c1 FROM time_tbl WHERE oracle_localtimestamp() > '2000-01-01 00:00:00'::timestamp;
                                                                            QUERY PLAN                                                                            
------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on time_tbl
   Oracle query: SELECT /*085cd7d0b05cd788ac0834a8213c7b65*/ "C1" FROM  "TIME_TBL" WHERE (localtimestamp > (CAST ('2000-01-01 00:00:00.000000 AD' AS TIMESTAMP)))
(2 rows)

-- oracle_localtimestamp in constrains (stub function, result)
--Testcase 1148:
SELECT c1 FROM time_tbl WHERE oracle_localtimestamp() > '2000-01-01 00:00:00'::timestamp;
                 c1                  
-------------------------------------
 Sat Jan 02 02:10:30.123456 2021 PST
 Fri Jan 01 18:12:12.654321 2021 PST
 Sat Jan 09 23:12:12.112233 2021 PST
 Fri Jan 15 02:59:59.654321 2021 PST
 Thu Jan 28 10:59:59.000102 2021 PST
(5 rows)

-- select oracle_localtimestamp and agg (pushdown, explain)
--Testcase 1149:
EXPLAIN (COSTS OFF)
SELECT oracle_localtimestamp(), sum(id) FROM time_tbl;
                                               QUERY PLAN                                               
--------------------------------------------------------------------------------------------------------
 Foreign Scan
   Oracle query: SELECT /*f096e5e18935ddc4cf106a570e741773*/ localtimestamp, sum("ID") FROM  "TIME_TBL"
(2 rows)

-- select oracle_localtimestamp and agg (pushdown, result)
-- result is different from expected one
--Testcase 1150:
SELECT oracle_localtimestamp() - oracle_localtimestamp(), sum(id) FROM time_tbl;
 ?column? | sum 
----------+-----
 @ 0      |  10
(1 row)

-- select oracle_localtimestamp with order by (explain)
--Testcase 1151:
EXPLAIN (COSTS OFF)
SELECT oracle_localtimestamp(), c1 FROM time_tbl ORDER BY oracle_localtimestamp();
                                       QUERY PLAN                                        
-----------------------------------------------------------------------------------------
 Sort
   Sort Key: (oracle_localtimestamp())
   ->  Foreign Scan on time_tbl
         Oracle query: SELECT /*d42989c7c58669f31483b6d9f2df380d*/ "C1" FROM  "TIME_TBL"
(4 rows)

-- select oracle_localtimestamp with order by (result)
--Testcase 1152:
SELECT oracle_localtimestamp() - oracle_localtimestamp(), c1 FROM time_tbl ORDER BY oracle_localtimestamp();
ERROR:  stub oracle_localtimestamp() is called
CONTEXT:  PL/pgSQL function oracle_localtimestamp() line 3 at RAISE
-- select oracle_localtimestamp with order by index (explain)
--Testcase 1153:
EXPLAIN (COSTS OFF)
SELECT oracle_localtimestamp(), c1 FROM time_tbl ORDER BY 1;
                                       QUERY PLAN                                        
-----------------------------------------------------------------------------------------
 Sort
   Sort Key: (oracle_localtimestamp())
   ->  Foreign Scan on time_tbl
         Oracle query: SELECT /*d42989c7c58669f31483b6d9f2df380d*/ "C1" FROM  "TIME_TBL"
(4 rows)

-- select oracle_localtimestamp with order by index (result)
--Testcase 1154:
SELECT oracle_localtimestamp() - oracle_localtimestamp(), c1 FROM time_tbl ORDER BY 1;
ERROR:  stub oracle_localtimestamp() is called
CONTEXT:  PL/pgSQL function oracle_localtimestamp() line 3 at RAISE
-- select oracle_localtimestamp with group by (explain)
--Testcase 1155:
EXPLAIN (COSTS OFF)
SELECT oracle_localtimestamp(), c1 FROM time_tbl GROUP BY c1;
                                                   QUERY PLAN                                                    
-----------------------------------------------------------------------------------------------------------------
 Foreign Scan
   Oracle query: SELECT /*2a5ed9bc89acc53fd8a4eba59147d44f*/ localtimestamp, "C1" FROM  "TIME_TBL" GROUP BY "C1"
(2 rows)

-- select oracle_localtimestamp with group by (result)
--Testcase 1156:
SELECT oracle_localtimestamp() - oracle_localtimestamp(), c1 FROM time_tbl GROUP BY c1;
 ?column? |                 c1                  
----------+-------------------------------------
 @ 0      | Fri Jan 01 18:12:12.654321 2021 PST
 @ 0      | Sat Jan 02 02:10:30.123456 2021 PST
 @ 0      | Sat Jan 09 23:12:12.112233 2021 PST
 @ 0      | Fri Jan 15 02:59:59.654321 2021 PST
 @ 0      | Thu Jan 28 10:59:59.000102 2021 PST
(5 rows)

-- select oracle_localtimestamp with group by index (explain)
--Testcase 1157:
EXPLAIN (COSTS OFF)
SELECT oracle_localtimestamp(), c1 FROM time_tbl GROUP BY 2;
                                                   QUERY PLAN                                                    
-----------------------------------------------------------------------------------------------------------------
 Foreign Scan
   Oracle query: SELECT /*2a5ed9bc89acc53fd8a4eba59147d44f*/ localtimestamp, "C1" FROM  "TIME_TBL" GROUP BY "C1"
(2 rows)

-- select oracle_localtimestamp with group by index (result)
--Testcase 1158:
SELECT oracle_localtimestamp() - oracle_localtimestamp(), c1 FROM time_tbl GROUP BY 2;
 ?column? |                 c1                  
----------+-------------------------------------
 @ 0      | Fri Jan 01 18:12:12.654321 2021 PST
 @ 0      | Sat Jan 02 02:10:30.123456 2021 PST
 @ 0      | Sat Jan 09 23:12:12.112233 2021 PST
 @ 0      | Fri Jan 15 02:59:59.654321 2021 PST
 @ 0      | Thu Jan 28 10:59:59.000102 2021 PST
(5 rows)

-- select oracle_localtimestamp with group by having (explain)
--Testcase 1159:
EXPLAIN (COSTS OFF)
SELECT oracle_localtimestamp(), c1 FROM time_tbl GROUP BY oracle_localtimestamp(),c1 HAVING oracle_localtimestamp() > '2000-01-01 00:00:00'::timestamp;
                                                                                                    QUERY PLAN                                                                                                     
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan
   Oracle query: SELECT /*e24847e79d54b4f805a73cf94dd875c6*/ localtimestamp, "C1" FROM  "TIME_TBL" GROUP BY (localtimestamp), "C1" HAVING (localtimestamp > (CAST ('2000-01-01 00:00:00.000000 AD' AS TIMESTAMP)))
(2 rows)

-- select oracle_localtimestamp with group by having (result)
--Testcase 1160:
SELECT oracle_localtimestamp() - oracle_localtimestamp(), c1 FROM time_tbl GROUP BY oracle_localtimestamp(),c1 HAVING oracle_localtimestamp() > '2000-01-01 00:00:00'::timestamp;
 ?column? |                 c1                  
----------+-------------------------------------
 @ 0      | Fri Jan 01 18:12:12.654321 2021 PST
 @ 0      | Sat Jan 02 02:10:30.123456 2021 PST
 @ 0      | Sat Jan 09 23:12:12.112233 2021 PST
 @ 0      | Fri Jan 15 02:59:59.654321 2021 PST
 @ 0      | Thu Jan 28 10:59:59.000102 2021 PST
(5 rows)

-- select oracle_localtimestamp with group by index having (explain)
--Testcase 1161:
EXPLAIN (COSTS OFF)
SELECT oracle_localtimestamp(), c1 FROM time_tbl GROUP BY 2,1 HAVING oracle_localtimestamp() > '2000-01-01 00:00:00'::timestamp;
                                                                                                    QUERY PLAN                                                                                                     
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan
   Oracle query: SELECT /*0715f9dae03fd0044b09ca07370c7195*/ localtimestamp, "C1" FROM  "TIME_TBL" GROUP BY "C1", (localtimestamp) HAVING (localtimestamp > (CAST ('2000-01-01 00:00:00.000000 AD' AS TIMESTAMP)))
(2 rows)

-- select oracle_localtimestamp with group by index having (result)
--Testcase 1162:
SELECT oracle_localtimestamp() - oracle_localtimestamp(), c1 FROM time_tbl GROUP BY 2,1 HAVING oracle_localtimestamp() > '2000-01-01 00:00:00'::timestamp;
 ?column? |                 c1                  
----------+-------------------------------------
 @ 0      | Fri Jan 01 18:12:12.654321 2021 PST
 @ 0      | Sat Jan 02 02:10:30.123456 2021 PST
 @ 0      | Sat Jan 09 23:12:12.112233 2021 PST
 @ 0      | Fri Jan 15 02:59:59.654321 2021 PST
 @ 0      | Thu Jan 28 10:59:59.000102 2021 PST
(5 rows)

-- select oracle_localtimestamp with alias (explain)
--Testcase 1163:
EXPLAIN (COSTS OFF)
SELECT oracle_localtimestamp() as oracle_localtimestamp1 FROM time_tbl;
                                    QUERY PLAN                                     
-----------------------------------------------------------------------------------
 Foreign Scan on time_tbl
   Oracle query: SELECT /*0e506c6af6345b33c1443508d5c649a5*/ NULL FROM  "TIME_TBL"
(2 rows)

-- select oracle_localtimestamp with alias (result)
--Testcase 1164:
SELECT (oracle_localtimestamp() - oracle_localtimestamp()) as oracle_localtimestamp_diff FROM time_tbl;
ERROR:  stub oracle_localtimestamp() is called
CONTEXT:  PL/pgSQL function oracle_localtimestamp() line 3 at RAISE
-- LAST_DAY()
-- select last_day (stub function, explain)
--Testcase 1165:
EXPLAIN (COSTS OFF)
SELECT last_day(c2) FROM time_tbl;
                                    QUERY PLAN                                     
-----------------------------------------------------------------------------------
 Foreign Scan on time_tbl
   Oracle query: SELECT /*a50e2ec7624cc0c1ab90cca911a60b5a*/ "C2" FROM  "TIME_TBL"
(2 rows)

-- select last_day (stub function, result)
--Testcase 1166:
SELECT last_day(c2) FROM time_tbl;
ERROR:  stub last_day(date) is called
CONTEXT:  PL/pgSQL function last_day(date) line 3 at RAISE
-- select last_day (stub function, not pushdown constraints, explain)
--Testcase 1167:
EXPLAIN (COSTS OFF)
SELECT last_day(c2) FROM time_tbl WHERE to_hex(id) = '1';
                                       QUERY PLAN                                        
-----------------------------------------------------------------------------------------
 Foreign Scan on time_tbl
   Filter: (to_hex(id) = '1'::text)
   Oracle query: SELECT /*fb29f91fdca54a2437e4a5927244d6c3*/ "ID", "C2" FROM  "TIME_TBL"
(3 rows)

-- select last_day (stub function, not pushdown constraints, result)
--Testcase 1168:
SELECT last_day(c2) FROM time_tbl WHERE to_hex(id) = '1';
ERROR:  stub last_day(date) is called
CONTEXT:  PL/pgSQL function last_day(date) line 3 at RAISE
-- select last_day (stub function, pushdown constraints, explain)
--Testcase 1169:
EXPLAIN (COSTS OFF)
SELECT last_day(c2) FROM time_tbl WHERE id != 200;
                                              QUERY PLAN                                               
-------------------------------------------------------------------------------------------------------
 Foreign Scan on time_tbl
   Oracle query: SELECT /*479a598c17b267ba52082c87df75324f*/ "C2" FROM  "TIME_TBL" WHERE ("ID" <> 200)
(2 rows)

-- select last_day (stub function, pushdown constraints, result)
--Testcase 1170:
SELECT last_day(c2) FROM time_tbl WHERE id != 200;
ERROR:  stub last_day(date) is called
CONTEXT:  PL/pgSQL function last_day(date) line 3 at RAISE
-- select last_day with agg (pushdown, explain)
--Testcase 1171:
EXPLAIN (COSTS OFF)
SELECT max(c2), last_day(max(c2)) FROM time_tbl;
                                                 QUERY PLAN                                                  
-------------------------------------------------------------------------------------------------------------
 Foreign Scan
   Oracle query: SELECT /*f37a2cfac77fb198f92f4a775ad24786*/ max("C2"), last_day(max("C2")) FROM  "TIME_TBL"
(2 rows)

-- select last_day as nest function with agg (pushdown, result)
--Testcase 1172:
SELECT max(c2), last_day(max(c2)) FROM time_tbl;
    max     |  last_day  
------------+------------
 01-29-2021 | 01-31-2021
(1 row)

-- select last_day with order by (explain)
--Testcase 1173:
EXPLAIN (COSTS OFF)
SELECT id, last_day(c2) FROM time_tbl order by last_day(c2);
                                          QUERY PLAN                                           
-----------------------------------------------------------------------------------------------
 Sort
   Sort Key: (last_day(c2))
   ->  Foreign Scan on time_tbl
         Oracle query: SELECT /*fb29f91fdca54a2437e4a5927244d6c3*/ "ID", "C2" FROM  "TIME_TBL"
(4 rows)

-- select last_day with order by (result)
--Testcase 1174:
SELECT id, last_day(c2) FROM time_tbl order by last_day(c2);
ERROR:  stub last_day(date) is called
CONTEXT:  PL/pgSQL function last_day(date) line 3 at RAISE
-- select last_day with order by index (explain)
--Testcase 1175:
EXPLAIN (COSTS OFF)
SELECT id, last_day(c2) FROM time_tbl order by 2,1;
                                          QUERY PLAN                                           
-----------------------------------------------------------------------------------------------
 Sort
   Sort Key: (last_day(c2)), id
   ->  Foreign Scan on time_tbl
         Oracle query: SELECT /*fb29f91fdca54a2437e4a5927244d6c3*/ "ID", "C2" FROM  "TIME_TBL"
(4 rows)

-- select last_day with order by index (result)
--Testcase 1176:
SELECT id, last_day(c2) FROM time_tbl order by 2,1;
ERROR:  stub last_day(date) is called
CONTEXT:  PL/pgSQL function last_day(date) line 3 at RAISE
-- select last_day with order by index (explain)
--Testcase 1177:
EXPLAIN (COSTS OFF)
SELECT id, last_day(c2) FROM time_tbl order by 1,2;
                                          QUERY PLAN                                           
-----------------------------------------------------------------------------------------------
 Sort
   Sort Key: id, (last_day(c2))
   ->  Foreign Scan on time_tbl
         Oracle query: SELECT /*fb29f91fdca54a2437e4a5927244d6c3*/ "ID", "C2" FROM  "TIME_TBL"
(4 rows)

-- select last_day with order by index (result)
--Testcase 1178:
SELECT id, last_day(c2) FROM time_tbl order by 1,2;
ERROR:  stub last_day(date) is called
CONTEXT:  PL/pgSQL function last_day(date) line 3 at RAISE
-- select last_day with group by (explain)
--Testcase 1179:
EXPLAIN (COSTS OFF)
SELECT max(c2), last_day(c2) FROM time_tbl group by 2;
                                                            QUERY PLAN                                                            
----------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan
   Oracle query: SELECT /*ae9471134f9a9d7b91e428deb8aa7b2f*/ max("C2"), last_day("C2") FROM  "TIME_TBL" GROUP BY (last_day("C2"))
(2 rows)

-- select last_day with group by (result)
--Testcase 1180:
SELECT max(c2), last_day(c2) FROM time_tbl group by 2;
    max     |  last_day  
------------+------------
 01-29-2021 | 01-31-2021
(1 row)

-- select last_day with group by index (explain)
--Testcase 1181:
EXPLAIN (COSTS OFF)
SELECT id, last_day(c2) FROM time_tbl group by 2, 1;
                                                            QUERY PLAN                                                             
-----------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan
   Oracle query: SELECT /*21687d416a5e9702c46ad00eb93ee463*/ "ID", last_day("C2") FROM  "TIME_TBL" GROUP BY (last_day("C2")), "ID"
(2 rows)

-- select last_day with group by index (result)
--Testcase 1182:
SELECT id, last_day(c2) FROM time_tbl group by 2, 1;
 id |  last_day  
----+------------
  0 | 01-31-2021
  1 | 01-31-2021
  2 | 01-31-2021
  3 | 01-31-2021
  4 | 01-31-2021
(5 rows)

-- select last_day with group by index (explain)
--Testcase 1183:
EXPLAIN (COSTS OFF)
SELECT id, last_day(c2) FROM time_tbl group by 1, 2;
                                                            QUERY PLAN                                                             
-----------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan
   Oracle query: SELECT /*bf0a660323ff7d4c73397be69ed17091*/ "ID", last_day("C2") FROM  "TIME_TBL" GROUP BY "ID", (last_day("C2"))
(2 rows)

-- select last_day with group by index (result)
--Testcase 1184:
SELECT id, last_day(c2) FROM time_tbl group by 1, 2;
 id |  last_day  
----+------------
  0 | 01-31-2021
  1 | 01-31-2021
  2 | 01-31-2021
  3 | 01-31-2021
  4 | 01-31-2021
(5 rows)

-- select last_day with group by having (explain)
--Testcase 1185:
EXPLAIN (COSTS OFF)
SELECT max(c2), last_day(c2) FROM time_tbl group by last_day(c2), c2 HAVING last_day(c2) > '2001-01-31'::date;
                                                                                                    QUERY PLAN                                                                                                    
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan
   Oracle query: SELECT /*e92633a5b5a44e832d4bdc6f655e1641*/ max("C2"), last_day("C2"), "C2" FROM  "TIME_TBL" GROUP BY (last_day("C2")), "C2" HAVING (last_day("C2") > (CAST ('2001-01-31 00:00:00 AD' AS DATE)))
(2 rows)

-- select last_day with group by having (result)
--Testcase 1186:
SELECT max(c2), last_day(c2) FROM time_tbl group by last_day(c2), c2 HAVING last_day(c2) > '2001-01-31'::date;
    max     |  last_day  
------------+------------
 01-02-2021 | 01-31-2021
 01-01-2021 | 01-31-2021
 01-10-2021 | 01-31-2021
 01-15-2021 | 01-31-2021
 01-29-2021 | 01-31-2021
(5 rows)

-- select last_day with group by index having (explain)
--Testcase 1187:
EXPLAIN (COSTS OFF)
SELECT id, last_day(c2), c2 FROM time_tbl group by id, last_day(c2), c2 HAVING last_day(c2) > '2001-01-31'::date;
                                                                                                    QUERY PLAN                                                                                                     
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan
   Oracle query: SELECT /*a29e1e58b4c96580625b4952d1971526*/ "ID", last_day("C2"), "C2" FROM  "TIME_TBL" GROUP BY "ID", (last_day("C2")), "C2" HAVING (last_day("C2") > (CAST ('2001-01-31 00:00:00 AD' AS DATE)))
(2 rows)

-- select last_day with group by index having (result)
--Testcase 1188:
SELECT id, last_day(c2), c2 FROM time_tbl group by id, last_day(c2), c2 HAVING last_day(c2) > '2001-01-31'::date;
 id |  last_day  |     c2     
----+------------+------------
  0 | 01-31-2021 | 01-02-2021
  1 | 01-31-2021 | 01-01-2021
  2 | 01-31-2021 | 01-10-2021
  3 | 01-31-2021 | 01-15-2021
  4 | 01-31-2021 | 01-29-2021
(5 rows)

-- EXTRACT()
-- select oracle_extract (stub function, explain)
--Testcase 1189:
EXPLAIN (COSTS OFF)
SELECT oracle_extract('year', c1), oracle_extract('year', c2), oracle_extract('year', c3) FROM time_tbl;
                                          QUERY PLAN                                           
-----------------------------------------------------------------------------------------------
 Foreign Scan on time_tbl
   Oracle query: SELECT /*efc45f1d4014d74d657732a0443f3f5a*/ "C1", "C2", "C3" FROM  "TIME_TBL"
(2 rows)

-- select oracle_extract (stub function, result)
--Testcase 1190:
SELECT oracle_extract('year', c1), oracle_extract('year', c2), oracle_extract('year', c3) FROM time_tbl;
ERROR:  stub oracle_extract(text, timestamp with time zone) is called
CONTEXT:  PL/pgSQL function oracle_extract(text,timestamp with time zone) line 3 at RAISE
-- select oracle_extract (stub function, not pushdown constraints, explain)
--Testcase 1191:
EXPLAIN (COSTS OFF)
SELECT oracle_extract('year', c1), oracle_extract('year', c2), oracle_extract('year', c3) FROM time_tbl WHERE to_hex(id) = '1';
                                             QUERY PLAN                                              
-----------------------------------------------------------------------------------------------------
 Foreign Scan on time_tbl
   Filter: (to_hex(id) = '1'::text)
   Oracle query: SELECT /*e271153ca5fd752aeee2f1fd6d9d4051*/ "ID", "C1", "C2", "C3" FROM  "TIME_TBL"
(3 rows)

-- select oracle_extract (stub function, not pushdown constraints, result)
--Testcase 1192:
SELECT oracle_extract('year', c1), oracle_extract('year', c2), oracle_extract('year', c3) FROM time_tbl WHERE to_hex(id) = '1';
ERROR:  stub oracle_extract(text, timestamp with time zone) is called
CONTEXT:  PL/pgSQL function oracle_extract(text,timestamp with time zone) line 3 at RAISE
-- select oracle_extract (stub function, pushdown constraints, explain)
--Testcase 1193:
EXPLAIN (COSTS OFF)
SELECT oracle_extract('year', c1), oracle_extract('year', c2), oracle_extract('year', c3) FROM time_tbl WHERE id != 200;
                                                    QUERY PLAN                                                     
-------------------------------------------------------------------------------------------------------------------
 Foreign Scan on time_tbl
   Oracle query: SELECT /*f6ee27bb7884ca5be4cab8fb273d05be*/ "C1", "C2", "C3" FROM  "TIME_TBL" WHERE ("ID" <> 200)
(2 rows)

-- select oracle_extract (stub function, pushdown constraints, result)
--Testcase 1194:
SELECT oracle_extract('year', c1), oracle_extract('year', c2), oracle_extract('year', c3) FROM time_tbl WHERE id != 200;
ERROR:  stub oracle_extract(text, timestamp with time zone) is called
CONTEXT:  PL/pgSQL function oracle_extract(text,timestamp with time zone) line 3 at RAISE
-- select oracle_extract (stub function, oracle_extract in constraints, explain)
--Testcase 1195:
EXPLAIN (COSTS OFF)
SELECT oracle_extract('year', c1), oracle_extract('year', c2), oracle_extract('year', c3) FROM time_tbl WHERE oracle_extract('year', c3 ) != oracle_extract('year', '2000-01-01'::timestamp);
                                                                                                QUERY PLAN                                                                                                 
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on time_tbl
   Oracle query: SELECT /*7fff929f5f0ed92d45ba42f9f4028365*/ "C1", "C2", "C3" FROM  "TIME_TBL" WHERE (EXTRACT(year FROM "C3") <> EXTRACT(year FROM (CAST ('2000-01-01 00:00:00.000000 AD' AS TIMESTAMP))))
(2 rows)

-- select oracle_extract (stub function, oracle_extract in constraints, result)
--Testcase 1196:
SELECT oracle_extract('year', c1), oracle_extract('year', c2), oracle_extract('year', c3) FROM time_tbl WHERE oracle_extract('year', c3 ) != oracle_extract('year', '2000-01-01'::timestamp);
ERROR:  stub oracle_extract(text, timestamp with time zone) is called
CONTEXT:  PL/pgSQL function oracle_extract(text,timestamp with time zone) line 3 at RAISE
-- select oracle_extract (stub function, oracle_extract in constraints, explain)
--Testcase 1197:
EXPLAIN (COSTS OFF)
SELECT oracle_extract('year', c2), oracle_extract('second', '2021-01-03 12:10:30.123456'::timestamp), oracle_extract('day', c3) FROM time_tbl WHERE oracle_extract('year', c3 ) > '1';
                                                         QUERY PLAN                                                          
-----------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on time_tbl
   Oracle query: SELECT /*9a9b4fe1d44093b72ead0d2d05ecf33f*/ "C2", "C3" FROM  "TIME_TBL" WHERE (EXTRACT(year FROM "C3") > 1)
(2 rows)

-- select oracle_extract (stub function, oracle_extract in constraints, result)
--Testcase 1198:
SELECT oracle_extract('year', c2), oracle_extract('second', '2021-01-03 12:10:30.123456'::timestamp), oracle_extract('day', c3) FROM time_tbl WHERE oracle_extract('year', c3 ) > '1';
ERROR:  stub oracle_extract(text, date) is called
CONTEXT:  PL/pgSQL function oracle_extract(text,date) line 3 at RAISE
-- select oracle_extract with agg (pushdown, explain)
--Testcase 1199:
EXPLAIN (COSTS OFF)
SELECT max(c3), oracle_extract('year', max(c3)) FROM time_tbl;
                                                      QUERY PLAN                                                      
----------------------------------------------------------------------------------------------------------------------
 Foreign Scan
   Oracle query: SELECT /*47d80aa996d85bf54413e13dd739414b*/ max("C3"), EXTRACT(year FROM max("C3")) FROM  "TIME_TBL"
(2 rows)

-- select oracle_extract as nest function with agg (pushdown, result)
--Testcase 1200:
SELECT max(c3), oracle_extract('year', max(c3)) FROM time_tbl;
               max               | oracle_extract 
---------------------------------+----------------
 Thu Jan 07 00:59:59.000102 2021 |           2021
(1 row)

-- select oracle_extract with order by (explain)
--Testcase 1201:
EXPLAIN (COSTS OFF)
SELECT id, oracle_extract('year', c2), oracle_extract('second', '2021-01-03 12:10:30.123456'::timestamp), oracle_extract('day', c3) FROM time_tbl order by oracle_extract('year', c2), oracle_extract('second', '2021-01-03 12:10:30.123456'::timestamp), oracle_extract('day', c3);
                                                                                     QUERY PLAN                                                                                      
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort
   Sort Key: (oracle_extract('year'::text, c2)), (oracle_extract('second'::text, 'Sun Jan 03 12:10:30.123456 2021'::timestamp without time zone)), (oracle_extract('day'::text, c3))
   ->  Foreign Scan on time_tbl
         Oracle query: SELECT /*4cdd67b93211113cfabaeb3bb1cbb361*/ "ID", "C2", "C3" FROM  "TIME_TBL"
(4 rows)

-- select oracle_extract with order by (result)
--Testcase 1202:
SELECT id, oracle_extract('year', c2), oracle_extract('second', '2021-01-03 12:10:30.123456'::timestamp), oracle_extract('day', c3) FROM time_tbl order by oracle_extract('year', c2), oracle_extract('second', '2021-01-03 12:10:30.123456'::timestamp), oracle_extract('day', c3);
ERROR:  stub oracle_extract(text, date) is called
CONTEXT:  PL/pgSQL function oracle_extract(text,date) line 3 at RAISE
-- select oracle_extract with order by index (explain)
--Testcase 1203:
EXPLAIN (COSTS OFF)
SELECT id, oracle_extract('year', c2), oracle_extract('second', '2021-01-03 12:10:30.123456'::timestamp), oracle_extract('minute', c3) FROM time_tbl order by 4,3,2,1;
                                                                                         QUERY PLAN                                                                                         
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort
   Sort Key: (oracle_extract('minute'::text, c3)), (oracle_extract('second'::text, 'Sun Jan 03 12:10:30.123456 2021'::timestamp without time zone)), (oracle_extract('year'::text, c2)), id
   ->  Foreign Scan on time_tbl
         Oracle query: SELECT /*4cdd67b93211113cfabaeb3bb1cbb361*/ "ID", "C2", "C3" FROM  "TIME_TBL"
(4 rows)

-- select oracle_extract with order by index (result)
--Testcase 1204:
SELECT id, oracle_extract('year', c2), oracle_extract('second', '2021-01-03 12:10:30.123456'::timestamp), oracle_extract('minute', c3) FROM time_tbl order by 4,3,2,1;
ERROR:  stub oracle_extract(text, date) is called
CONTEXT:  PL/pgSQL function oracle_extract(text,date) line 3 at RAISE
-- select oracle_extract with group by (explain)
--Testcase 1205:
EXPLAIN (COSTS OFF)
SELECT max(c3), oracle_extract('year', c2), oracle_extract('second', '2021-01-03 12:10:30.123456'::timestamp), oracle_extract('minute', c3) FROM time_tbl group by oracle_extract('minute', c3),c2;
                                                                                                                               QUERY PLAN                                                                                                                                
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan
   Oracle query: SELECT /*f9052f8e232f3f2f60f89dc78efbc42a*/ max("C3"), EXTRACT(year FROM "C2"), EXTRACT(second FROM (CAST ('2021-01-03 12:10:30.123456 AD' AS TIMESTAMP))), EXTRACT(minute FROM "C3"), "C2" FROM  "TIME_TBL" GROUP BY (EXTRACT(minute FROM "C3")), "C2"
(2 rows)

-- select oracle_extract with group by (result)
--Testcase 1206:
SELECT max(c3), oracle_extract('year', c2), oracle_extract('second', '2021-01-03 12:10:30.123456'::timestamp), oracle_extract('minute', c3) FROM time_tbl group by oracle_extract('minute', c3),c2;
               max               | oracle_extract | oracle_extract | oracle_extract 
---------------------------------+----------------+----------------+----------------
 Sun Jan 03 12:10:30.123456 2021 |           2021 |      30.123456 |             10
 Mon Jan 04 23:12:12.654321 2021 |           2021 |      30.123456 |             12
 Tue Jan 05 11:12:12.112233 2021 |           2021 |      30.123456 |             12
 Wed Jan 06 15:59:59.654321 2021 |           2021 |      30.123456 |             59
 Thu Jan 07 00:59:59.000102 2021 |           2021 |      30.123456 |             59
(5 rows)

-- select oracle_extract with group by index (explain)
--Testcase 1207:
EXPLAIN (COSTS OFF)
SELECT id, oracle_extract('year', c2), oracle_extract('second', '2021-01-03 12:10:30.123456'::timestamp), oracle_extract('minute', c3) FROM time_tbl group by 4,3,2,1;
                                                                                                                                                                              QUERY PLAN                                                                                                                                                                               
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan
   Oracle query: SELECT /*df822e6bfd003dcad4b2403b20a36c2d*/ "ID", EXTRACT(year FROM "C2"), EXTRACT(second FROM (CAST ('2021-01-03 12:10:30.123456 AD' AS TIMESTAMP))), EXTRACT(minute FROM "C3") FROM  "TIME_TBL" GROUP BY (EXTRACT(minute FROM "C3")), (EXTRACT(second FROM (CAST ('2021-01-03 12:10:30.123456 AD' AS TIMESTAMP)))), (EXTRACT(year FROM "C2")), "ID"
(2 rows)

-- select oracle_extract with group by index (result)
--Testcase 1208:
SELECT id, oracle_extract('year', c2), oracle_extract('second', '2021-01-03 12:10:30.123456'::timestamp), oracle_extract('minute', c3) FROM time_tbl group by 4,3,2,1;
 id | oracle_extract | oracle_extract | oracle_extract 
----+----------------+----------------+----------------
  0 |           2021 |      30.123456 |             10
  1 |           2021 |      30.123456 |             12
  2 |           2021 |      30.123456 |             12
  3 |           2021 |      30.123456 |             59
  4 |           2021 |      30.123456 |             59
(5 rows)

-- select oracle_extract with group by index (explain)
--Testcase 1209:
EXPLAIN (COSTS OFF)
SELECT id, oracle_extract('year', c2), oracle_extract('second', '2021-01-03 12:10:30.123456'::timestamp), oracle_extract('minute', c3) FROM time_tbl group by 1,2,3,4;
                                                                                                                                                                              QUERY PLAN                                                                                                                                                                               
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan
   Oracle query: SELECT /*db48634e86ea277dc43201bcf7b6aad4*/ "ID", EXTRACT(year FROM "C2"), EXTRACT(second FROM (CAST ('2021-01-03 12:10:30.123456 AD' AS TIMESTAMP))), EXTRACT(minute FROM "C3") FROM  "TIME_TBL" GROUP BY "ID", (EXTRACT(year FROM "C2")), (EXTRACT(second FROM (CAST ('2021-01-03 12:10:30.123456 AD' AS TIMESTAMP)))), (EXTRACT(minute FROM "C3"))
(2 rows)

-- select oracle_extract with group by index (result)
--Testcase 1210:
SELECT id, oracle_extract('year', c2), oracle_extract('second', '2021-01-03 12:10:30.123456'::timestamp), oracle_extract('minute', c3) FROM time_tbl group by 1,2,3,4;
 id | oracle_extract | oracle_extract | oracle_extract 
----+----------------+----------------+----------------
  0 |           2021 |      30.123456 |             10
  1 |           2021 |      30.123456 |             12
  2 |           2021 |      30.123456 |             12
  3 |           2021 |      30.123456 |             59
  4 |           2021 |      30.123456 |             59
(5 rows)

-- select oracle_extract with group by index having (explain)
--Testcase 1211:
EXPLAIN (COSTS OFF)
SELECT id, oracle_extract('year', c2), oracle_extract('second', '2021-01-03 12:10:30.123456'::timestamp), oracle_extract('minute', c3), c2 FROM time_tbl group by 5, 4, 3, 2, 1 HAVING oracle_extract('year', c2) > 2000;
                                                                                                                                                                                                        QUERY PLAN                                                                                                                                                                                                         
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan
   Oracle query: SELECT /*0be7e1a2998571bbce3437de715e6b2d*/ "ID", EXTRACT(year FROM "C2"), EXTRACT(second FROM (CAST ('2021-01-03 12:10:30.123456 AD' AS TIMESTAMP))), EXTRACT(minute FROM "C3"), "C2" FROM  "TIME_TBL" GROUP BY "C2", (EXTRACT(minute FROM "C3")), (EXTRACT(second FROM (CAST ('2021-01-03 12:10:30.123456 AD' AS TIMESTAMP)))), (EXTRACT(year FROM "C2")), "ID" HAVING (EXTRACT(year FROM "C2") > 2000)
(2 rows)

-- select oracle_extract with group by index having (result)
--Testcase 1212:
SELECT id, oracle_extract('year', c2), oracle_extract('second', '2021-01-03 12:10:30.123456'::timestamp), oracle_extract('minute', c3), c2 FROM time_tbl group by 5, 4, 3, 2, 1 HAVING oracle_extract('year', c2) > 2000;
 id | oracle_extract | oracle_extract | oracle_extract |     c2     
----+----------------+----------------+----------------+------------
  0 |           2021 |      30.123456 |             10 | 01-02-2021
  1 |           2021 |      30.123456 |             12 | 01-01-2021
  2 |           2021 |      30.123456 |             12 | 01-10-2021
  3 |           2021 |      30.123456 |             59 | 01-15-2021
  4 |           2021 |      30.123456 |             59 | 01-29-2021
(5 rows)

-- select oracle_extract with group by index having (explain)
--Testcase 1213:
EXPLAIN (COSTS OFF)
SELECT id, oracle_extract('year', c2), oracle_extract('second', '2021-01-03 12:10:30.123456'::timestamp), oracle_extract('minute', c3), c2 FROM time_tbl group by 1, 2, 3, 4, 5 HAVING oracle_extract('year', c2) > 2000;
                                                                                                                                                                                                        QUERY PLAN                                                                                                                                                                                                         
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan
   Oracle query: SELECT /*d306aff1fa710e1ce11ef52cf7c2e3ce*/ "ID", EXTRACT(year FROM "C2"), EXTRACT(second FROM (CAST ('2021-01-03 12:10:30.123456 AD' AS TIMESTAMP))), EXTRACT(minute FROM "C3"), "C2" FROM  "TIME_TBL" GROUP BY "ID", (EXTRACT(year FROM "C2")), (EXTRACT(second FROM (CAST ('2021-01-03 12:10:30.123456 AD' AS TIMESTAMP)))), (EXTRACT(minute FROM "C3")), "C2" HAVING (EXTRACT(year FROM "C2") > 2000)
(2 rows)

-- select oracle_extract with group by index having (result)
--Testcase 1214:
SELECT id, oracle_extract('year', c2), oracle_extract('second', '2021-01-03 12:10:30.123456'::timestamp), oracle_extract('minute', c3), c2 FROM time_tbl group by 1, 2, 3, 4, 5 HAVING oracle_extract('year', c2) > 2000;
 id | oracle_extract | oracle_extract | oracle_extract |     c2     
----+----------------+----------------+----------------+------------
  0 |           2021 |      30.123456 |             10 | 01-02-2021
  1 |           2021 |      30.123456 |             12 | 01-01-2021
  2 |           2021 |      30.123456 |             12 | 01-10-2021
  3 |           2021 |      30.123456 |             59 | 01-15-2021
  4 |           2021 |      30.123456 |             59 | 01-29-2021
(5 rows)

-- select oracle_extract and as
--Testcase 1215:
SELECT oracle_extract('year', c2) as oracle_extract1, oracle_extract('second', '2021-01-03 12:10:30.123456'::timestamp) as oracle_extract2, oracle_extract('minute', c3) as oracle_extract3 FROM time_tbl;
ERROR:  stub oracle_extract(text, date) is called
CONTEXT:  PL/pgSQL function oracle_extract(text,date) line 3 at RAISE
-- select oracle_extract with date type (explain)
--Testcase 1216:
EXPLAIN (COSTS OFF)
SELECT oracle_extract('year', c2), oracle_extract('month', c2), oracle_extract('day', c2) FROM time_tbl; 
                                    QUERY PLAN                                     
-----------------------------------------------------------------------------------
 Foreign Scan on time_tbl
   Oracle query: SELECT /*a50e2ec7624cc0c1ab90cca911a60b5a*/ "C2" FROM  "TIME_TBL"
(2 rows)

-- select oracle_extract with date type (result)
--Testcase 1217:
SELECT oracle_extract('year', c2), oracle_extract('month', c2), oracle_extract('day', c2) FROM time_tbl; 
ERROR:  stub oracle_extract(text, date) is called
CONTEXT:  PL/pgSQL function oracle_extract(text,date) line 3 at RAISE
-- select oracle_extract with timestamp with time zone type (explain)
--Testcase 1218:
EXPLAIN (COSTS OFF)
SELECT oracle_extract('year', c1), oracle_extract('month', c1), oracle_extract('day', c1), oracle_extract('hour', c1), oracle_extract('minute', c1), oracle_extract('second', c1),  oracle_extract('timezone_hour', c1),  oracle_extract('timezone_minute', c1) FROM time_tbl;
                                    QUERY PLAN                                     
-----------------------------------------------------------------------------------
 Foreign Scan on time_tbl
   Oracle query: SELECT /*d42989c7c58669f31483b6d9f2df380d*/ "C1" FROM  "TIME_TBL"
(2 rows)

-- select oracle_extract with timestamp with time zone type (result)
--Testcase 1219:
SELECT oracle_extract('year', c1), oracle_extract('month', c1), oracle_extract('day', c1), oracle_extract('hour', c1), oracle_extract('minute', c1), oracle_extract('second', c1),  oracle_extract('timezone_hour', c1),  oracle_extract('timezone_minute', c1) FROM time_tbl;
ERROR:  stub oracle_extract(text, timestamp with time zone) is called
CONTEXT:  PL/pgSQL function oracle_extract(text,timestamp with time zone) line 3 at RAISE
-- select oracle_extract with timestamp without time zone type (explain)
--Testcase 1220:
EXPLAIN (COSTS OFF)
SELECT oracle_extract('year', c1), oracle_extract('month', c1), oracle_extract('day', c1), oracle_extract('hour', c1), oracle_extract('minute', c1), oracle_extract('second', c1) FROM time_tbl;
                                    QUERY PLAN                                     
-----------------------------------------------------------------------------------
 Foreign Scan on time_tbl
   Oracle query: SELECT /*d42989c7c58669f31483b6d9f2df380d*/ "C1" FROM  "TIME_TBL"
(2 rows)

-- select oracle_extract with timestamp without time zone type (result)
--Testcase 1221:
SELECT oracle_extract('year', c1), oracle_extract('month', c1), oracle_extract('day', c1), oracle_extract('hour', c1), oracle_extract('minute', c1), oracle_extract('second', c1) FROM time_tbl;
ERROR:  stub oracle_extract(text, timestamp with time zone) is called
CONTEXT:  PL/pgSQL function oracle_extract(text,timestamp with time zone) line 3 at RAISE
-- select oracle_extract with interval day to second type (explain)
--Testcase 1222:
EXPLAIN (COSTS OFF)
SELECT oracle_extract('day', interval '5 04:30:20.11' day to second), oracle_extract('hour', interval '5 04:30:20.11' day to second), oracle_extract('minute', interval '5 04:30:20.11' day to second), oracle_extract('second', interval '5 04:30:20.11' day to second) FROM time_tbl;
                                    QUERY PLAN                                     
-----------------------------------------------------------------------------------
 Foreign Scan on time_tbl
   Oracle query: SELECT /*0e506c6af6345b33c1443508d5c649a5*/ NULL FROM  "TIME_TBL"
(2 rows)

-- select oracle_extract with interval day to second type (result)
--Testcase 1223:
SELECT oracle_extract('day', interval '5 04:30:20.11' day to second), oracle_extract('hour', interval '5 04:30:20.11' day to second), oracle_extract('minute', interval '5 04:30:20.11' day to second), oracle_extract('second', interval '5 04:30:20.11' day to second) FROM time_tbl;
ERROR:  stub oracle_extract(text, interval day to second(6)) is called
CONTEXT:  PL/pgSQL function oracle_extract(text,interval) line 3 at RAISE
-- select oracle_extract with interval day to second type (explain)
--Testcase 1224:
EXPLAIN (COSTS OFF)
SELECT oracle_extract('day', interval '40 days 2 hours 1 minute 1 second'), oracle_extract('hour', interval '40 days 2 hours 1 minute 1 second'), oracle_extract('minute', interval '40 days 2 hours 1 minute 1 second'), oracle_extract('second', interval '40 days 2 hours 1 minute 1 second') FROM time_tbl;
                                    QUERY PLAN                                     
-----------------------------------------------------------------------------------
 Foreign Scan on time_tbl
   Oracle query: SELECT /*0e506c6af6345b33c1443508d5c649a5*/ NULL FROM  "TIME_TBL"
(2 rows)

-- select oracle_extract with interval day to second type (result)
--Testcase 1225:
SELECT oracle_extract('day', interval '40 days 2 hours 1 minute 1 second'), oracle_extract('hour', interval '40 days 2 hours 1 minute 1 second'), oracle_extract('minute', interval '40 days 2 hours 1 minute 1 second'), oracle_extract('second', interval '40 days 2 hours 1 minute 1 second') FROM time_tbl;
ERROR:  stub oracle_extract(text, interval day to second(6)) is called
CONTEXT:  PL/pgSQL function oracle_extract(text,interval) line 3 at RAISE
-- DBTIMEZONE()
-- select dbtimezone (explain)
--Testcase 1226:
EXPLAIN (COSTS OFF)
SELECT dbtimezone() FROM time_tbl LIMIT 1;
                                       QUERY PLAN                                        
-----------------------------------------------------------------------------------------
 Limit
   ->  Foreign Scan on time_tbl
         Oracle query: SELECT /*0e506c6af6345b33c1443508d5c649a5*/ NULL FROM  "TIME_TBL"
(3 rows)

-- select dbtimezone (result)
--Testcase 1227:
SELECT dbtimezone() FROM time_tbl LIMIT 1;
ERROR:  stub dbtimezone() is called
CONTEXT:  PL/pgSQL function dbtimezone() line 3 at RAISE
-- FROM_TZ(timestamp, timezone)
-- select from_tz (explain)
--Testcase 1228:
EXPLAIN (COSTS OFF)
SELECT c3, from_tz(c3, '3:00') FROM time_tbl;
                                    QUERY PLAN                                     
-----------------------------------------------------------------------------------
 Foreign Scan on time_tbl
   Oracle query: SELECT /*4f490c5041680b08bd3222e76b44c1ca*/ "C3" FROM  "TIME_TBL"
(2 rows)

-- select from_tz (result)
--Testcase 1229:
SELECT c3, from_tz(c3, '3:00') FROM time_tbl;
ERROR:  stub from_tz(timestamp, text) is called
CONTEXT:  PL/pgSQL function from_tz(timestamp without time zone,text) line 3 at RAISE
-- MONTHS_BETWEEN(date, date)
-- select months_between, negative result (explain)
--Testcase 1230:
EXPLAIN (COSTS OFF)
SELECT c2, months_between(c2, '2025-01-01') FROM time_tbl;
                                    QUERY PLAN                                     
-----------------------------------------------------------------------------------
 Foreign Scan on time_tbl
   Oracle query: SELECT /*a50e2ec7624cc0c1ab90cca911a60b5a*/ "C2" FROM  "TIME_TBL"
(2 rows)

-- select months_between, negative result (result)
--Testcase 1231:
SELECT c2, months_between(c2, '2025-01-01') FROM time_tbl;
ERROR:  stub months_between(date, date) is called
CONTEXT:  PL/pgSQL function months_between(date,date) line 3 at RAISE
-- select months_between, positive result (explain)
--Testcase 1232:
EXPLAIN (COSTS OFF)
SELECT c2, months_between('2025-01-01', c2) FROM time_tbl;
                                    QUERY PLAN                                     
-----------------------------------------------------------------------------------
 Foreign Scan on time_tbl
   Oracle query: SELECT /*a50e2ec7624cc0c1ab90cca911a60b5a*/ "C2" FROM  "TIME_TBL"
(2 rows)

-- select months_between, positive result (result)
--Testcase 1233:
SELECT c2, months_between('2025-01-01', c2) FROM time_tbl;
ERROR:  stub months_between(date, date) is called
CONTEXT:  PL/pgSQL function months_between(date,date) line 3 at RAISE
-- NEW_TIME(date, timezone1, timezone2)
-- set 24 hour format
--Testcase 1234:
SELECT oracle_execute('oracle_srv', 'ALTER SESSION SET NLS_DATE_FORMAT = ''DD-MON-YYYY HH24:MI:SS''');
 oracle_execute 
----------------
 
(1 row)

-- select new_time, ast, bst (explain)
--Testcase 1235:
EXPLAIN (COSTS OFF)
SELECT c2, new_time(c2, 'AST', 'BST') FROM time_tbl;
                                    QUERY PLAN                                     
-----------------------------------------------------------------------------------
 Foreign Scan on time_tbl
   Oracle query: SELECT /*a50e2ec7624cc0c1ab90cca911a60b5a*/ "C2" FROM  "TIME_TBL"
(2 rows)

-- select new_time, ast, bst (result)
--Testcase 1236:
SELECT c2, new_time(c2, 'AST', 'BST') FROM time_tbl;
ERROR:  stub new_time(date, text, text) is called
CONTEXT:  PL/pgSQL function new_time(date,text,text) line 3 at RAISE
-- select new_time, ast, cst (explain)
--Testcase 1237:
EXPLAIN (COSTS OFF)
SELECT c2, new_time(c2, 'AST', 'CST') FROM time_tbl;
                                    QUERY PLAN                                     
-----------------------------------------------------------------------------------
 Foreign Scan on time_tbl
   Oracle query: SELECT /*a50e2ec7624cc0c1ab90cca911a60b5a*/ "C2" FROM  "TIME_TBL"
(2 rows)

-- select new_time, ast, cst (result)
--Testcase 1238:
SELECT c2, new_time(c2, 'AST', 'CST') FROM time_tbl;
ERROR:  stub new_time(date, text, text) is called
CONTEXT:  PL/pgSQL function new_time(date,text,text) line 3 at RAISE
-- select new_time, ast, est (explain)
--Testcase 1239:
EXPLAIN (COSTS OFF)
SELECT c2, new_time(c2, 'AST', 'EST') FROM time_tbl;
                                    QUERY PLAN                                     
-----------------------------------------------------------------------------------
 Foreign Scan on time_tbl
   Oracle query: SELECT /*a50e2ec7624cc0c1ab90cca911a60b5a*/ "C2" FROM  "TIME_TBL"
(2 rows)

-- select new_time, ast, est (result)
--Testcase 1240:
SELECT c2, new_time(c2, 'AST', 'EST') FROM time_tbl;
ERROR:  stub new_time(date, text, text) is called
CONTEXT:  PL/pgSQL function new_time(date,text,text) line 3 at RAISE
-- select new_time, ast, gmt (explain)
--Testcase 1241:
EXPLAIN (COSTS OFF)
SELECT c2, new_time(c2, 'AST', 'GMT') FROM time_tbl;
                                    QUERY PLAN                                     
-----------------------------------------------------------------------------------
 Foreign Scan on time_tbl
   Oracle query: SELECT /*a50e2ec7624cc0c1ab90cca911a60b5a*/ "C2" FROM  "TIME_TBL"
(2 rows)

-- select new_time, ast, gmt (result)
--Testcase 1242:
SELECT c2, new_time(c2, 'AST', 'GMT') FROM time_tbl;
ERROR:  stub new_time(date, text, text) is called
CONTEXT:  PL/pgSQL function new_time(date,text,text) line 3 at RAISE
-- select new_time, ast, hst (explain)
--Testcase 1243:
EXPLAIN (COSTS OFF)
SELECT c2, new_time(c2, 'AST', 'HST') FROM time_tbl;
                                    QUERY PLAN                                     
-----------------------------------------------------------------------------------
 Foreign Scan on time_tbl
   Oracle query: SELECT /*a50e2ec7624cc0c1ab90cca911a60b5a*/ "C2" FROM  "TIME_TBL"
(2 rows)

-- select new_time, ast, hst (result)
--Testcase 1244:
SELECT c2, new_time(c2, 'AST', 'HST') FROM time_tbl;
ERROR:  stub new_time(date, text, text) is called
CONTEXT:  PL/pgSQL function new_time(date,text,text) line 3 at RAISE
-- select new_time, ast, mst (explain)
--Testcase 1245:
EXPLAIN (COSTS OFF)
SELECT c2, new_time(c2, 'AST', 'MST') FROM time_tbl;
                                    QUERY PLAN                                     
-----------------------------------------------------------------------------------
 Foreign Scan on time_tbl
   Oracle query: SELECT /*a50e2ec7624cc0c1ab90cca911a60b5a*/ "C2" FROM  "TIME_TBL"
(2 rows)

-- select new_time, ast, mst (result)
--Testcase 1246:
SELECT c2, new_time(c2, 'AST', 'MST') FROM time_tbl;
ERROR:  stub new_time(date, text, text) is called
CONTEXT:  PL/pgSQL function new_time(date,text,text) line 3 at RAISE
-- select new_time, ast, nst (explain)
--Testcase 1247:
EXPLAIN (COSTS OFF)
SELECT c2, new_time(c2, 'AST', 'NST') FROM time_tbl;
                                    QUERY PLAN                                     
-----------------------------------------------------------------------------------
 Foreign Scan on time_tbl
   Oracle query: SELECT /*a50e2ec7624cc0c1ab90cca911a60b5a*/ "C2" FROM  "TIME_TBL"
(2 rows)

-- select new_time, ast, nst (result)
--Testcase 1248:
SELECT c2, new_time(c2, 'AST', 'NST') FROM time_tbl;
ERROR:  stub new_time(date, text, text) is called
CONTEXT:  PL/pgSQL function new_time(date,text,text) line 3 at RAISE
-- select new_time, ast, pst (explain)
--Testcase 1249:
EXPLAIN (COSTS OFF)
SELECT c2, new_time(c2, 'AST', 'PST') FROM time_tbl;
                                    QUERY PLAN                                     
-----------------------------------------------------------------------------------
 Foreign Scan on time_tbl
   Oracle query: SELECT /*a50e2ec7624cc0c1ab90cca911a60b5a*/ "C2" FROM  "TIME_TBL"
(2 rows)

-- select new_time, ast, pst (result)
--Testcase 1250:
SELECT c2, new_time(c2, 'AST', 'PST') FROM time_tbl;
ERROR:  stub new_time(date, text, text) is called
CONTEXT:  PL/pgSQL function new_time(date,text,text) line 3 at RAISE
-- select new_time, ast, yst (explain)
--Testcase 1251:
EXPLAIN (COSTS OFF)
SELECT c2, new_time(c2, 'AST', 'YST') FROM time_tbl;
                                    QUERY PLAN                                     
-----------------------------------------------------------------------------------
 Foreign Scan on time_tbl
   Oracle query: SELECT /*a50e2ec7624cc0c1ab90cca911a60b5a*/ "C2" FROM  "TIME_TBL"
(2 rows)

-- select new_time, ast, yst (result)
--Testcase 1252:
SELECT c2, new_time(c2, 'AST', 'YST') FROM time_tbl;
ERROR:  stub new_time(date, text, text) is called
CONTEXT:  PL/pgSQL function new_time(date,text,text) line 3 at RAISE
-- NEXT_DAY(date, day_of_week)
-- select next_day (explain)
--Testcase 1253:
EXPLAIN (COSTS OFF)
SELECT c2, next_day(c2, 'MON') FROM time_tbl;
                                    QUERY PLAN                                     
-----------------------------------------------------------------------------------
 Foreign Scan on time_tbl
   Oracle query: SELECT /*a50e2ec7624cc0c1ab90cca911a60b5a*/ "C2" FROM  "TIME_TBL"
(2 rows)

-- select next_day (result)
--Testcase 1254:
SELECT c2, next_day(c2, 'MON') FROM time_tbl;
ERROR:  stub next_day(date, text) is called
CONTEXT:  PL/pgSQL function next_day(date,text) line 3 at RAISE
-- select next_day (explain)
--Testcase 1255:
EXPLAIN (COSTS OFF)
SELECT c2, next_day(c2, 'TUE') FROM time_tbl;
                                    QUERY PLAN                                     
-----------------------------------------------------------------------------------
 Foreign Scan on time_tbl
   Oracle query: SELECT /*a50e2ec7624cc0c1ab90cca911a60b5a*/ "C2" FROM  "TIME_TBL"
(2 rows)

-- select next_day (result)
--Testcase 1256:
SELECT c2, next_day(c2, 'TUE') FROM time_tbl;
ERROR:  stub next_day(date, text) is called
CONTEXT:  PL/pgSQL function next_day(date,text) line 3 at RAISE
-- select next_day (explain)
--Testcase 1257:
EXPLAIN (COSTS OFF)
SELECT c2, next_day(c2, 'WED') FROM time_tbl;
                                    QUERY PLAN                                     
-----------------------------------------------------------------------------------
 Foreign Scan on time_tbl
   Oracle query: SELECT /*a50e2ec7624cc0c1ab90cca911a60b5a*/ "C2" FROM  "TIME_TBL"
(2 rows)

-- select next_day (result)
--Testcase 1258:
SELECT c2, next_day(c2, 'WED') FROM time_tbl;
ERROR:  stub next_day(date, text) is called
CONTEXT:  PL/pgSQL function next_day(date,text) line 3 at RAISE
-- select next_day (explain)
--Testcase 1259:
EXPLAIN (COSTS OFF)
SELECT c2, next_day(c2, 'THU') FROM time_tbl;
                                    QUERY PLAN                                     
-----------------------------------------------------------------------------------
 Foreign Scan on time_tbl
   Oracle query: SELECT /*a50e2ec7624cc0c1ab90cca911a60b5a*/ "C2" FROM  "TIME_TBL"
(2 rows)

-- select next_day (result)
--Testcase 1260:
SELECT c2, next_day(c2, 'THU') FROM time_tbl;
ERROR:  stub next_day(date, text) is called
CONTEXT:  PL/pgSQL function next_day(date,text) line 3 at RAISE
-- select next_day (explain)
--Testcase 1261:
EXPLAIN (COSTS OFF)
SELECT c2, next_day(c2, 'FRI') FROM time_tbl;
                                    QUERY PLAN                                     
-----------------------------------------------------------------------------------
 Foreign Scan on time_tbl
   Oracle query: SELECT /*a50e2ec7624cc0c1ab90cca911a60b5a*/ "C2" FROM  "TIME_TBL"
(2 rows)

-- select next_day (result)
--Testcase 1262:
SELECT c2, next_day(c2, 'FRI') FROM time_tbl;
ERROR:  stub next_day(date, text) is called
CONTEXT:  PL/pgSQL function next_day(date,text) line 3 at RAISE
-- select next_day (explain)
--Testcase 1263:
EXPLAIN (COSTS OFF)
SELECT c2, next_day(c2, 'SAT') FROM time_tbl;
                                    QUERY PLAN                                     
-----------------------------------------------------------------------------------
 Foreign Scan on time_tbl
   Oracle query: SELECT /*a50e2ec7624cc0c1ab90cca911a60b5a*/ "C2" FROM  "TIME_TBL"
(2 rows)

-- select next_day (result)
--Testcase 1264:
SELECT c2, next_day(c2, 'SAT') FROM time_tbl;
ERROR:  stub next_day(date, text) is called
CONTEXT:  PL/pgSQL function next_day(date,text) line 3 at RAISE
-- select next_day (explain)
--Testcase 1265:
EXPLAIN (COSTS OFF)
SELECT c2, next_day(c2, 'MONDAY') FROM time_tbl;
                                    QUERY PLAN                                     
-----------------------------------------------------------------------------------
 Foreign Scan on time_tbl
   Oracle query: SELECT /*a50e2ec7624cc0c1ab90cca911a60b5a*/ "C2" FROM  "TIME_TBL"
(2 rows)

-- select next_day (result)
--Testcase 1266:
SELECT c2, next_day(c2, 'MONDAY') FROM time_tbl;
ERROR:  stub next_day(date, text) is called
CONTEXT:  PL/pgSQL function next_day(date,text) line 3 at RAISE
-- select next_day (explain)
--Testcase 1267:
EXPLAIN (COSTS OFF)
SELECT c2, next_day(c2, 'TUESDAY') FROM time_tbl;
                                    QUERY PLAN                                     
-----------------------------------------------------------------------------------
 Foreign Scan on time_tbl
   Oracle query: SELECT /*a50e2ec7624cc0c1ab90cca911a60b5a*/ "C2" FROM  "TIME_TBL"
(2 rows)

-- select next_day (result)
--Testcase 1268:
SELECT c2, next_day(c2, 'TUESDAY') FROM time_tbl;
ERROR:  stub next_day(date, text) is called
CONTEXT:  PL/pgSQL function next_day(date,text) line 3 at RAISE
-- select next_day (explain)
--Testcase 1269:
EXPLAIN (COSTS OFF)
SELECT c2, next_day(c2, 'WEDNESDAY') FROM time_tbl;
                                    QUERY PLAN                                     
-----------------------------------------------------------------------------------
 Foreign Scan on time_tbl
   Oracle query: SELECT /*a50e2ec7624cc0c1ab90cca911a60b5a*/ "C2" FROM  "TIME_TBL"
(2 rows)

-- select next_day (result)
--Testcase 1270:
SELECT c2, next_day(c2, 'WEDNESDAY') FROM time_tbl;
ERROR:  stub next_day(date, text) is called
CONTEXT:  PL/pgSQL function next_day(date,text) line 3 at RAISE
-- select next_day (explain)
--Testcase 1271:
EXPLAIN (COSTS OFF)
SELECT c2, next_day(c2, 'THURSDAY') FROM time_tbl;
                                    QUERY PLAN                                     
-----------------------------------------------------------------------------------
 Foreign Scan on time_tbl
   Oracle query: SELECT /*a50e2ec7624cc0c1ab90cca911a60b5a*/ "C2" FROM  "TIME_TBL"
(2 rows)

-- select next_day (result)
--Testcase 1272:
SELECT c2, next_day(c2, 'THURSDAY') FROM time_tbl;
ERROR:  stub next_day(date, text) is called
CONTEXT:  PL/pgSQL function next_day(date,text) line 3 at RAISE
-- select next_day (explain)
--Testcase 1273:
EXPLAIN (COSTS OFF)
SELECT c2, next_day(c2, 'FRIDAY') FROM time_tbl;
                                    QUERY PLAN                                     
-----------------------------------------------------------------------------------
 Foreign Scan on time_tbl
   Oracle query: SELECT /*a50e2ec7624cc0c1ab90cca911a60b5a*/ "C2" FROM  "TIME_TBL"
(2 rows)

-- select next_day (result)
--Testcase 1274:
SELECT c2, next_day(c2, 'FRIDAY') FROM time_tbl;
ERROR:  stub next_day(date, text) is called
CONTEXT:  PL/pgSQL function next_day(date,text) line 3 at RAISE
-- select next_day (explain)
--Testcase 1275:
EXPLAIN (COSTS OFF)
SELECT c2, next_day(c2, 'SATURDAY') FROM time_tbl;
                                    QUERY PLAN                                     
-----------------------------------------------------------------------------------
 Foreign Scan on time_tbl
   Oracle query: SELECT /*a50e2ec7624cc0c1ab90cca911a60b5a*/ "C2" FROM  "TIME_TBL"
(2 rows)

-- select next_day (result)
--Testcase 1276:
SELECT c2, next_day(c2, 'SATURDAY') FROM time_tbl;
ERROR:  stub next_day(date, text) is called
CONTEXT:  PL/pgSQL function next_day(date,text) line 3 at RAISE
-- NUMTODSINTERVAL(number, unit)
-- select numtodsinterval with day (explain)
--Testcase 1277:
EXPLAIN (COSTS OFF)
SELECT numtodsinterval(100, 'DAY') as DAY_TO_SECOND FROM time_tbl LIMIT 1;
                                       QUERY PLAN                                        
-----------------------------------------------------------------------------------------
 Limit
   ->  Foreign Scan on time_tbl
         Oracle query: SELECT /*0e506c6af6345b33c1443508d5c649a5*/ NULL FROM  "TIME_TBL"
(3 rows)

-- select numtodsinterval with day (result)
--Testcase 1278:
SELECT numtodsinterval(100, 'DAY') as DAY_TO_SECOND FROM time_tbl LIMIT 1;
ERROR:  stub numtodsinterval(integer, text) is called
CONTEXT:  PL/pgSQL function numtodsinterval(integer,text) line 3 at RAISE
-- select numtodsinterval with hour (explain)
--Testcase 1279:
EXPLAIN (COSTS OFF)
SELECT numtodsinterval(100, 'HOUR') as DAY_TO_SECOND FROM time_tbl LIMIT 1;
                                       QUERY PLAN                                        
-----------------------------------------------------------------------------------------
 Limit
   ->  Foreign Scan on time_tbl
         Oracle query: SELECT /*0e506c6af6345b33c1443508d5c649a5*/ NULL FROM  "TIME_TBL"
(3 rows)

-- select numtodsinterval with hour (result)
--Testcase 1280:
SELECT numtodsinterval(100, 'HOUR') as DAY_TO_SECOND FROM time_tbl LIMIT 1;
ERROR:  stub numtodsinterval(integer, text) is called
CONTEXT:  PL/pgSQL function numtodsinterval(integer,text) line 3 at RAISE
-- select numtodsinterval with minute (explain)
--Testcase 1281:
EXPLAIN (COSTS OFF)
SELECT numtodsinterval(100, 'MINUTE') as DAY_TO_SECOND FROM time_tbl LIMIT 1;
                                       QUERY PLAN                                        
-----------------------------------------------------------------------------------------
 Limit
   ->  Foreign Scan on time_tbl
         Oracle query: SELECT /*0e506c6af6345b33c1443508d5c649a5*/ NULL FROM  "TIME_TBL"
(3 rows)

-- select numtodsinterval with minute (result)
--Testcase 1282:
SELECT numtodsinterval(100, 'MINUTE') as DAY_TO_SECOND FROM time_tbl LIMIT 1;
ERROR:  stub numtodsinterval(integer, text) is called
CONTEXT:  PL/pgSQL function numtodsinterval(integer,text) line 3 at RAISE
-- select numtodsinterval with second (result)
--Testcase 1283:
EXPLAIN (COSTS OFF)
SELECT numtodsinterval(100, 'SECOND') as DAY_TO_SECOND FROM time_tbl LIMIT 1;
                                       QUERY PLAN                                        
-----------------------------------------------------------------------------------------
 Limit
   ->  Foreign Scan on time_tbl
         Oracle query: SELECT /*0e506c6af6345b33c1443508d5c649a5*/ NULL FROM  "TIME_TBL"
(3 rows)

-- select numtodsinterval with second (result)
--Testcase 1284:
SELECT numtodsinterval(100, 'SECOND') as DAY_TO_SECOND FROM time_tbl LIMIT 1;
ERROR:  stub numtodsinterval(integer, text) is called
CONTEXT:  PL/pgSQL function numtodsinterval(integer,text) line 3 at RAISE
-- NUMTOYMINTERVAL(number, unit)
-- select numtoyminterval with year (explain)
--Testcase 1285:
EXPLAIN (COSTS OFF)
SELECT numtoyminterval(100, 'YEAR') as YEAR_TO_MONTH FROM time_tbl LIMIT 1;
                                       QUERY PLAN                                        
-----------------------------------------------------------------------------------------
 Limit
   ->  Foreign Scan on time_tbl
         Oracle query: SELECT /*0e506c6af6345b33c1443508d5c649a5*/ NULL FROM  "TIME_TBL"
(3 rows)

-- select numtoyminterval with year (result)
--Testcase 1286:
SELECT numtoyminterval(100, 'YEAR') as YEAR_TO_MONTH FROM time_tbl LIMIT 1;
ERROR:  stub numtoyminterval(integer, text) is called
CONTEXT:  PL/pgSQL function numtoyminterval(integer,text) line 3 at RAISE
-- select numtoyminterval with month (explain)
--Testcase 1287:
EXPLAIN (COSTS OFF)
SELECT numtoyminterval(100, 'MONTH') as YEAR_TO_MONTH FROM time_tbl LIMIT 1;
                                       QUERY PLAN                                        
-----------------------------------------------------------------------------------------
 Limit
   ->  Foreign Scan on time_tbl
         Oracle query: SELECT /*0e506c6af6345b33c1443508d5c649a5*/ NULL FROM  "TIME_TBL"
(3 rows)

-- select numtoyminterval with month (result)
--Testcase 1288:
SELECT numtoyminterval(100, 'MONTH') as YEAR_TO_MONTH FROM time_tbl LIMIT 1;
ERROR:  stub numtoyminterval(integer, text) is called
CONTEXT:  PL/pgSQL function numtoyminterval(integer,text) line 3 at RAISE
-- ORACLE_ROUND(date/timestamp)
-- select round with date (explain)
--Testcase 1289:
EXPLAIN (COSTS OFF)
select c2, oracle_round(c2) from time_tbl;
                                    QUERY PLAN                                     
-----------------------------------------------------------------------------------
 Foreign Scan on time_tbl
   Oracle query: SELECT /*a50e2ec7624cc0c1ab90cca911a60b5a*/ "C2" FROM  "TIME_TBL"
(2 rows)

-- select round with date (result)
--Testcase 1290:
select c2, oracle_round(c2) from time_tbl;
ERROR:  stub oracle_round(date) is called
CONTEXT:  PL/pgSQL function oracle_round(date) line 3 at RAISE
-- select round with date and format (explain)
-- One greater than the first two digits of a four-digit year
--Testcase 1291:
EXPLAIN (COSTS OFF)
select c2, oracle_round(c2, 'CC') from time_tbl;
                                    QUERY PLAN                                     
-----------------------------------------------------------------------------------
 Foreign Scan on time_tbl
   Oracle query: SELECT /*a50e2ec7624cc0c1ab90cca911a60b5a*/ "C2" FROM  "TIME_TBL"
(2 rows)

-- select round with date and format (result)
-- One greater than the first two digits of a four-digit year
--Testcase 1292:
select c2, oracle_round(c2, 'CC') from time_tbl;
ERROR:  stub oracle_round(date, text) is called
CONTEXT:  PL/pgSQL function oracle_round(date,text) line 3 at RAISE
-- select round with date and format (explain)
-- One greater than the first two digits of a four-digit year
--Testcase 1293:
EXPLAIN (COSTS OFF)
select c2, oracle_round(c2, 'SCC') from time_tbl;
                                    QUERY PLAN                                     
-----------------------------------------------------------------------------------
 Foreign Scan on time_tbl
   Oracle query: SELECT /*a50e2ec7624cc0c1ab90cca911a60b5a*/ "C2" FROM  "TIME_TBL"
(2 rows)

-- select round with date and format (result)
-- One greater than the first two digits of a four-digit year
--Testcase 1294:
select c2, oracle_round(c2, 'SCC') from time_tbl;
ERROR:  stub oracle_round(date, text) is called
CONTEXT:  PL/pgSQL function oracle_round(date,text) line 3 at RAISE
-- select round with date and format (explain)
-- Year (rounds up on July 1)
--Testcase 1295:
EXPLAIN (COSTS OFF)
select c2, oracle_round(c2, 'SYYYY') from time_tbl;
                                    QUERY PLAN                                     
-----------------------------------------------------------------------------------
 Foreign Scan on time_tbl
   Oracle query: SELECT /*a50e2ec7624cc0c1ab90cca911a60b5a*/ "C2" FROM  "TIME_TBL"
(2 rows)

-- select round with date and format (result)
-- Year (rounds up on July 1)
--Testcase 1296:
select c2, oracle_round(c2, 'SYYYY') from time_tbl;
ERROR:  stub oracle_round(date, text) is called
CONTEXT:  PL/pgSQL function oracle_round(date,text) line 3 at RAISE
-- select round with date and format (explain)
-- Year (rounds up on July 1)
--Testcase 1297:
EXPLAIN (COSTS OFF)
select c2, oracle_round(c2, 'YYYY') from time_tbl;
                                    QUERY PLAN                                     
-----------------------------------------------------------------------------------
 Foreign Scan on time_tbl
   Oracle query: SELECT /*a50e2ec7624cc0c1ab90cca911a60b5a*/ "C2" FROM  "TIME_TBL"
(2 rows)

-- select round with date and format (result)
-- Year (rounds up on July 1)
--Testcase 1298:
select c2, oracle_round(c2, 'YYYY') from time_tbl;
ERROR:  stub oracle_round(date, text) is called
CONTEXT:  PL/pgSQL function oracle_round(date,text) line 3 at RAISE
-- select round with date and format (explain)
-- Year (rounds up on July 1)
--Testcase 1299:
EXPLAIN (COSTS OFF)
select c2, oracle_round(c2, 'YEAR') from time_tbl;
                                    QUERY PLAN                                     
-----------------------------------------------------------------------------------
 Foreign Scan on time_tbl
   Oracle query: SELECT /*a50e2ec7624cc0c1ab90cca911a60b5a*/ "C2" FROM  "TIME_TBL"
(2 rows)

-- select round with date and format (result)
-- Year (rounds up on July 1)
--Testcase 1300:
select c2, oracle_round(c2, 'YEAR') from time_tbl;
ERROR:  stub oracle_round(date, text) is called
CONTEXT:  PL/pgSQL function oracle_round(date,text) line 3 at RAISE
-- select round with date and format (explain)
-- Year (rounds up on July 1)
--Testcase 1301:
EXPLAIN (COSTS OFF)
select c2, oracle_round(c2, 'SYEAR') from time_tbl;
                                    QUERY PLAN                                     
-----------------------------------------------------------------------------------
 Foreign Scan on time_tbl
   Oracle query: SELECT /*a50e2ec7624cc0c1ab90cca911a60b5a*/ "C2" FROM  "TIME_TBL"
(2 rows)

-- select round with date and format (result)
-- Year (rounds up on July 1)
--Testcase 1302:
select c2, oracle_round(c2, 'SYEAR') from time_tbl;
ERROR:  stub oracle_round(date, text) is called
CONTEXT:  PL/pgSQL function oracle_round(date,text) line 3 at RAISE
-- select round with date and format (explain)
-- Year (rounds up on July 1)
--Testcase 1303:
EXPLAIN (COSTS OFF)
select c2, oracle_round(c2, 'YYY') from time_tbl;
                                    QUERY PLAN                                     
-----------------------------------------------------------------------------------
 Foreign Scan on time_tbl
   Oracle query: SELECT /*a50e2ec7624cc0c1ab90cca911a60b5a*/ "C2" FROM  "TIME_TBL"
(2 rows)

-- select round with date and format (result)
-- Year (rounds up on July 1)
--Testcase 1304:
select c2, oracle_round(c2, 'YYY') from time_tbl;
ERROR:  stub oracle_round(date, text) is called
CONTEXT:  PL/pgSQL function oracle_round(date,text) line 3 at RAISE
-- select round with date and format (explain)
-- Year (rounds up on July 1)
--Testcase 1305:
EXPLAIN (COSTS OFF)
select c2, oracle_round(c2, 'YY') from time_tbl;
                                    QUERY PLAN                                     
-----------------------------------------------------------------------------------
 Foreign Scan on time_tbl
   Oracle query: SELECT /*a50e2ec7624cc0c1ab90cca911a60b5a*/ "C2" FROM  "TIME_TBL"
(2 rows)

-- select round with date and format (result)
-- Year (rounds up on July 1)
--Testcase 1306:
select c2, oracle_round(c2, 'YY') from time_tbl;
ERROR:  stub oracle_round(date, text) is called
CONTEXT:  PL/pgSQL function oracle_round(date,text) line 3 at RAISE
-- select round with date and format (explain)
-- Year (rounds up on July 1)
--Testcase 1307:
EXPLAIN (COSTS OFF)
select c2, oracle_round(c2, 'Y') from time_tbl;
                                    QUERY PLAN                                     
-----------------------------------------------------------------------------------
 Foreign Scan on time_tbl
   Oracle query: SELECT /*a50e2ec7624cc0c1ab90cca911a60b5a*/ "C2" FROM  "TIME_TBL"
(2 rows)

-- select round with date and format (result)
-- Year (rounds up on July 1)
--Testcase 1308:
select c2, oracle_round(c2, 'Y') from time_tbl;
ERROR:  stub oracle_round(date, text) is called
CONTEXT:  PL/pgSQL function oracle_round(date,text) line 3 at RAISE
-- select round with date and format (explain)
-- ISO Year
--Testcase 1309:
EXPLAIN (COSTS OFF)
select c2, oracle_round(c2, 'IYYY') from time_tbl;
                                    QUERY PLAN                                     
-----------------------------------------------------------------------------------
 Foreign Scan on time_tbl
   Oracle query: SELECT /*a50e2ec7624cc0c1ab90cca911a60b5a*/ "C2" FROM  "TIME_TBL"
(2 rows)

-- select round with date and format (result)
-- ISO Year
--Testcase 1310:
select c2, oracle_round(c2, 'IYYY') from time_tbl;
ERROR:  stub oracle_round(date, text) is called
CONTEXT:  PL/pgSQL function oracle_round(date,text) line 3 at RAISE
-- select round with date and format (explain)
-- ISO Year
--Testcase 1311:
EXPLAIN (COSTS OFF)
select c2, oracle_round(c2, 'IYY') from time_tbl;
                                    QUERY PLAN                                     
-----------------------------------------------------------------------------------
 Foreign Scan on time_tbl
   Oracle query: SELECT /*a50e2ec7624cc0c1ab90cca911a60b5a*/ "C2" FROM  "TIME_TBL"
(2 rows)

-- select round with date and format (result)
-- ISO Year
--Testcase 1312:
select c2, oracle_round(c2, 'IYY') from time_tbl;
ERROR:  stub oracle_round(date, text) is called
CONTEXT:  PL/pgSQL function oracle_round(date,text) line 3 at RAISE
-- select round with date and format (explain)
-- ISO Year
--Testcase 1313:
EXPLAIN (COSTS OFF)
select c2, oracle_round(c2, 'IY') from time_tbl;
                                    QUERY PLAN                                     
-----------------------------------------------------------------------------------
 Foreign Scan on time_tbl
   Oracle query: SELECT /*a50e2ec7624cc0c1ab90cca911a60b5a*/ "C2" FROM  "TIME_TBL"
(2 rows)

-- select round with date and format (result)
-- ISO Year
--Testcase 1314:
select c2, oracle_round(c2, 'IY') from time_tbl;
ERROR:  stub oracle_round(date, text) is called
CONTEXT:  PL/pgSQL function oracle_round(date,text) line 3 at RAISE
-- select round with date and format (explain)
-- ISO Year
--Testcase 1315:
EXPLAIN (COSTS OFF)
select c2, oracle_round(c2, 'I') from time_tbl;
                                    QUERY PLAN                                     
-----------------------------------------------------------------------------------
 Foreign Scan on time_tbl
   Oracle query: SELECT /*a50e2ec7624cc0c1ab90cca911a60b5a*/ "C2" FROM  "TIME_TBL"
(2 rows)

-- select round with date and format (result)
-- ISO Year
--Testcase 1316:
select c2, oracle_round(c2, 'I') from time_tbl;
ERROR:  stub oracle_round(date, text) is called
CONTEXT:  PL/pgSQL function oracle_round(date,text) line 3 at RAISE
-- select round with date and format (explain)
-- Quarter (rounds up on the sixteenth day of the second month of the quarter)
--Testcase 1317:
EXPLAIN (COSTS OFF)
select c2, oracle_round(c2, 'Q') from time_tbl;
                                    QUERY PLAN                                     
-----------------------------------------------------------------------------------
 Foreign Scan on time_tbl
   Oracle query: SELECT /*a50e2ec7624cc0c1ab90cca911a60b5a*/ "C2" FROM  "TIME_TBL"
(2 rows)

-- select round with date and format (result)
-- Quarter (rounds up on the sixteenth day of the second month of the quarter)
--Testcase 1318:
select c2, oracle_round(c2, 'Q') from time_tbl;
ERROR:  stub oracle_round(date, text) is called
CONTEXT:  PL/pgSQL function oracle_round(date,text) line 3 at RAISE
-- select round with date and format (explain)
-- Month (rounds up on the sixteenth day)
--Testcase 1319:
EXPLAIN (COSTS OFF)
select c2, oracle_round(c2, 'MONTH') from time_tbl;
                                    QUERY PLAN                                     
-----------------------------------------------------------------------------------
 Foreign Scan on time_tbl
   Oracle query: SELECT /*a50e2ec7624cc0c1ab90cca911a60b5a*/ "C2" FROM  "TIME_TBL"
(2 rows)

-- select round with date and format (result)
-- Month (rounds up on the sixteenth day)
--Testcase 1320:
select c2, oracle_round(c2, 'MONTH') from time_tbl;
ERROR:  stub oracle_round(date, text) is called
CONTEXT:  PL/pgSQL function oracle_round(date,text) line 3 at RAISE
-- select round with date and format (explain)
-- Month (rounds up on the sixteenth day)
--Testcase 1321:
EXPLAIN (COSTS OFF)
select c2, oracle_round(c2, 'MON') from time_tbl;
                                    QUERY PLAN                                     
-----------------------------------------------------------------------------------
 Foreign Scan on time_tbl
   Oracle query: SELECT /*a50e2ec7624cc0c1ab90cca911a60b5a*/ "C2" FROM  "TIME_TBL"
(2 rows)

-- select round with date and format (result)
-- Month (rounds up on the sixteenth day)
--Testcase 1322:
select c2, oracle_round(c2, 'MON') from time_tbl;
ERROR:  stub oracle_round(date, text) is called
CONTEXT:  PL/pgSQL function oracle_round(date,text) line 3 at RAISE
-- select round with date and format (explain)
-- Month (rounds up on the sixteenth day)
--Testcase 1323:
EXPLAIN (COSTS OFF)
select c2, oracle_round(c2, 'MM') from time_tbl;
                                    QUERY PLAN                                     
-----------------------------------------------------------------------------------
 Foreign Scan on time_tbl
   Oracle query: SELECT /*a50e2ec7624cc0c1ab90cca911a60b5a*/ "C2" FROM  "TIME_TBL"
(2 rows)

-- select round with date and format (result)
-- Month (rounds up on the sixteenth day)
--Testcase 1324:
select c2, oracle_round(c2, 'MM') from time_tbl;
ERROR:  stub oracle_round(date, text) is called
CONTEXT:  PL/pgSQL function oracle_round(date,text) line 3 at RAISE
-- select round with date and format (explain)
-- Month (rounds up on the sixteenth day)
--Testcase 1325:
EXPLAIN (COSTS OFF)
select c2, oracle_round(c2, 'RM') from time_tbl;
                                    QUERY PLAN                                     
-----------------------------------------------------------------------------------
 Foreign Scan on time_tbl
   Oracle query: SELECT /*a50e2ec7624cc0c1ab90cca911a60b5a*/ "C2" FROM  "TIME_TBL"
(2 rows)

-- select round with date and format (result)
-- Month (rounds up on the sixteenth day)
--Testcase 1326:
select c2, oracle_round(c2, 'RM') from time_tbl;
ERROR:  stub oracle_round(date, text) is called
CONTEXT:  PL/pgSQL function oracle_round(date,text) line 3 at RAISE
-- select round with date and format (explain)
-- Same day of the week as the first day of the year
--Testcase 1327:
EXPLAIN (COSTS OFF)
select c2, oracle_round(c2, 'WW') from time_tbl;
                                    QUERY PLAN                                     
-----------------------------------------------------------------------------------
 Foreign Scan on time_tbl
   Oracle query: SELECT /*a50e2ec7624cc0c1ab90cca911a60b5a*/ "C2" FROM  "TIME_TBL"
(2 rows)

-- select round with date and format (result)
-- Same day of the week as the first day of the year
--Testcase 1328:
select c2, oracle_round(c2, 'WW') from time_tbl;
ERROR:  stub oracle_round(date, text) is called
CONTEXT:  PL/pgSQL function oracle_round(date,text) line 3 at RAISE
-- select round with date and format (explain)
-- Same day of the week as the first day of the ISO year
--Testcase 1329:
EXPLAIN (COSTS OFF)
select c2, oracle_round(c2, 'IW') from time_tbl;
                                    QUERY PLAN                                     
-----------------------------------------------------------------------------------
 Foreign Scan on time_tbl
   Oracle query: SELECT /*a50e2ec7624cc0c1ab90cca911a60b5a*/ "C2" FROM  "TIME_TBL"
(2 rows)

-- select round with date and format (result)
-- Same day of the week as the first day of the ISO year
--Testcase 1330:
select c2, oracle_round(c2, 'IW') from time_tbl;
ERROR:  stub oracle_round(date, text) is called
CONTEXT:  PL/pgSQL function oracle_round(date,text) line 3 at RAISE
-- select round with date and format (explain)
-- Same day of the week as the first day of the month
--Testcase 1331:
EXPLAIN (COSTS OFF)
select c2, oracle_round(c2, 'W') from time_tbl;
                                    QUERY PLAN                                     
-----------------------------------------------------------------------------------
 Foreign Scan on time_tbl
   Oracle query: SELECT /*a50e2ec7624cc0c1ab90cca911a60b5a*/ "C2" FROM  "TIME_TBL"
(2 rows)

-- select round with date and format (result)
-- Same day of the week as the first day of the month
--Testcase 1332:
select c2, oracle_round(c2, 'W') from time_tbl;
ERROR:  stub oracle_round(date, text) is called
CONTEXT:  PL/pgSQL function oracle_round(date,text) line 3 at RAISE
-- select round with date and format (explain)
-- Day
--Testcase 1333:
EXPLAIN (COSTS OFF)
select c2, oracle_round(c2, 'DDD') from time_tbl;
                                    QUERY PLAN                                     
-----------------------------------------------------------------------------------
 Foreign Scan on time_tbl
   Oracle query: SELECT /*a50e2ec7624cc0c1ab90cca911a60b5a*/ "C2" FROM  "TIME_TBL"
(2 rows)

-- select round with date and format (result)
-- Day
--Testcase 1334:
select c2, oracle_round(c2, 'DDD') from time_tbl;
ERROR:  stub oracle_round(date, text) is called
CONTEXT:  PL/pgSQL function oracle_round(date,text) line 3 at RAISE
-- select round with date and format (result)
-- Day
--Testcase 1335:
EXPLAIN (COSTS OFF)
select c2, oracle_round(c2, 'DD') from time_tbl;
                                    QUERY PLAN                                     
-----------------------------------------------------------------------------------
 Foreign Scan on time_tbl
   Oracle query: SELECT /*a50e2ec7624cc0c1ab90cca911a60b5a*/ "C2" FROM  "TIME_TBL"
(2 rows)

-- select round with date and format (result)
-- Day
--Testcase 1336:
select c2, oracle_round(c2, 'DD') from time_tbl;
ERROR:  stub oracle_round(date, text) is called
CONTEXT:  PL/pgSQL function oracle_round(date,text) line 3 at RAISE
-- select round with date and format (result)
-- Day
--Testcase 1337:
EXPLAIN (COSTS OFF)
select c2, oracle_round(c2, 'J') from time_tbl;
                                    QUERY PLAN                                     
-----------------------------------------------------------------------------------
 Foreign Scan on time_tbl
   Oracle query: SELECT /*a50e2ec7624cc0c1ab90cca911a60b5a*/ "C2" FROM  "TIME_TBL"
(2 rows)

-- select round with date and format (result)
-- Day
--Testcase 1338:
select c2, oracle_round(c2, 'J') from time_tbl;
ERROR:  stub oracle_round(date, text) is called
CONTEXT:  PL/pgSQL function oracle_round(date,text) line 3 at RAISE
-- select round with date and format (explain)
-- Starting day of the week
--Testcase 1339:
EXPLAIN (COSTS OFF)
select c2, oracle_round(c2, 'DAY') from time_tbl;
                                    QUERY PLAN                                     
-----------------------------------------------------------------------------------
 Foreign Scan on time_tbl
   Oracle query: SELECT /*a50e2ec7624cc0c1ab90cca911a60b5a*/ "C2" FROM  "TIME_TBL"
(2 rows)

-- select round with date and format (result)
-- Starting day of the week
--Testcase 1340:
select c2, oracle_round(c2, 'DAY') from time_tbl;
ERROR:  stub oracle_round(date, text) is called
CONTEXT:  PL/pgSQL function oracle_round(date,text) line 3 at RAISE
-- select round with date and format (explain)
-- Starting day of the week
--Testcase 1341:
EXPLAIN (COSTS OFF)
select c2, oracle_round(c2, 'DY') from time_tbl;
                                    QUERY PLAN                                     
-----------------------------------------------------------------------------------
 Foreign Scan on time_tbl
   Oracle query: SELECT /*a50e2ec7624cc0c1ab90cca911a60b5a*/ "C2" FROM  "TIME_TBL"
(2 rows)

-- select round with date and format (result)
-- Starting day of the week
--Testcase 1342:
select c2, oracle_round(c2, 'DY') from time_tbl;
ERROR:  stub oracle_round(date, text) is called
CONTEXT:  PL/pgSQL function oracle_round(date,text) line 3 at RAISE
-- select round with date and format (explain)
-- Starting day of the week
--Testcase 1343:
EXPLAIN (COSTS OFF)
select c2, oracle_round(c2, 'D') from time_tbl;
                                    QUERY PLAN                                     
-----------------------------------------------------------------------------------
 Foreign Scan on time_tbl
   Oracle query: SELECT /*a50e2ec7624cc0c1ab90cca911a60b5a*/ "C2" FROM  "TIME_TBL"
(2 rows)

-- select round with date and format (result)
-- Starting day of the week
--Testcase 1344:
select c2, oracle_round(c2, 'D') from time_tbl;
ERROR:  stub oracle_round(date, text) is called
CONTEXT:  PL/pgSQL function oracle_round(date,text) line 3 at RAISE
-- select round with date and format (explain)
-- Hour
--Testcase 1345:
EXPLAIN (COSTS OFF)
select c2, oracle_round(c2, 'HH') from time_tbl;
                                    QUERY PLAN                                     
-----------------------------------------------------------------------------------
 Foreign Scan on time_tbl
   Oracle query: SELECT /*a50e2ec7624cc0c1ab90cca911a60b5a*/ "C2" FROM  "TIME_TBL"
(2 rows)

-- select round with date and format (result)
-- Hour
--Testcase 1346:
select c2, oracle_round(c2, 'HH') from time_tbl;
ERROR:  stub oracle_round(date, text) is called
CONTEXT:  PL/pgSQL function oracle_round(date,text) line 3 at RAISE
-- select round with date and format (explain)
-- Hour
--Testcase 1347:
EXPLAIN (COSTS OFF)
select c2, oracle_round(c2, 'HH12') from time_tbl;
                                    QUERY PLAN                                     
-----------------------------------------------------------------------------------
 Foreign Scan on time_tbl
   Oracle query: SELECT /*a50e2ec7624cc0c1ab90cca911a60b5a*/ "C2" FROM  "TIME_TBL"
(2 rows)

-- select round with date and format (result)
-- Hour
--Testcase 1348:
select c2, oracle_round(c2, 'HH12') from time_tbl;
ERROR:  stub oracle_round(date, text) is called
CONTEXT:  PL/pgSQL function oracle_round(date,text) line 3 at RAISE
-- select round with date and format (explain)
-- Hour
--Testcase 1349:
EXPLAIN (COSTS OFF)
select c2, oracle_round(c2, 'HH24') from time_tbl;
                                    QUERY PLAN                                     
-----------------------------------------------------------------------------------
 Foreign Scan on time_tbl
   Oracle query: SELECT /*a50e2ec7624cc0c1ab90cca911a60b5a*/ "C2" FROM  "TIME_TBL"
(2 rows)

-- select round with date and format (result)
-- Hour
--Testcase 1350:
select c2, oracle_round(c2, 'HH24') from time_tbl;
ERROR:  stub oracle_round(date, text) is called
CONTEXT:  PL/pgSQL function oracle_round(date,text) line 3 at RAISE
-- select round with date and format (explain)
-- Minute
--Testcase 1351:
EXPLAIN (COSTS OFF)
select c2, oracle_round(c2, 'MI') from time_tbl;
                                    QUERY PLAN                                     
-----------------------------------------------------------------------------------
 Foreign Scan on time_tbl
   Oracle query: SELECT /*a50e2ec7624cc0c1ab90cca911a60b5a*/ "C2" FROM  "TIME_TBL"
(2 rows)

-- select round with date and format (result)
-- Minute
--Testcase 1352:
select c2, oracle_round(c2, 'MI') from time_tbl;
ERROR:  stub oracle_round(date, text) is called
CONTEXT:  PL/pgSQL function oracle_round(date,text) line 3 at RAISE
-- select round with timestamp (explain)
--Testcase 1353:
EXPLAIN (COSTS OFF)
select c3, oracle_round(c3) from time_tbl;
                                    QUERY PLAN                                     
-----------------------------------------------------------------------------------
 Foreign Scan on time_tbl
   Oracle query: SELECT /*4f490c5041680b08bd3222e76b44c1ca*/ "C3" FROM  "TIME_TBL"
(2 rows)

-- select round with timestamp (result)
--Testcase 1354:
select c3, oracle_round(c3) from time_tbl;
ERROR:  stub oracle_round(timestamp) is called
CONTEXT:  PL/pgSQL function oracle_round(timestamp without time zone) line 3 at RAISE
-- select round with timestamp and format (explain)
-- One greater than the first two digits of a four-digit year
--Testcase 1355:
EXPLAIN (COSTS OFF)
select c3, oracle_round(c3, 'CC') from time_tbl;
                                    QUERY PLAN                                     
-----------------------------------------------------------------------------------
 Foreign Scan on time_tbl
   Oracle query: SELECT /*4f490c5041680b08bd3222e76b44c1ca*/ "C3" FROM  "TIME_TBL"
(2 rows)

-- select round with timestamp and format (result)
-- One greater than the first two digits of a four-digit year
--Testcase 1356:
select c3, oracle_round(c3, 'CC') from time_tbl;
ERROR:  stub oracle_round(timestamp, text) is called
CONTEXT:  PL/pgSQL function oracle_round(timestamp without time zone,text) line 3 at RAISE
-- select round with timestamp and format (explain)
-- One greater than the first two digits of a four-digit year
--Testcase 1357:
EXPLAIN (COSTS OFF)
select c3, oracle_round(c3, 'SCC') from time_tbl;
                                    QUERY PLAN                                     
-----------------------------------------------------------------------------------
 Foreign Scan on time_tbl
   Oracle query: SELECT /*4f490c5041680b08bd3222e76b44c1ca*/ "C3" FROM  "TIME_TBL"
(2 rows)

-- select round with timestamp and format (result)
-- One greater than the first two digits of a four-digit year
--Testcase 1358:
select c3, oracle_round(c3, 'SCC') from time_tbl;
ERROR:  stub oracle_round(timestamp, text) is called
CONTEXT:  PL/pgSQL function oracle_round(timestamp without time zone,text) line 3 at RAISE
-- select round with timestamp and format (explain)
-- Year (rounds up on July 1)
--Testcase 1359:
EXPLAIN (COSTS OFF)
select c3, oracle_round(c3, 'SYYYY') from time_tbl;
                                    QUERY PLAN                                     
-----------------------------------------------------------------------------------
 Foreign Scan on time_tbl
   Oracle query: SELECT /*4f490c5041680b08bd3222e76b44c1ca*/ "C3" FROM  "TIME_TBL"
(2 rows)

-- select round with timestamp and format (result)
-- Year (rounds up on July 1)
--Testcase 1360:
select c3, oracle_round(c3, 'SYYYY') from time_tbl;
ERROR:  stub oracle_round(timestamp, text) is called
CONTEXT:  PL/pgSQL function oracle_round(timestamp without time zone,text) line 3 at RAISE
-- select round with timestamp and format (explain)
-- Year (rounds up on July 1)
--Testcase 1361:
EXPLAIN (COSTS OFF)
select c3, oracle_round(c3, 'YYYY') from time_tbl;
                                    QUERY PLAN                                     
-----------------------------------------------------------------------------------
 Foreign Scan on time_tbl
   Oracle query: SELECT /*4f490c5041680b08bd3222e76b44c1ca*/ "C3" FROM  "TIME_TBL"
(2 rows)

-- select round with timestamp and format (result)
-- Year (rounds up on July 1)
--Testcase 1362:
select c3, oracle_round(c3, 'YYYY') from time_tbl;
ERROR:  stub oracle_round(timestamp, text) is called
CONTEXT:  PL/pgSQL function oracle_round(timestamp without time zone,text) line 3 at RAISE
-- select round with timestamp and format (explain)
-- Year (rounds up on July 1)
--Testcase 1363:
EXPLAIN (COSTS OFF)
select c3, oracle_round(c3, 'YEAR') from time_tbl;
                                    QUERY PLAN                                     
-----------------------------------------------------------------------------------
 Foreign Scan on time_tbl
   Oracle query: SELECT /*4f490c5041680b08bd3222e76b44c1ca*/ "C3" FROM  "TIME_TBL"
(2 rows)

-- select round with timestamp and format (result)
-- Year (rounds up on July 1)
--Testcase 1364:
select c3, oracle_round(c3, 'YEAR') from time_tbl;
ERROR:  stub oracle_round(timestamp, text) is called
CONTEXT:  PL/pgSQL function oracle_round(timestamp without time zone,text) line 3 at RAISE
-- select round with timestamp and format (explain)
-- Year (rounds up on July 1)
--Testcase 1365:
EXPLAIN (COSTS OFF)
select c3, oracle_round(c3, 'SYEAR') from time_tbl;
                                    QUERY PLAN                                     
-----------------------------------------------------------------------------------
 Foreign Scan on time_tbl
   Oracle query: SELECT /*4f490c5041680b08bd3222e76b44c1ca*/ "C3" FROM  "TIME_TBL"
(2 rows)

-- select round with timestamp and format (result)
-- Year (rounds up on July 1)
--Testcase 1366:
select c3, oracle_round(c3, 'SYEAR') from time_tbl;
ERROR:  stub oracle_round(timestamp, text) is called
CONTEXT:  PL/pgSQL function oracle_round(timestamp without time zone,text) line 3 at RAISE
-- select round with timestamp and format (explain)
-- Year (rounds up on July 1)
--Testcase 1367:
EXPLAIN (COSTS OFF)
select c3, oracle_round(c3, 'YYY') from time_tbl;
                                    QUERY PLAN                                     
-----------------------------------------------------------------------------------
 Foreign Scan on time_tbl
   Oracle query: SELECT /*4f490c5041680b08bd3222e76b44c1ca*/ "C3" FROM  "TIME_TBL"
(2 rows)

-- select round with timestamp and format (result)
-- Year (rounds up on July 1)
--Testcase 1368:
select c3, oracle_round(c3, 'YYY') from time_tbl;
ERROR:  stub oracle_round(timestamp, text) is called
CONTEXT:  PL/pgSQL function oracle_round(timestamp without time zone,text) line 3 at RAISE
-- select round with timestamp and format (explain)
-- Year (rounds up on July 1)
--Testcase 1369:
EXPLAIN (COSTS OFF)
select c3, oracle_round(c3, 'YY') from time_tbl;
                                    QUERY PLAN                                     
-----------------------------------------------------------------------------------
 Foreign Scan on time_tbl
   Oracle query: SELECT /*4f490c5041680b08bd3222e76b44c1ca*/ "C3" FROM  "TIME_TBL"
(2 rows)

-- select round with timestamp and format (result)
-- Year (rounds up on July 1)
--Testcase 1370:
select c3, oracle_round(c3, 'YY') from time_tbl;
ERROR:  stub oracle_round(timestamp, text) is called
CONTEXT:  PL/pgSQL function oracle_round(timestamp without time zone,text) line 3 at RAISE
-- select round with timestamp and format (explain)
-- Year (rounds up on July 1)
--Testcase 1371:
EXPLAIN (COSTS OFF)
select c3, oracle_round(c3, 'Y') from time_tbl;
                                    QUERY PLAN                                     
-----------------------------------------------------------------------------------
 Foreign Scan on time_tbl
   Oracle query: SELECT /*4f490c5041680b08bd3222e76b44c1ca*/ "C3" FROM  "TIME_TBL"
(2 rows)

-- select round with timestamp and format (result)
-- Year (rounds up on July 1)
--Testcase 1372:
select c3, oracle_round(c3, 'Y') from time_tbl;
ERROR:  stub oracle_round(timestamp, text) is called
CONTEXT:  PL/pgSQL function oracle_round(timestamp without time zone,text) line 3 at RAISE
-- select round with timestamp and format (explain)
-- ISO Year
--Testcase 1373:
EXPLAIN (COSTS OFF)
select c3, oracle_round(c3, 'IYYY') from time_tbl;
                                    QUERY PLAN                                     
-----------------------------------------------------------------------------------
 Foreign Scan on time_tbl
   Oracle query: SELECT /*4f490c5041680b08bd3222e76b44c1ca*/ "C3" FROM  "TIME_TBL"
(2 rows)

-- select round with timestamp and format (result)
-- ISO Year
--Testcase 1374:
select c3, oracle_round(c3, 'IYYY') from time_tbl;
ERROR:  stub oracle_round(timestamp, text) is called
CONTEXT:  PL/pgSQL function oracle_round(timestamp without time zone,text) line 3 at RAISE
-- select round with timestamp and format (explain)
-- ISO Year
--Testcase 1375:
EXPLAIN (COSTS OFF)
select c3, oracle_round(c3, 'IYY') from time_tbl;
                                    QUERY PLAN                                     
-----------------------------------------------------------------------------------
 Foreign Scan on time_tbl
   Oracle query: SELECT /*4f490c5041680b08bd3222e76b44c1ca*/ "C3" FROM  "TIME_TBL"
(2 rows)

-- select round with timestamp and format (result)
-- ISO Year
--Testcase 1376:
select c3, oracle_round(c3, 'IYY') from time_tbl;
ERROR:  stub oracle_round(timestamp, text) is called
CONTEXT:  PL/pgSQL function oracle_round(timestamp without time zone,text) line 3 at RAISE
-- select round with timestamp and format (explain)
-- ISO Year
--Testcase 1377:
EXPLAIN (COSTS OFF)
select c3, oracle_round(c3, 'IY') from time_tbl;
                                    QUERY PLAN                                     
-----------------------------------------------------------------------------------
 Foreign Scan on time_tbl
   Oracle query: SELECT /*4f490c5041680b08bd3222e76b44c1ca*/ "C3" FROM  "TIME_TBL"
(2 rows)

-- select round with timestamp and format (result)
-- ISO Year
--Testcase 1378:
select c3, oracle_round(c3, 'IY') from time_tbl;
ERROR:  stub oracle_round(timestamp, text) is called
CONTEXT:  PL/pgSQL function oracle_round(timestamp without time zone,text) line 3 at RAISE
-- select round with timestamp and format (explain)
-- ISO Year
--Testcase 1379:
EXPLAIN (COSTS OFF)
select c3, oracle_round(c3, 'I') from time_tbl;
                                    QUERY PLAN                                     
-----------------------------------------------------------------------------------
 Foreign Scan on time_tbl
   Oracle query: SELECT /*4f490c5041680b08bd3222e76b44c1ca*/ "C3" FROM  "TIME_TBL"
(2 rows)

-- select round with timestamp and format (result)
-- ISO Year
--Testcase 1380:
select c3, oracle_round(c3, 'I') from time_tbl;
ERROR:  stub oracle_round(timestamp, text) is called
CONTEXT:  PL/pgSQL function oracle_round(timestamp without time zone,text) line 3 at RAISE
-- select round with timestamp and format (explain)
-- Quarter (rounds up on the sixteenth day of the second month of the quarter)
--Testcase 1381:
EXPLAIN (COSTS OFF)
select c3, oracle_round(c3, 'Q') from time_tbl;
                                    QUERY PLAN                                     
-----------------------------------------------------------------------------------
 Foreign Scan on time_tbl
   Oracle query: SELECT /*4f490c5041680b08bd3222e76b44c1ca*/ "C3" FROM  "TIME_TBL"
(2 rows)

-- select round with timestamp and format (result)
-- Quarter (rounds up on the sixteenth day of the second month of the quarter)
--Testcase 1382:
select c3, oracle_round(c3, 'Q') from time_tbl;
ERROR:  stub oracle_round(timestamp, text) is called
CONTEXT:  PL/pgSQL function oracle_round(timestamp without time zone,text) line 3 at RAISE
-- select round with timestamp and format (explain)
-- Month (rounds up on the sixteenth day)
--Testcase 1383:
EXPLAIN (COSTS OFF)
select c3, oracle_round(c3, 'MONTH') from time_tbl;
                                    QUERY PLAN                                     
-----------------------------------------------------------------------------------
 Foreign Scan on time_tbl
   Oracle query: SELECT /*4f490c5041680b08bd3222e76b44c1ca*/ "C3" FROM  "TIME_TBL"
(2 rows)

-- select round with timestamp and format (result)
-- Month (rounds up on the sixteenth day)
--Testcase 1384:
select c3, oracle_round(c3, 'MONTH') from time_tbl;
ERROR:  stub oracle_round(timestamp, text) is called
CONTEXT:  PL/pgSQL function oracle_round(timestamp without time zone,text) line 3 at RAISE
-- select round with timestamp and format (explain)
-- Month (rounds up on the sixteenth day)
--Testcase 1385:
EXPLAIN (COSTS OFF)
select c3, oracle_round(c3, 'MON') from time_tbl;
                                    QUERY PLAN                                     
-----------------------------------------------------------------------------------
 Foreign Scan on time_tbl
   Oracle query: SELECT /*4f490c5041680b08bd3222e76b44c1ca*/ "C3" FROM  "TIME_TBL"
(2 rows)

-- select round with timestamp and format (result)
-- Month (rounds up on the sixteenth day)
--Testcase 1386:
select c3, oracle_round(c3, 'MON') from time_tbl;
ERROR:  stub oracle_round(timestamp, text) is called
CONTEXT:  PL/pgSQL function oracle_round(timestamp without time zone,text) line 3 at RAISE
-- select round with timestamp and format (explain)
-- Month (rounds up on the sixteenth day)
--Testcase 1387:
EXPLAIN (COSTS OFF)
select c3, oracle_round(c3, 'MM') from time_tbl;
                                    QUERY PLAN                                     
-----------------------------------------------------------------------------------
 Foreign Scan on time_tbl
   Oracle query: SELECT /*4f490c5041680b08bd3222e76b44c1ca*/ "C3" FROM  "TIME_TBL"
(2 rows)

-- select round with timestamp and format (result)
-- Month (rounds up on the sixteenth day)
--Testcase 1388:
select c3, oracle_round(c3, 'MM') from time_tbl;
ERROR:  stub oracle_round(timestamp, text) is called
CONTEXT:  PL/pgSQL function oracle_round(timestamp without time zone,text) line 3 at RAISE
-- select round with timestamp and format (explain)
-- Month (rounds up on the sixteenth day)
--Testcase 1389:
EXPLAIN (COSTS OFF)
select c3, oracle_round(c3, 'RM') from time_tbl;
                                    QUERY PLAN                                     
-----------------------------------------------------------------------------------
 Foreign Scan on time_tbl
   Oracle query: SELECT /*4f490c5041680b08bd3222e76b44c1ca*/ "C3" FROM  "TIME_TBL"
(2 rows)

-- select round with timestamp and format (result)
-- Month (rounds up on the sixteenth day)
--Testcase 1390:
select c3, oracle_round(c3, 'RM') from time_tbl;
ERROR:  stub oracle_round(timestamp, text) is called
CONTEXT:  PL/pgSQL function oracle_round(timestamp without time zone,text) line 3 at RAISE
-- select round with timestamp and format (explain)
-- Same day of the week as the first day of the year
--Testcase 1391:
EXPLAIN (COSTS OFF)
select c3, oracle_round(c3, 'WW') from time_tbl;
                                    QUERY PLAN                                     
-----------------------------------------------------------------------------------
 Foreign Scan on time_tbl
   Oracle query: SELECT /*4f490c5041680b08bd3222e76b44c1ca*/ "C3" FROM  "TIME_TBL"
(2 rows)

-- select round with timestamp and format (result)
-- Same day of the week as the first day of the year
--Testcase 1392:
select c3, oracle_round(c3, 'WW') from time_tbl;
ERROR:  stub oracle_round(timestamp, text) is called
CONTEXT:  PL/pgSQL function oracle_round(timestamp without time zone,text) line 3 at RAISE
-- select round with timestamp and format (explain)
-- Same day of the week as the first day of the ISO year
--Testcase 1393:
EXPLAIN (COSTS OFF)
select c3, oracle_round(c3, 'IW') from time_tbl;
                                    QUERY PLAN                                     
-----------------------------------------------------------------------------------
 Foreign Scan on time_tbl
   Oracle query: SELECT /*4f490c5041680b08bd3222e76b44c1ca*/ "C3" FROM  "TIME_TBL"
(2 rows)

-- select round with timestamp and format (result)
-- Same day of the week as the first day of the ISO year
--Testcase 1394:
select c3, oracle_round(c3, 'IW') from time_tbl;
ERROR:  stub oracle_round(timestamp, text) is called
CONTEXT:  PL/pgSQL function oracle_round(timestamp without time zone,text) line 3 at RAISE
-- select round with timestamp and format (explain)
-- Same day of the week as the first day of the month
--Testcase 1395:
EXPLAIN (COSTS OFF)
select c3, oracle_round(c3, 'W') from time_tbl;
                                    QUERY PLAN                                     
-----------------------------------------------------------------------------------
 Foreign Scan on time_tbl
   Oracle query: SELECT /*4f490c5041680b08bd3222e76b44c1ca*/ "C3" FROM  "TIME_TBL"
(2 rows)

-- select round with timestamp and format (result)
-- Same day of the week as the first day of the month
--Testcase 1396:
select c3, oracle_round(c3, 'W') from time_tbl;
ERROR:  stub oracle_round(timestamp, text) is called
CONTEXT:  PL/pgSQL function oracle_round(timestamp without time zone,text) line 3 at RAISE
-- select round with timestamp and format (explain)
-- Day
--Testcase 1397:
EXPLAIN (COSTS OFF)
select c3, oracle_round(c3, 'DDD') from time_tbl;
                                    QUERY PLAN                                     
-----------------------------------------------------------------------------------
 Foreign Scan on time_tbl
   Oracle query: SELECT /*4f490c5041680b08bd3222e76b44c1ca*/ "C3" FROM  "TIME_TBL"
(2 rows)

-- select round with timestamp and format (result)
-- Day
--Testcase 1398:
select c3, oracle_round(c3, 'DDD') from time_tbl;
ERROR:  stub oracle_round(timestamp, text) is called
CONTEXT:  PL/pgSQL function oracle_round(timestamp without time zone,text) line 3 at RAISE
-- select round with timestamp and format (result)
-- Day
--Testcase 1399:
EXPLAIN (COSTS OFF)
select c3, oracle_round(c3, 'DD') from time_tbl;
                                    QUERY PLAN                                     
-----------------------------------------------------------------------------------
 Foreign Scan on time_tbl
   Oracle query: SELECT /*4f490c5041680b08bd3222e76b44c1ca*/ "C3" FROM  "TIME_TBL"
(2 rows)

-- select round with timestamp and format (result)
-- Day
--Testcase 1400:
select c3, oracle_round(c3, 'DD') from time_tbl;
ERROR:  stub oracle_round(timestamp, text) is called
CONTEXT:  PL/pgSQL function oracle_round(timestamp without time zone,text) line 3 at RAISE
-- select round with timestamp and format (explain)
-- Day
--Testcase 1401:
EXPLAIN (COSTS OFF)
select c3, oracle_round(c3, 'J') from time_tbl;
                                    QUERY PLAN                                     
-----------------------------------------------------------------------------------
 Foreign Scan on time_tbl
   Oracle query: SELECT /*4f490c5041680b08bd3222e76b44c1ca*/ "C3" FROM  "TIME_TBL"
(2 rows)

-- select round with timestamp and format (result)
-- Day
--Testcase 1402:
select c3, oracle_round(c3, 'J') from time_tbl;
ERROR:  stub oracle_round(timestamp, text) is called
CONTEXT:  PL/pgSQL function oracle_round(timestamp without time zone,text) line 3 at RAISE
-- select round with timestamp and format (explain)
-- Starting day of the week
--Testcase 1403:
EXPLAIN (COSTS OFF)
select c3, oracle_round(c3, 'DAY') from time_tbl;
                                    QUERY PLAN                                     
-----------------------------------------------------------------------------------
 Foreign Scan on time_tbl
   Oracle query: SELECT /*4f490c5041680b08bd3222e76b44c1ca*/ "C3" FROM  "TIME_TBL"
(2 rows)

-- select round with timestamp and format (result)
-- Starting day of the week
--Testcase 1404:
select c3, oracle_round(c3, 'DAY') from time_tbl;
ERROR:  stub oracle_round(timestamp, text) is called
CONTEXT:  PL/pgSQL function oracle_round(timestamp without time zone,text) line 3 at RAISE
-- select round with timestamp and format (explain)
-- Starting day of the week
--Testcase 1405:
EXPLAIN (COSTS OFF)
select c3, oracle_round(c3, 'DY') from time_tbl;
                                    QUERY PLAN                                     
-----------------------------------------------------------------------------------
 Foreign Scan on time_tbl
   Oracle query: SELECT /*4f490c5041680b08bd3222e76b44c1ca*/ "C3" FROM  "TIME_TBL"
(2 rows)

-- select round with timestamp and format (result)
-- Starting day of the week
--Testcase 1406:
select c3, oracle_round(c3, 'DY') from time_tbl;
ERROR:  stub oracle_round(timestamp, text) is called
CONTEXT:  PL/pgSQL function oracle_round(timestamp without time zone,text) line 3 at RAISE
-- select round with timestamp and format (explain)
-- Starting day of the week
--Testcase 1407:
EXPLAIN (COSTS OFF)
select c3, oracle_round(c3, 'D') from time_tbl;
                                    QUERY PLAN                                     
-----------------------------------------------------------------------------------
 Foreign Scan on time_tbl
   Oracle query: SELECT /*4f490c5041680b08bd3222e76b44c1ca*/ "C3" FROM  "TIME_TBL"
(2 rows)

-- select round with timestamp and format (result)
-- Starting day of the week
--Testcase 1408:
select c3, oracle_round(c3, 'D') from time_tbl;
ERROR:  stub oracle_round(timestamp, text) is called
CONTEXT:  PL/pgSQL function oracle_round(timestamp without time zone,text) line 3 at RAISE
-- select round with timestamp and format (explain)
-- Hour
--Testcase 1409:
EXPLAIN (COSTS OFF)
select c3, oracle_round(c3, 'HH') from time_tbl;
                                    QUERY PLAN                                     
-----------------------------------------------------------------------------------
 Foreign Scan on time_tbl
   Oracle query: SELECT /*4f490c5041680b08bd3222e76b44c1ca*/ "C3" FROM  "TIME_TBL"
(2 rows)

-- select round with timestamp and format (result)
-- Hour
--Testcase 1410:
select c3, oracle_round(c3, 'HH') from time_tbl;
ERROR:  stub oracle_round(timestamp, text) is called
CONTEXT:  PL/pgSQL function oracle_round(timestamp without time zone,text) line 3 at RAISE
-- select round with timestamp and format (explain)
-- Hour
--Testcase 1411:
EXPLAIN (COSTS OFF)
select c3, oracle_round(c3, 'HH12') from time_tbl;
                                    QUERY PLAN                                     
-----------------------------------------------------------------------------------
 Foreign Scan on time_tbl
   Oracle query: SELECT /*4f490c5041680b08bd3222e76b44c1ca*/ "C3" FROM  "TIME_TBL"
(2 rows)

-- select round with timestamp and format (result)
-- Hour
--Testcase 1412:
select c3, oracle_round(c3, 'HH12') from time_tbl;
ERROR:  stub oracle_round(timestamp, text) is called
CONTEXT:  PL/pgSQL function oracle_round(timestamp without time zone,text) line 3 at RAISE
-- select round with timestamp and format (explain)
-- Hour
--Testcase 1413:
EXPLAIN (COSTS OFF)
select c3, oracle_round(c3, 'HH24') from time_tbl;
                                    QUERY PLAN                                     
-----------------------------------------------------------------------------------
 Foreign Scan on time_tbl
   Oracle query: SELECT /*4f490c5041680b08bd3222e76b44c1ca*/ "C3" FROM  "TIME_TBL"
(2 rows)

-- select round with timestamp and format (result)
-- Hour
--Testcase 1414:
select c3, oracle_round(c3, 'HH24') from time_tbl;
ERROR:  stub oracle_round(timestamp, text) is called
CONTEXT:  PL/pgSQL function oracle_round(timestamp without time zone,text) line 3 at RAISE
-- select round with timestamp and format (explain)
-- Minute
--Testcase 1415:
EXPLAIN (COSTS OFF)
select c3, oracle_round(c3, 'MI') from time_tbl;
                                    QUERY PLAN                                     
-----------------------------------------------------------------------------------
 Foreign Scan on time_tbl
   Oracle query: SELECT /*4f490c5041680b08bd3222e76b44c1ca*/ "C3" FROM  "TIME_TBL"
(2 rows)

-- select round with timestamp and format (result)
-- Minute
--Testcase 1416:
select c3, oracle_round(c3, 'MI') from time_tbl;
ERROR:  stub oracle_round(timestamp, text) is called
CONTEXT:  PL/pgSQL function oracle_round(timestamp without time zone,text) line 3 at RAISE
--
-- End test for date/time function
--
--
-- Test for character function
--
-- CHR function
--Testcase 1417:
EXPLAIN (COSTS OFF)
SELECT id, CHR(id) FROM character_tbl;
                                       QUERY PLAN                                       
----------------------------------------------------------------------------------------
 Foreign Scan on character_tbl
   Oracle query: SELECT /*eb3be24cb87325c57938f80a430a5dfa*/ "ID" FROM  "CHARACTER_TBL"
(2 rows)

--Testcase 1418:
SELECT id, CHR(id) FROM character_tbl;
 id | chr 
----+-----
 60 | <
 79 | O
(2 rows)

--Testcase 1419:
EXPLAIN (COSTS OFF)
SELECT n, CHR(n) FROM character_tbl;
                                      QUERY PLAN                                       
---------------------------------------------------------------------------------------
 Foreign Scan on character_tbl
   Oracle query: SELECT /*a07fb158de06581d63ab24f50011c8a5*/ "N" FROM  "CHARACTER_TBL"
(2 rows)

--Testcase 1420:
SELECT n, CHR(n) FROM character_tbl;
  n  | chr 
-----+-----
 100 | d
 121 | y
(2 rows)

-- CHR fail if the input is not int
--Testcase 1421:
EXPLAIN (COSTS OFF)
SELECT fl, CHR(fl) FROM character_tbl;
ERROR:  function chr(double precision) does not exist
LINE 2: SELECT fl, CHR(fl) FROM character_tbl;
                   ^
HINT:  No function matches the given name and argument types. You might need to add explicit type casts.
-- REGEXP_REPLACE function
--Testcase 1422:
EXPLAIN (COSTS OFF)
SELECT vc, regexp_replace(vc, 'a') FROM character_tbl;
                                       QUERY PLAN                                       
----------------------------------------------------------------------------------------
 Foreign Scan on character_tbl
   Oracle query: SELECT /*f9e6fbdaaef78e302502638d901310b9*/ "VC" FROM  "CHARACTER_TBL"
(2 rows)

--Testcase 1423:
SELECT vc, regexp_replace(vc, 'a') FROM character_tbl;
ERROR:  stub regexp_replace(text, text) is called
CONTEXT:  PL/pgSQL function regexp_replace(text,text) line 3 at RAISE
--Testcase 1424:
EXPLAIN (COSTS OFF)
SELECT c, regexp_replace(c, 'e', 'Y') FROM character_tbl;
                                      QUERY PLAN                                       
---------------------------------------------------------------------------------------
 Foreign Scan on character_tbl
   Oracle query: SELECT /*1a98d42528081c9ac453df51e2ac9d38*/ "C" FROM  "CHARACTER_TBL"
(2 rows)

--Testcase 1425:
SELECT c, regexp_replace(c, 'e', 'Y') FROM character_tbl;
     c      | regexp_replace 
------------+----------------
 fixed char | fixYd char
 s1mple     | s1mplY
(2 rows)

-- Oracle replaces all, however postgres only replace the first character.
-- To replace all on postgres, use 'g' argument.
--Testcase 1426:
EXPLAIN (COSTS OFF)
SELECT nc, REGEXP_REPLACE(nc, '(.)', '\1 ') FROM character_tbl;
                                       QUERY PLAN                                       
----------------------------------------------------------------------------------------
 Foreign Scan on character_tbl
   Oracle query: SELECT /*e0f1357c3bf0eea5785c23ba49fb5c87*/ "NC" FROM  "CHARACTER_TBL"
(2 rows)

--Testcase 1427:
SELECT nc, REGEXP_REPLACE(nc, '(.)', '\1 ') FROM character_tbl;
     nc     | regexp_replace 
------------+----------------
 nat'l char | n at'l char
 perfecto   | p erfecto
(2 rows)

--Testcase 1428:
EXPLAIN (COSTS OFF)
SELECT lc, REGEXP_REPLACE (lc, '^(\S*)', 'FirstWord') FROM character_tbl;
                                       QUERY PLAN                                       
----------------------------------------------------------------------------------------
 Foreign Scan on character_tbl
   Oracle query: SELECT /*80ca07d31170eb251277c5375b8f63f6*/ "LC" FROM  "CHARACTER_TBL"
(2 rows)

--Testcase 1429:
SELECT lc, REGEXP_REPLACE (lc, '^(\S*)', 'FirstWord') FROM character_tbl;
           lc           |     regexp_replace     
------------------------+------------------------
 character large object | FirstWord large object
 Natus Vincere          | FirstWord Vincere
(2 rows)

--Testcase 1430:
EXPLAIN (COSTS OFF)
SELECT nvc, REGEXP_REPLACE (nvc, 'a|b|o|u', 'G') FROM character_tbl;
                                       QUERY PLAN                                        
-----------------------------------------------------------------------------------------
 Foreign Scan on character_tbl
   Oracle query: SELECT /*1476ad03f08dc8a93d5ce0ce412a2ed3*/ "NVC" FROM  "CHARACTER_TBL"
(2 rows)

--Testcase 1431:
SELECT nvc, REGEXP_REPLACE (nvc, 'a|b|o|u', 'G') FROM character_tbl;
    nvc     | regexp_replace 
------------+----------------
 nat'l var  | nGt'l var 
 Boombl4    | BGombl4
(2 rows)

--Testcase 1432:
EXPLAIN (COSTS OFF)
SELECT nvc, REGEXP_REPLACE (nvc, 'a|b|u', 'G'), REGEXP_REPLACE (nvc, 'a|b|u', 'G', 1, 0, 'i') FROM character_tbl;
                                       QUERY PLAN                                        
-----------------------------------------------------------------------------------------
 Foreign Scan on character_tbl
   Oracle query: SELECT /*1476ad03f08dc8a93d5ce0ce412a2ed3*/ "NVC" FROM  "CHARACTER_TBL"
(2 rows)

--Testcase 1433:
SELECT nvc, REGEXP_REPLACE (nvc, 'a|b|u', 'G'), REGEXP_REPLACE (nvc, 'a|b|u', 'G', 1, 0, 'i') FROM character_tbl;
    nvc     | regexp_replace | regexp_replace 
------------+----------------+----------------
 nat'l var  | nGt'l var      | nGt'l vGr 
 Boombl4    | BoomGl4        | GoomGl4
(2 rows)

--Testcase 1434:
EXPLAIN (COSTS OFF)
SELECT lc, REGEXP_REPLACE (lc, 'a|e', 'O', 4), REGEXP_REPLACE (lc, 'a|e', 'O', 8) FROM character_tbl;
                                       QUERY PLAN                                       
----------------------------------------------------------------------------------------
 Foreign Scan on character_tbl
   Oracle query: SELECT /*80ca07d31170eb251277c5375b8f63f6*/ "LC" FROM  "CHARACTER_TBL"
(2 rows)

--Testcase 1435:
SELECT lc, REGEXP_REPLACE (lc, 'a|e', 'O', 4), REGEXP_REPLACE (lc, 'a|e', 'O', 8) FROM character_tbl;
           lc           |     regexp_replace     |     regexp_replace     
------------------------+------------------------+------------------------
 character large object | charOcter large object | charactOr large object
 Natus Vincere          | Natus VincOre          | Natus VincOre
(2 rows)

--Testcase 1436:
EXPLAIN (COSTS OFF)
SELECT lc, REGEXP_REPLACE (lc, 'a|e', 'O', 4, 1), REGEXP_REPLACE (lc, 'a|e', 'O', 8, 0) FROM character_tbl;
                                       QUERY PLAN                                       
----------------------------------------------------------------------------------------
 Foreign Scan on character_tbl
   Oracle query: SELECT /*80ca07d31170eb251277c5375b8f63f6*/ "LC" FROM  "CHARACTER_TBL"
(2 rows)

--Testcase 1437:
SELECT lc, REGEXP_REPLACE (lc, 'a|e', 'O', 4, 1), REGEXP_REPLACE (lc, 'a|e', 'O', 8, 0) FROM character_tbl;
           lc           |     regexp_replace     |     regexp_replace     
------------------------+------------------------+------------------------
 character large object | charOcter large object | charactOr lOrgO objOct
 Natus Vincere          | Natus VincOre          | Natus VincOrO
(2 rows)

-- Oracle does not support this argument, however postgresql does.
--Testcase 1438:
EXPLAIN (COSTS OFF)
SELECT vc, regexp_replace(vc, 'r(..)', 'X\1Y', 'g') FROM character_tbl;
                                       QUERY PLAN                                       
----------------------------------------------------------------------------------------
 Foreign Scan on character_tbl
   Oracle query: SELECT /*f9e6fbdaaef78e302502638d901310b9*/ "VC" FROM  "CHARACTER_TBL"
(2 rows)

--Testcase 1439:
SELECT vc, regexp_replace(vc, 'r(..)', 'X\1Y', 'g') FROM character_tbl;
     vc     | regexp_replace 
------------+----------------
    varlena |    vaXleYna
   b1t      |   b1t  
(2 rows)

-- TRIM function
--Testcase 1440:
EXPLAIN (COSTS OFF)
SELECT vc, TRIM(vc) FROM character_tbl;
                                       QUERY PLAN                                       
----------------------------------------------------------------------------------------
 Foreign Scan on character_tbl
   Oracle query: SELECT /*f9e6fbdaaef78e302502638d901310b9*/ "VC" FROM  "CHARACTER_TBL"
(2 rows)

--Testcase 1441:
SELECT vc, TRIM(vc) FROM character_tbl;
     vc     |  btrim  
------------+---------
    varlena | varlena
   b1t      | b1t
(2 rows)

--Testcase 1442:
EXPLAIN (COSTS OFF)
SELECT c, TRIM(LEADING 'sf' FROM c), TRIM(TRAILING 'r' FROM c), TRIM(BOTH 'r' FROM c) FROM character_tbl;
                                      QUERY PLAN                                       
---------------------------------------------------------------------------------------
 Foreign Scan on character_tbl
   Oracle query: SELECT /*1a98d42528081c9ac453df51e2ac9d38*/ "C" FROM  "CHARACTER_TBL"
(2 rows)

--Testcase 1443:
SELECT c, TRIM(LEADING 'sf' FROM c), TRIM(TRAILING 'r' FROM c), TRIM(BOTH 'r' FROM c) FROM character_tbl;
     c      |   ltrim   |   rtrim   |   btrim   
------------+-----------+-----------+-----------
 fixed char | ixed char | fixed cha | fixed cha
 s1mple     | 1mple     | s1mple    | s1mple
(2 rows)

--Testcase 1444:
EXPLAIN (COSTS OFF)
SELECT lc, TRIM('t' FROM lc) FROM character_tbl;
                                       QUERY PLAN                                       
----------------------------------------------------------------------------------------
 Foreign Scan on character_tbl
   Oracle query: SELECT /*80ca07d31170eb251277c5375b8f63f6*/ "LC" FROM  "CHARACTER_TBL"
(2 rows)

--Testcase 1445:
SELECT lc, TRIM('t' FROM lc) FROM character_tbl;
           lc           |         btrim         
------------------------+-----------------------
 character large object | character large objec
 Natus Vincere          | Natus Vincere
(2 rows)

--Testcase 1446:
EXPLAIN (COSTS OFF)
SELECT lc, TRIM('' FROM lc) FROM character_tbl;
                                       QUERY PLAN                                       
----------------------------------------------------------------------------------------
 Foreign Scan on character_tbl
   Oracle query: SELECT /*80ca07d31170eb251277c5375b8f63f6*/ "LC" FROM  "CHARACTER_TBL"
(2 rows)

--Testcase 1447:
SELECT lc, TRIM('' FROM lc) FROM character_tbl;
           lc           |         btrim          
------------------------+------------------------
 character large object | character large object
 Natus Vincere          | Natus Vincere
(2 rows)

-- ASCII function
--Testcase 1448:
EXPLAIN (COSTS OFF)
SELECT lc, ASCII(lc), ASCII(SUBSTR(lc, 1, 1)), ASCII(SUBSTR(lc, 3, 1)) FROM character_tbl;
                                       QUERY PLAN                                       
----------------------------------------------------------------------------------------
 Foreign Scan on character_tbl
   Oracle query: SELECT /*80ca07d31170eb251277c5375b8f63f6*/ "LC" FROM  "CHARACTER_TBL"
(2 rows)

--Testcase 1449:
SELECT lc, ASCII(lc), ASCII(SUBSTR(lc, 1, 1)), ASCII(SUBSTR(lc, 3, 1)) FROM character_tbl;
           lc           | ascii | ascii | ascii 
------------------------+-------+-------+-------
 character large object |    99 |    99 |    97
 Natus Vincere          |    78 |    78 |   116
(2 rows)

--Testcase 1450:
EXPLAIN (COSTS OFF)
SELECT nvc, ASCII(nvc) FROM character_tbl WHERE ASCII(c) > 100;
                                                    QUERY PLAN                                                    
------------------------------------------------------------------------------------------------------------------
 Foreign Scan on character_tbl
   Oracle query: SELECT /*7f475dbaee9792c4d993704988307816*/ "NVC" FROM  "CHARACTER_TBL" WHERE (ascii("C") > 100)
(2 rows)

--Testcase 1451:
SELECT nvc, ASCII(nvc) FROM character_tbl WHERE ASCII(c) > 100;
    nvc     | ascii 
------------+-------
 nat'l var  |   110
 Boombl4    |    66
(2 rows)

-- GREATEST function
--Testcase 1452:
EXPLAIN (COSTS OFF)
SELECT GREATEST(id, 5, 500), GREATEST(id, 5, 85, NULL) FROM character_tbl WHERE GREATEST(id, 5, 85) != 0;
                                                        QUERY PLAN                                                         
---------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on character_tbl
   Oracle query: SELECT /*b6c249cbd09dfd1fd7cdf02921874b33*/ "ID" FROM  "CHARACTER_TBL" WHERE (GREATEST("ID", 5, 85) <> 0)
(2 rows)

--Testcase 1453:
SELECT GREATEST(id, 5, 500), GREATEST(id, 5, 85, NULL) FROM character_tbl WHERE GREATEST(id, 5, 85) != 0;
 greatest | greatest 
----------+----------
      500 |       85
      500 |       85
(2 rows)

--Testcase 1454:
EXPLAIN (COSTS OFF)
SELECT GREATEST(c, 'electronic', 'niko') FROM character_tbl;
                                      QUERY PLAN                                       
---------------------------------------------------------------------------------------
 Foreign Scan on character_tbl
   Oracle query: SELECT /*1a98d42528081c9ac453df51e2ac9d38*/ "C" FROM  "CHARACTER_TBL"
(2 rows)

--Testcase 1455:
SELECT GREATEST(c, 'electronic', 'niko') FROM character_tbl;
  greatest  
------------
 niko
 s1mple    
(2 rows)

-- LEAST function
--Testcase 1456:
EXPLAIN (COSTS OFF)
SELECT LEAST(n, 5, 500, NULL), LEAST(n, 111, 185) FROM character_tbl WHERE LEAST(n, 5, 85) != 0;
                                                      QUERY PLAN                                                      
----------------------------------------------------------------------------------------------------------------------
 Foreign Scan on character_tbl
   Oracle query: SELECT /*504af1ccb5770e41026fe3ec609e2a8a*/ "N" FROM  "CHARACTER_TBL" WHERE (LEAST("N", 5, 85) <> 0)
(2 rows)

--Testcase 1457:
SELECT LEAST(n, 5, 500, NULL), LEAST(n, 111, 185) FROM character_tbl WHERE LEAST(n, 5, 85) != 0;
 least | least 
-------+-------
     5 |   100
     5 |   111
(2 rows)

--Testcase 1458:
EXPLAIN (COSTS OFF)
SELECT LEAST(nvc, 'Liquid', 'Johnny') FROM character_tbl;
                                       QUERY PLAN                                        
-----------------------------------------------------------------------------------------
 Foreign Scan on character_tbl
   Oracle query: SELECT /*1476ad03f08dc8a93d5ce0ce412a2ed3*/ "NVC" FROM  "CHARACTER_TBL"
(2 rows)

--Testcase 1459:
SELECT LEAST(nvc, 'Liquid', 'Johnny') FROM character_tbl;
  least  
---------
 Johnny
 Boombl4
(2 rows)

-- COALESCE function
--Testcase 1460:
EXPLAIN (COSTS OFF)
SELECT COALESCE(n, 5, 500, NULL), COALESCE(111, n) FROM character_tbl WHERE COALESCE(n, 5, 85) != 0;
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Foreign Scan on character_tbl
   Oracle query: SELECT /*35a70586e4f0b1ce94bafad485d43fdf*/ "N" FROM  "CHARACTER_TBL" WHERE (COALESCE("N", 5) <> 0)
(2 rows)

--Testcase 1461:
SELECT COALESCE(n, 5, 500, NULL), COALESCE(111, n) FROM character_tbl WHERE COALESCE(n, 5, 85) != 0;
 coalesce | coalesce 
----------+----------
      100 |      111
      121 |      111
(2 rows)

--Testcase 1462:
EXPLAIN (COSTS OFF)
SELECT COALESCE(1.2*id, n, 19) FROM character_tbl;
                                         QUERY PLAN                                          
---------------------------------------------------------------------------------------------
 Foreign Scan on character_tbl
   Oracle query: SELECT /*e60e3d4b8b44fa75a5d361d2ae241f2c*/ "ID", "N" FROM  "CHARACTER_TBL"
(2 rows)

--Testcase 1463:
SELECT COALESCE(1.2*id, n, 19) FROM character_tbl;
 coalesce 
----------
     72.0
     94.8
(2 rows)

-- NULLIF function
--Testcase 1464:
EXPLAIN (COSTS OFF)
SELECT NULLIF(n, 5), NULLIF(n, 111) FROM character_tbl WHERE NULLIF(n, 85) != 0;
                                                     QUERY PLAN                                                     
--------------------------------------------------------------------------------------------------------------------
 Foreign Scan on character_tbl
   Oracle query: SELECT /*7d33b828dabaf749adf57429c18c545a*/ "N" FROM  "CHARACTER_TBL" WHERE (NULLIF("N", 85) <> 0)
(2 rows)

--Testcase 1465:
SELECT NULLIF(n, 5), NULLIF(n, 111) FROM character_tbl WHERE NULLIF(n, 85) != 0;
 nullif | nullif 
--------+--------
    100 |    100
    121 |    121
(2 rows)

--Testcase 1466:
EXPLAIN (COSTS OFF)
SELECT NULLIF(c, 'Fansipan') FROM character_tbl;
                                      QUERY PLAN                                       
---------------------------------------------------------------------------------------
 Foreign Scan on character_tbl
   Oracle query: SELECT /*1a98d42528081c9ac453df51e2ac9d38*/ "C" FROM  "CHARACTER_TBL"
(2 rows)

--Testcase 1467:
SELECT NULLIF(c, 'Fansipan') FROM character_tbl;
   nullif   
------------
 fixed char
 s1mple    
(2 rows)

-- TO_CHAR (character) function
--Testcase 1468:
EXPLAIN (COSTS OFF)
SELECT TO_CHAR(nc), TO_CHAR(lc), TO_CHAR('113') FROM character_tbl;
                                          QUERY PLAN                                          
----------------------------------------------------------------------------------------------
 Foreign Scan on character_tbl
   Oracle query: SELECT /*034157b81da85caad8353d9599c36dcb*/ "NC", "LC" FROM  "CHARACTER_TBL"
(2 rows)

--Testcase 1469:
SELECT TO_CHAR(nc), TO_CHAR(lc), TO_CHAR('113') FROM character_tbl;
ERROR:  stub to_char(text) is called
CONTEXT:  PL/pgSQL function to_char(text) line 3 at RAISE
--Testcase 1470:
EXPLAIN (COSTS OFF)
SELECT TO_CHAR('01110') FROM character_tbl;
                                       QUERY PLAN                                       
----------------------------------------------------------------------------------------
 Foreign Scan on character_tbl
   Oracle query: SELECT /*117edc60af334786c21a03cd55fb3caf*/ NULL FROM  "CHARACTER_TBL"
(2 rows)

--Testcase 1471:
SELECT TO_CHAR('01110') FROM character_tbl;
ERROR:  stub to_char(text) is called
CONTEXT:  PL/pgSQL function to_char(text) line 3 at RAISE
-- TO_CHAR (datetime) function
--Testcase 1472:
EXPLAIN (COSTS OFF)
SELECT TO_CHAR(itv, 'DD-MON-YYYY') FROM character_tbl;
                                       QUERY PLAN                                        
-----------------------------------------------------------------------------------------
 Foreign Scan on character_tbl
   Oracle query: SELECT /*ea49d2ccb55c8e7c450b2cf5875ebf51*/ "ITV" FROM  "CHARACTER_TBL"
(2 rows)

--Testcase 1473:
SELECT TO_CHAR(itv, 'DD-MON-YYYY') FROM character_tbl;
ERROR:  invalid format specification for an interval value
HINT:  Intervals are not tied to specific calendar dates.
--Testcase 1474:
EXPLAIN (COSTS OFF)
SELECT TO_CHAR(timetz, 'DD-MON-YYYY HH24:MI:SSxFF TZH:TZM') FROM character_tbl;
                                         QUERY PLAN                                         
--------------------------------------------------------------------------------------------
 Foreign Scan on character_tbl
   Oracle query: SELECT /*2abb846b6c44b9f0c46a65bc6a3dfdc8*/ "TIMETZ" FROM  "CHARACTER_TBL"
(2 rows)

--Testcase 1475:
SELECT TO_CHAR(timetz, 'DD-MON-YYYY HH24:MI:SSxFF TZH:TZM') FROM character_tbl;
            to_char             
--------------------------------
 02-DEC-1999 10:00:00xFF -08:00
 03-NOV-1999 12:11:11xFF -08:00
(2 rows)

--Testcase 1476:
EXPLAIN (COSTS OFF)
SELECT TO_CHAR(dt, 'DD-MON-YYYY HH24:MI:SS') FROM character_tbl;
                                       QUERY PLAN                                       
----------------------------------------------------------------------------------------
 Foreign Scan on character_tbl
   Oracle query: SELECT /*ea0438a5e469144555e308571542886a*/ "DT" FROM  "CHARACTER_TBL"
(2 rows)

--Testcase 1477:
SELECT TO_CHAR(dt, 'DD-MON-YYYY HH24:MI:SS') FROM character_tbl;
       to_char        
----------------------
 01-DEC-1999 10:00:00
 04-DEC-1999 12:12:12
(2 rows)

--Testcase 1478:
EXPLAIN (COSTS OFF)
SELECT TO_CHAR(dt) FROM character_tbl;
                                       QUERY PLAN                                       
----------------------------------------------------------------------------------------
 Foreign Scan on character_tbl
   Oracle query: SELECT /*ea0438a5e469144555e308571542886a*/ "DT" FROM  "CHARACTER_TBL"
(2 rows)

--Testcase 1479:
SELECT TO_CHAR(dt) FROM character_tbl;
ERROR:  stub to_char(timestamp) is called
CONTEXT:  PL/pgSQL function to_char(timestamp without time zone) line 3 at RAISE
--Testcase 1480:
EXPLAIN (COSTS OFF)
SELECT TO_CHAR(TIMESTAMP'1999-12-01 10:00:00') FROM character_tbl;
                                       QUERY PLAN                                       
----------------------------------------------------------------------------------------
 Foreign Scan on character_tbl
   Oracle query: SELECT /*117edc60af334786c21a03cd55fb3caf*/ NULL FROM  "CHARACTER_TBL"
(2 rows)

--Testcase 1481:
SELECT TO_CHAR(TIMESTAMP'1999-12-01 10:00:00') FROM character_tbl;
ERROR:  stub to_char(timestamp) is called
CONTEXT:  PL/pgSQL function to_char(timestamp without time zone) line 3 at RAISE
--Testcase 1482:
EXPLAIN (COSTS OFF)
SELECT TO_CHAR(INTERVAL '10 days 21 hours') FROM character_tbl;
                                       QUERY PLAN                                       
----------------------------------------------------------------------------------------
 Foreign Scan on character_tbl
   Oracle query: SELECT /*117edc60af334786c21a03cd55fb3caf*/ NULL FROM  "CHARACTER_TBL"
(2 rows)

--Testcase 1483:
SELECT TO_CHAR(INTERVAL '10 days 21 hours') FROM character_tbl;
ERROR:  stub to_char(interval) is called
CONTEXT:  PL/pgSQL function to_char(interval) line 3 at RAISE
-- TO_TIMESTAMP function
--Testcase 1484:
EXPLAIN (COSTS OFF)
SELECT TO_TIMESTAMP(dt_text, 'DD-Mon-RR HH24:MI:SS.FF') FROM character_tbl;
                                         QUERY PLAN                                          
---------------------------------------------------------------------------------------------
 Foreign Scan on character_tbl
   Oracle query: SELECT /*f962cfa956c24abc5e0c172a32c397e2*/ "DT_TEXT" FROM  "CHARACTER_TBL"
(2 rows)

--Testcase 1485:
SELECT TO_TIMESTAMP(dt_text, 'DD-Mon-RR HH24:MI:SS.FF') FROM character_tbl;
          to_timestamp           
---------------------------------
 Sun Sep 10 14:10:10 0001 PST BC
 Tue Sep 12 15:10:10 0001 PST BC
(2 rows)

--Testcase 1486:
EXPLAIN (COSTS OFF)
SELECT TO_TIMESTAMP('05 Dec 2000', 'DD Mon YYYY') FROM character_tbl;
                                       QUERY PLAN                                       
----------------------------------------------------------------------------------------
 Foreign Scan on character_tbl
   Oracle query: SELECT /*117edc60af334786c21a03cd55fb3caf*/ NULL FROM  "CHARACTER_TBL"
(2 rows)

--Testcase 1487:
SELECT TO_TIMESTAMP('05 Dec 2000', 'DD Mon YYYY') FROM character_tbl;
         to_timestamp         
------------------------------
 Tue Dec 05 00:00:00 2000 PST
 Tue Dec 05 00:00:00 2000 PST
(2 rows)

--
-- End test for character function
--
--Testcase 1488:
DROP FOREIGN TABLE numeric_tbl;
--Testcase 1489:
DROP FOREIGN TABLE time_tbl;
--Testcase 1490:
DROP FOREIGN TABLE character_tbl;
--Testcase 1491:
DROP USER MAPPING FOR CURRENT_USER SERVER oracle_srv;
--Testcase 1492:
DROP SERVER oracle_srv;
--Testcase 1493:
DROP EXTENSION oracle_fdw CASCADE;
